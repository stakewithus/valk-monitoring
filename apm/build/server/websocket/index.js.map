{"version":3,"sources":["../../../src/server/websocket/index.js"],"names":["wsSend","client","type","payload","resolve","reject","msg","data","send","err","broadcast","wss","message","clients","forEach","readyState","WebSocket","OPEN","console","log","toString"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,SAAS,SAATA,MAAS,CAACC,MAAD;AAAA,SAAY,UAACC,IAAD,EAAOC,OAAP;AAAA,WAAmB,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7E,UAAMC,MAAM;AACVJ,kBADU;AAEVK,cAAMJ;AAFI,OAAZ;AAIAF,aAAOO,IAAP,CAAY,yBAAeF,GAAf,CAAZ,EAAiC,UAACG,GAAD,EAAS;AACxC,YAAIA,GAAJ,EAAS;AACPJ,iBAAOI,GAAP;AACD;AACDL;AACD,OALD;AAMD,KAX6C,CAAnB;AAAA,GAAZ;AAAA,CAAf;;AAaA,IAAMM,YAAY,SAAZA,SAAY,CAACC,GAAD;AAAA,SAAS,UAACT,IAAD,EAAOU,OAAP,EAAmB;AAC5CD,QAAIE,OAAJ,CAAYC,OAAZ,CAAoB,gBAAOb,MAAP,EAAkB;AACpC,UAAIA,OAAOc,UAAP,KAAsBC,aAAUC,IAApC,EAA0C;AACxC,YAAI;AACFjB,iBAAOC,MAAP,EAAeC,IAAf,EAAqBU,OAArB;AACD,SAFD,CAEE,OAAOH,GAAP,EAAY;AACZS,kBAAQC,GAAR,CAAY,uBAAZ;AACAD,kBAAQC,GAAR,CAAYV,OAAOA,IAAIW,QAAJ,EAAnB;AACD;AACF;AACF,KATD;AAUD,GAXiB;AAAA,CAAlB;;kBAae;AACbV;AADa,C","file":"index.js","sourcesContent":["import WebSocket from 'ws';\n\nconst wsSend = (client) => (type, payload) => new Promise((resolve, reject) => {\n  const msg = {\n    type,\n    data: payload,\n  };\n  client.send(JSON.stringify(msg), (err) => {\n    if (err) {\n      reject(err);\n    }\n    resolve();\n  });\n});\n\nconst broadcast = (wss) => (type, message) => {\n  wss.clients.forEach(async (client) => {\n    if (client.readyState === WebSocket.OPEN) {\n      try {\n        wsSend(client)(type, message);\n      } catch (err) {\n        console.log('broadcastBlocks error');\n        console.log(err && err.toString());\n      }\n    }\n  });\n};\n\nexport default {\n  broadcast,\n};\n"]}