{"version":3,"sources":["../../../src/server/controllers/status.js"],"names":["logger","child","module","getProjectAndNetworkList","keys","list","reduce","acc","key","split","project","network","isExist","find","e","push","getProjectNetworkAndRegionList","region","getLastBlockCommits","Backend","latestBlockHeight","metaData","from","Config","numberOfLastCommits","blockCommitsValues","KVStore","getBlockCommitKeys","to","map","c","value","getTotalChecks","healthChecks","health","metric","checks","acc2","check","tmpAcc","Status","passing","warning","critical","nodeStatusMap","getTotalChecksByWorstStatus","out","forEach","sort","a","b","getRegionChecks","filter","hc","checkId","CheckID","name","Name","status","output","Output","concat","getNetworkStatus","projectName","networkName","keyPrefix","showCommits","host","validatorSettings","statusKeyValues","getAllByKeyPrefix","length","result","type","pop","typeCamelCase","Util","convertKebabToCamelCase","catchingUp","healthChecksBySentry","validatorAddresses","getValidatorAddress","commits","all","v","blockHeight","validatorAddress","address","index","values","getAllProjectStatus","nodeIp","node","nomadPort","consulPort","production","prodConfigFile","Core","getNodeInfos","nodeList","kv","getValidatorAddressSettings","prjList","row","n","nodeServiceList","includes","getServiceName","nodeRegion","nodeCheckList","nodeChecks","filterProjectByRegion","nodeProjects","getProjectName","prjAndNetworkList","filteredNetworkList","filteredRegionList","nodeByRegion","nodeAddress","filterProjectByHost","nodeByHost","projects","modifyChainId","networkMapping","get","req","res","args","writeHead","write","error","toString","getAllProjects","getAllHosts","getNodeStatus","query","capture","getTotalMissedBlocks","count","InfluxStore","getTotalMissedBlockCount","getMissedBlocksHistory","defaultRet","i","unshift","x","subtract","format","y","ret","valueOf","getMissedBlocksByTimeOfDay","weekDays","moment","weekdaysShort","missedBlocks","startOf","endOf","day","data","Array","fill","block","d","weekday","hour","reverse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,sBAAOC,KAAP,CAAa;AAC1BC,UAAQ;AADkB,CAAb,CAAf,C,CATA;;;AAaA,IAAMC,2BAA2B,SAA3BA,wBAA2B,CAACC,IAAD,EAAU;AACzC,MAAMC,OAAOD,KAAKE,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,qBACNA,IAAIC,KAAJ,CAAU,GAAV,CADM;AAAA;AAAA,QAC1BC,OAD0B;AAAA,QACjBC,OADiB;;AAErC,QAAMC,UAAUL,IAAIM,IAAJ,CAAS,UAACC,CAAD;AAAA,aAAOA,EAAEJ,OAAF,KAAcA,OAAd,IAAyBI,EAAEH,OAAF,KAAcA,OAA9C;AAAA,KAAT,CAAhB;AACA,QAAI,CAACC,OAAL,EAAc;AACZL,UAAIQ,IAAJ,CAAS;AACPL,wBADO;AAEPC;AAFO,OAAT;AAID;AACD,WAAOJ,GAAP;AACD,GAVY,EAUV,EAVU,CAAb;AAWA,SAAOF,IAAP;AACD,CAbD;;AAeA,IAAMW,iCAAiC,SAAjCA,8BAAiC,CAACZ,IAAD,EAAU;AAC/C;AACA,MAAMC,OAAOD,KAAKE,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,sBACEA,IAAIC,KAAJ,CAAU,GAAV,CADF;AAAA;AAAA,QAC1BC,OAD0B;AAAA,QACjBC,OADiB;AAAA,QACRM,MADQ;;AAErC,QAAML,UAAUL,IACbM,IADa,CACR,UAACC,CAAD;AAAA,aAAOA,EAAEJ,OAAF,KAAcA,OAAd,IAAyBI,EAAEH,OAAF,KAAcA,OAAvC,IAAkDG,EAAEG,MAAF,KAAaA,MAAtE;AAAA,KADQ,CAAhB;AAEA,QAAI,CAACL,OAAL,EAAc;AACZL,UAAIQ,IAAJ,CAAS;AACPL,wBADO;AAEPC,wBAFO;AAGPM;AAHO,OAAT;AAKD;AACD,WAAOV,GAAP;AACD,GAZY,EAYV,EAZU,CAAb;AAaA,SAAOF,IAAP;AACD,CAhBD;;AAkBA,IAAMa,sBAAsB,SAAtBA,mBAAsB,CAACC,OAAD;AAAA,SAAa,sBAGnC;AAAA,QAFJC,iBAEI,QAFJA,iBAEI;AAAA,QADJC,QACI,QADJA,QACI;;AACJ,QAAID,oBAAoB,CAAxB,EAA2B;AACzB,aAAO,EAAP;AACD;AACD,QAAME,OAAOF,oBAAoBG,cAAOC,mBAA3B,GACTJ,oBAAoBG,cAAOC,mBAA3B,GAAiD,CADxC,GAC4C,CADzD;AAEA,QAAMC,qBAAqB,MAAMC,kBAAQC,kBAAR,CAA2BR,OAA3B,EAAoC;AACnEG,gBADmE;AAEnEM,UAAIR,oBAAoB,CAF2C;AAGnEC;AAHmE,KAApC,CAAjC;AAKA,WAAOI,mBAAmBI,GAAnB,CAAuB,UAACC,CAAD;AAAA,aAAQ,CAAC,CAAC,CAACA,EAAEC,KAAb;AAAA,KAAvB,CAAP;AACD,GAf2B;AAAA,CAA5B;;AAiBA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,YAAD;AAAA,SAAkBA,aAAa3B,MAAb,CAAoB,UAACC,GAAD,EAAM2B,MAAN,EAAiB;AAC5E,QAAMC,SAASD,OAAOE,MAAP,CAAc9B,MAAd,CAAqB,UAAC+B,IAAD,EAAOC,KAAP,EAAiB;AACnD,UAAMC,SAAS,sBAAcF,IAAd,CAAf;AACA,UAAIC,MAAME,MAAN,KAAiB,SAArB,EAAgC;AAC9BD,eAAOE,OAAP,GAAiBJ,KAAKI,OAAL,GAAe,CAAhC;AACD,OAFD,MAEO,IAAIH,MAAME,MAAN,KAAiB,SAArB,EAAgC;AACrCD,eAAOG,OAAP,GAAiBL,KAAKK,OAAL,GAAe,CAAhC;AACD,OAFM,MAEA,IAAIJ,MAAME,MAAN,KAAiB,UAArB,EAAiC;AACtCD,eAAOI,QAAP,GAAkBN,KAAKM,QAAL,GAAgB,CAAlC;AACD;AACD,aAAOJ,MAAP;AACD,KAVc,EAUZ;AACDE,eAAS,CADR;AAEDE,gBAAU,CAFT;AAGDD,eAAS;AAHR,KAVY,CAAf;AAeAnC,QAAIkC,OAAJ,IAAeN,OAAOM,OAAtB;AACAlC,QAAIoC,QAAJ,IAAgBR,OAAOQ,QAAvB;AACApC,QAAImC,OAAJ,IAAeP,OAAOO,OAAtB;AACA,WAAOnC,GAAP;AACD,GApBwC,EAoBtC;AACDkC,aAAS,CADR;AAEDE,cAAU,CAFT;AAGDD,aAAS;AAHR,GApBsC,CAAlB;AAAA,CAAvB;;AA0BA,IAAME,gBAAgB;AACpBH,WAAS,CADW;AAEpBC,WAAS,CAFW;AAGpBC,YAAU;AAHU,CAAtB;;AAMA,IAAME,8BAA8B,SAA9BA,2BAA8B,CAACZ,YAAD,EAAkB;AACpD,MAAMa,MAAM;AACVL,aAAS,CADC;AAEVC,aAAS,CAFC;AAGVC,cAAU;AAHA,GAAZ;AAKAV,eAAac,OAAb,CAAqB,UAACb,MAAD,EAAY;AAC/BY,QAAIZ,OAAOE,MAAP,CAAcY,IAAd,CAAmB,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUN,cAAcM,EAAEV,MAAhB,IAC7BI,cAAcK,EAAET,MAAhB,CADmB;AAAA,KAAnB,EACyB,CADzB,EAC4BA,MADhC,KAC2C,CAD3C;AAED,GAHD;AAIA,SAAOM,GAAP;AACD,CAXD;;AAaA,IAAMK,kBAAkB,SAAlBA,eAAkB,CACtBlB,YADsB,EACRhB,MADQ;AAAA,SAEnBgB,aAAamB,MAAb,CAAoB,UAACd,KAAD;AAAA,WAAWA,MAAMrB,MAAN,KAAiBA,MAA5B;AAAA,GAApB,EAAwDY,GAAxD,CAA6D,UAACwB,EAAD,EAAQ;AACxE,QAAMjB,SAASiB,GAAGjB,MAAH,CAAUP,GAAV,CAAc,UAACC,CAAD;AAAA,aAAQ;AACnCwB,iBAASxB,EAAEyB,OADwB;AAEnCC,cAAM1B,EAAE2B,IAF2B;AAGnCC,gBAAQ5B,EAAEU,MAHyB;AAInCmB,gBAAQ7B,EAAE8B;AAJyB,OAAR;AAAA,KAAd,CAAf;AAMA,WAAOxB,MAAP;AACD,GARI,EAQD9B,MARC,CAQM,UAACC,GAAD,EAAMO,CAAN;AAAA,WAAYP,IAAIsD,MAAJ,CAAW/C,CAAX,CAAZ;AAAA,GARN,EAQiC,EARjC,CAFmB;AAAA,CAAxB;;AAYA,IAAMgD,mBAAmB,SAAnBA,gBAAmB,CAAC3C,OAAD;AAAA,SAAa,uBAShC;AAAA,QARJ4C,WAQI,SARJA,WAQI;AAAA,QAPJC,WAOI,SAPJA,WAOI;AAAA,QANJ/C,MAMI,SANJA,MAMI;AAAA,QALJgD,SAKI,SALJA,SAKI;AAAA,QAJJC,WAII,SAJJA,WAII;AAAA,QAHJjC,YAGI,SAHJA,YAGI;AAAA,2BAFJkC,IAEI;AAAA,QAFJA,IAEI,8BAFG,EAEH;AAAA,QADJC,iBACI,SADJA,iBACI;;AACJ,QAAMC,kBAAkB,MAAM3C,kBAAQ4C,iBAAR,CAA0BnD,OAA1B,EAAmC8C,SAAnC,CAA9B;AACA,QAAII,mBAAmBA,gBAAgBE,MAAhB,KAA2B,CAAlD,EAAqD;AACnD,aAAO,IAAP;AACD;AACD,QAAMC,SAASH,gBAAgB/D,MAAhB,CAAuB,UAACC,GAAD,EAAMmD,MAAN,EAAiB;AACrD,UAAMe,OAAOf,OAAOlD,GAAP,CAAWC,KAAX,CAAiB,GAAjB,EAAsBiE,GAAtB,EAAb;AACA,UAAMC,gBAAgBC,eAAKC,uBAAL,CAA6BJ,IAA7B,CAAtB;AACAlE,UAAIoE,aAAJ,IAAqBjB,OAAO3B,KAA5B;AACA,aAAOxB,GAAP;AACD,KALc,EAKZ,EALY,CAAf;AAMAiE,WAAOL,IAAP,GAAcA,IAAd;AACAK,WAAOT,WAAP,GAAqBA,WAArB;AACAS,WAAOR,WAAP,GAAqBA,WAArB;AACAQ,WAAOM,UAAP,GAAoB,CAAC,CAAC,CAACN,OAAOM,UAA9B;AACA,QAAI7D,MAAJ,EAAY;AACVuD,aAAOvD,MAAP,GAAgBA,MAAhB;AACA,UAAIgB,YAAJ,EAAkB;AAChBuC,eAAOvC,YAAP,GAAsBkB,gBAAgBlB,YAAhB,EAA8BhB,MAA9B,CAAtB;AACD;AACF,KALD,MAKO,IAAIgB,YAAJ,EAAkB;AACvBuC,aAAOvC,YAAP,GAAsBD,eAAeC,YAAf,CAAtB;AACAuC,aAAOO,oBAAP,GAA8BlC,4BAA4BZ,YAA5B,CAA9B;AACD;AACD,QAAIiC,WAAJ,EAAiB;AACf,UAAMc,qBAAqB,MAAMJ,eAC9BK,mBAD8B,CACVb,iBADU,EACSL,WADT,EACsBC,WADtB,CAAjC;AAEA,UAAMkB,UAAU,MAAM,kBAAQC,GAAR,CAAYH,mBAC/BnD,GAD+B,CAC3B,UAACuD,CAAD;AAAA,eAAOlE,oBAAoBC,OAApB,EAA6B;AACvCC,6BAAmBoD,OAAOa,WADa;AAEvChE,oBAAU;AACR0C,oCADQ;AAERC,oCAFQ;AAGR/C,0BAHQ;AAIRqE,8BAAkBF,EAAEG;AAJZ;AAF6B,SAA7B,CAAP;AAAA,OAD2B,CAAZ,CAAtB;AAUAf,aAAOU,OAAP,GAAiBA,QAAQ5E,MAAR,CAAe,UAACC,GAAD,EAAMuB,CAAN,EAAS0D,KAAT;AAAA,eAAmBjF,IAAIsD,MAAJ,CAAW;AAC5DL,gBAAMwB,mBAAmBQ,KAAnB,EAA0BhC,IAD4B;AAE5DiC,kBAAQ3D;AAFoD,SAAX,CAAnB;AAAA,OAAf,EAGb,EAHa,CAAjB;AAID;AACD,WAAO0C,MAAP;AACD,GApDwB;AAAA,CAAzB;;AAsDA,IAAMkB,sBAAsB,eAAtBA,mBAAsB,QAOtB;AAAA,MANJvE,OAMI,SANJA,OAMI;AAAA,MALEwE,MAKF,SALJC,IAKI;AAAA,MAJJC,SAII,SAJJA,SAII;AAAA,MAHJC,UAGI,SAHJA,UAGI;AAAA,MAFJC,UAEI,SAFJA,UAEI;AAAA,MADJC,cACI,SADJA,cACI;;AAAA,cAGA,MAAMC,eAAKC,YAAL,CAAkB;AAC1BP,kBAD0B;AAE1BE,wBAF0B;AAG1BC,0BAH0B;AAI1BC,0BAJ0B;AAK1BC;AAL0B,GAAlB,CAHN;AAAA,MAEFG,QAFE,SAEFA,QAFE;;AAUJ,MAAM/F,OAAO,MAAMe,QAAQiF,EAAR,CAAW/F,IAAX,CAAgB,iBAAhB,CAAnB;AACA,MAAM+D,oBAAoB,MAAM1C,kBAAQ2E,2BAAR,CAAoClF,OAApC,EAA6C6E,cAA7C,CAAhC;AACA,MAAMM,UAAUnG,yBAAyBC,IAAzB,CAAhB;AACA,MAAMoE,SAAS,MAAM,kBAAQW,GAAR,CAAYmB,QAC9BzE,GAD8B,CAC1B,UAAC0E,GAAD,EAAS;AACZ,QAAMtC,iCAA+BsC,IAAI7F,OAAnC,SAA8C6F,IAAI5F,OAAlD,aAAN;AACA,QAAMyB,SAAS+D,SACZ/C,MADY,CACL,UAACoD,CAAD;AAAA,aAAOA,EAAEC,eAAF,CAAkBC,QAAlB,CAA2B9B,eAAK+B,cAAL,CACxCJ,IAAI7F,OADoC,EAC3BqF,UAD2B,EACfS,EAAEI,UADa,CAA3B,CAAP;AAAA,KADK,EAIZ/E,GAJY,CAIR,UAAC2E,CAAD;AAAA,aAAQ;AACXvF,gBAAQuF,EAAEI,UADC;AAEXxE,gBAAQoE,EAAEK,aAAF,CACLzD,MADK,CACE,UAACtB,CAAD;AAAA,iBAAOA,EAAE4E,QAAF,CAAW9B,eAAK+B,cAAL,CAAoBJ,IAAI7F,OAAxB,EAAiCqF,UAAjC,EAA6CS,EAAEI,UAA/C,CAAX,CAAP;AAAA,SADF,EAEL/E,GAFK,CAED,UAACyB,OAAD;AAAA,iBAAakD,EAAEM,UAAF,CAAaxD,OAAb,CAAb;AAAA,SAFC;AAFG,OAAR;AAAA,KAJQ,CAAf;AAUA,WAAOQ,iBAAiB3C,OAAjB,EAA0B;AAC/B4C,mBAAawC,IAAI7F,OADc;AAE/BsD,mBAAauC,IAAI5F,OAFc;AAG/BsD,0BAH+B;AAI/BC,mBAAa,IAJkB;AAK/BjC,oBAAcG,MALiB;AAM/BgC;AAN+B,KAA1B,CAAP;AAQD,GArB8B,CAAZ,CAArB;AAsBA,SAAOI,MAAP;AACD,CA3CD;;AA6CA,IAAMuC,wBAAwB,SAAxBA,qBAAwB;AAAA,MAC5B5F,OAD4B,SAC5BA,OAD4B;AAAA,MAEtBwE,MAFsB,SAE5BC,IAF4B;AAAA,MAG5BC,SAH4B,SAG5BA,SAH4B;AAAA,MAI5BC,UAJ4B,SAI5BA,UAJ4B;AAAA,MAK5BC,UAL4B,SAK5BA,UAL4B;AAAA,MAM5BC,cAN4B,SAM5BA,cAN4B;AAAA,SAOxB,gBAAOtF,OAAP,EAAgBC,OAAhB,EAAyBM,MAAzB,EAAoC;AAAA,gBAGpC,MAAMgF,eAAKC,YAAL,CAAkB;AAC1BP,oBAD0B;AAE1BE,0BAF0B;AAG1BC,4BAH0B;AAI1BC,4BAJ0B;AAK1BC;AAL0B,KAAlB,CAH8B;AAAA,QAEtCG,QAFsC,SAEtCA,QAFsC;;AAUxC,QAAM/B,oBAAoB,MAAM1C,kBAAQ2E,2BAAR,CAAoClF,OAApC,EAA6C6E,cAA7C,CAAhC;AACA,QAAMgB,eAAeb,SAClB/C,MADkB,CACX,UAACoD,CAAD;AAAA,aAAOA,EAAEC,eAAF,CAAkBC,QAAlB,CAA2B9B,eAAK+B,cAAL,CACxCjG,OADwC,EAC/BqF,UAD+B,EACnBS,EAAEI,UADiB,CAA3B,CAAP;AAAA,KADW,CAArB;AAIA,QAAMxG,OAAO,MAAMe,QAAQiF,EAAR,CAAW/F,IAAX,qBAAkCuE,eAAKqC,cAAL,CAAoBvG,OAApB,CAAlC,CAAnB;AACA,QAAMwG,oBAAoBlG,+BAA+BZ,IAA/B,CAA1B;AACA,QAAM+G,sBAAsBD,kBAAkB9D,MAAlB,CAAyB,UAACtC,CAAD;AAAA,aAAO,CAACH,OAAD,IAAYA,YAAYG,EAAEH,OAAjC;AAAA,KAAzB,CAA5B;AACA,QAAMyG,qBAAqBD,oBAAoB/D,MAApB,CAA2B,UAACtC,CAAD;AAAA,aAAO,CAACG,MAAD,IAAWA,WAAWH,EAAEG,MAA/B;AAAA,KAA3B,CAA3B;AACA,QAAMmB,SAAS4E,aACZnF,GADY,CACR,UAAC2E,CAAD;AAAA,aAAQ;AACXvF,gBAAQuF,EAAEI,UADC;AAEXxE,gBAAQoE,EAAEK,aAAF,CACLzD,MADK,CACE,UAACtB,CAAD;AAAA,iBAAOA,EAAE4E,QAAF,CAAW9B,eAAK+B,cAAL,CAAoBjG,OAApB,EAA6BqF,UAA7B,EAAyCS,EAAEI,UAA3C,CAAX,CAAP;AAAA,SADF,EAEL/E,GAFK,CAED,UAACyB,OAAD;AAAA,iBAAakD,EAAEM,UAAF,CAAaxD,OAAb,CAAb;AAAA,SAFC;AAFG,OAAR;AAAA,KADQ,CAAf;AAOA,WAAO,kBAAQ6B,GAAR,CAAYiC,mBAAmBvF,GAAnB,CAAuB,UAACf,CAAD,EAAO;AAC/C,UAAMmD,gCAA8BnD,EAAEJ,OAAhC,SAA2CI,EAAEH,OAA7C,SAAwDG,EAAEG,MAA1D,aAAN;AACA,UAAMoG,eAAeL,aAAanG,IAAb,CAAkB,UAAC+E,IAAD;AAAA,eAAUA,KAAKgB,UAAL,KAAoB9F,EAAEG,MAAhC;AAAA,OAAlB,KAA6D,EAAlF;AACA,aAAO6C,iBAAiB3C,OAAjB,EAA0B;AAC/B4C,qBAAajD,EAAEJ,OADgB;AAE/BsD,qBAAalD,EAAEH,OAFgB;AAG/BM,gBAAQH,EAAEG,MAHqB;AAI/BgD,4BAJ+B;AAK/BhC,sBAAcG,MALiB;AAM/B+B,cAAMkD,aAAaC,WANY;AAO/BlD;AAP+B,OAA1B,CAAP;AASD,KAZkB,CAAZ,CAAP;AAaD,GA9C6B;AAAA,CAA9B;;AAgDA,IAAMmD,sBAAsB,SAAtBA,mBAAsB;AAAA,MAC1BpG,OAD0B,SAC1BA,OAD0B;AAAA,MAEpBwE,MAFoB,SAE1BC,IAF0B;AAAA,MAG1BC,SAH0B,SAG1BA,SAH0B;AAAA,MAI1BC,UAJ0B,SAI1BA,UAJ0B;AAAA,MAK1BC,UAL0B,SAK1BA,UAL0B;AAAA,MAM1BC,cAN0B,SAM1BA,cAN0B;AAAA,SAOtB,gBAAO7B,IAAP,EAAgB;AAAA,gBAGhB,MAAM8B,eAAKC,YAAL,CAAkB;AAC1BP,oBAD0B;AAE1BE,0BAF0B;AAG1BC,4BAH0B;AAI1BC,4BAJ0B;AAK1BC;AAL0B,KAAlB,CAHU;AAAA,QAElBG,QAFkB,SAElBA,QAFkB;;AAUpB,QAAMqB,aAAarB,SAChBtF,IADgB,CACX,UAAC2F,CAAD;AAAA,aAAOA,EAAEc,WAAF,KAAkBnD,IAAzB;AAAA,KADW,CAAnB;AAEA,QAAI,CAACqD,UAAL,EAAiB,OAAO,EAAP;AACjB,QAAI,CAACA,WAAWC,QAAhB,EAA0B,OAAO,EAAP;AAC1B,WAAO,kBAAQtC,GAAR,CAAYqC,WAAWC,QAAX,CAAoB5F,GAApB,CAAwB,UAACf,CAAD,EAAO;AAChD,UAAMmD,gCAA8BW,eAAKqC,cAAL,CAAoBnG,EAAE0C,IAAtB,CAA9B,SAA6D1C,EAAEH,OAA/D,SAA0E6G,WAAWZ,UAArF,aAAN;AACA,aAAO9C,iBAAiB3C,OAAjB,EAA0B;AAC/B4C,qBAAaa,eAAKqC,cAAL,CAAoBnG,EAAE0C,IAAtB,CADkB;AAE/BQ,qBAAalD,EAAEH,OAFgB;AAG/BM,gBAAQuG,WAAWZ,UAHY;AAI/B3C,4BAJ+B;AAK/BhC,sBAAc,CAAC;AACbhB,kBAAQuG,WAAWZ,UADN;AAEbxE,kBAAQoF,WAAWX,aAAX,CACLzD,MADK,CACE,UAACtB,CAAD;AAAA,mBAAOA,EAAE4E,QAAF,CAAW9B,eAAK+B,cAAL,CAAoB7F,EAAE0C,IAAtB,EAA4BuC,UAA5B,EAAwCyB,WAAWZ,UAAnD,CAAX,CAAP;AAAA,WADF,EAEL/E,GAFK,CAED,UAACyB,OAAD;AAAA,mBAAakE,WAAWV,UAAX,CAAsBxD,OAAtB,CAAb;AAAA,WAFC;AAFK,SAAD,CALiB;AAW/Ba,cAAMqD,WAAWF;AAXc,OAA1B,CAAP;AAaD,KAfkB,CAAZ,CAAP;AAgBD,GArC2B;AAAA,CAA5B;;AAuCA,IAAMI,gBAAgB,SAAhBA,aAAgB,CAACD,QAAD,EAAc;AAClC,MAAME,iBAAiB;AACrB,gBAAY,qBADS;AAErB,iBAAa,YAFQ;AAGrB,gBAAY,QAHS;AAIrB,kBAAc;AAJO,GAAvB;AAMA,SAAOF,SAAS5F,GAAT,CAAa,UAACnB,OAAD,EAAa;AAC/B,QAAIiH,eAAejH,QAAQqD,WAAvB,CAAJ,EAAyC;AACvCrD,cAAQsD,WAAR,GAAsB2D,eAAejH,QAAQqD,WAAvB,CAAtB;AACD;AACD,WAAOrD,OAAP;AACD,GALM,CAAP;AAMD,CAbD;;AAeA,IAAMkH,MAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,GAAN;AAAA,SAAc,gBAAOC,IAAP,EAAgB;AACxC,QAAI;AACF,UAAMvD,SAAS,MAAMkB,oBAAoBqC,IAApB,CAArB;AACAD,UAAIE,SAAJ,CAAc,GAAd,EAAmB;AACjB,wBAAgB;AADC,OAAnB;AAGAF,UAAIG,KAAJ,CAAU,yBAAeP,cAAclD,MAAd,CAAf,CAAV;AACA,aAAOsD,GAAP;AACD,KAPD,CAOE,OAAOhH,CAAP,EAAU;AACVd,aAAOkI,KAAP,CAAa,KAAb,EAAoBpH,KAAKA,EAAEqH,QAAF,EAAzB;AACAL,UAAIE,SAAJ,CAAc,GAAd;AACAF,UAAIG,KAAJ,CAAU,yBAAenH,KAAKA,EAAEqH,QAAF,EAApB,CAAV;AACA,aAAOL,GAAP;AACD;AACF,GAdW;AAAA,CAAZ;;AAgBA,IAAMM,iBAAiB,SAAjBA,cAAiB,CAACP,GAAD,EAAMC,GAAN;AAAA,SAAc,uBAE/B;AAAA,QADJ3G,OACI,SADJA,OACI;;AACJ,QAAI;AACF,UAAMf,OAAO,MAAMe,QAAQiF,EAAR,CAAW/F,IAAX,CAAgB,iBAAhB,CAAnB;AACA,UAAMiG,UAAUnG,yBAAyBC,IAAzB,CAAhB;AACA0H,UAAIE,SAAJ,CAAc,GAAd,EAAmB;AACjB,wBAAgB;AADC,OAAnB;AAGAF,UAAIG,KAAJ,CAAU,yBAAe3B,OAAf,CAAV;AACA,aAAOwB,GAAP;AACD,KARD,CAQE,OAAOhH,CAAP,EAAU;AACVd,aAAOkI,KAAP,CAAa,KAAb,EAAoBpH,KAAKA,EAAEqH,QAAF,EAAzB;AACAL,UAAIE,SAAJ,CAAc,GAAd;AACAF,UAAIG,KAAJ,CAAU,yBAAenH,KAAKA,EAAEqH,QAAF,EAApB,CAAV;AACA,aAAOL,GAAP;AACD;AACF,GAjBsB;AAAA,CAAvB;;AAmBA,IAAMO,cAAc,SAAdA,WAAc,CAACR,GAAD,EAAMC,GAAN;AAAA,SAAc,wBAM5B;AAAA,QALEnC,MAKF,UALJC,IAKI;AAAA,QAJJC,SAII,UAJJA,SAII;AAAA,QAHJC,UAGI,UAHJA,UAGI;AAAA,QAFJC,UAEI,UAFJA,UAEI;AAAA,QADJC,cACI,UADJA,cACI;;AACJ,QAAI;AAAA,mBAGE,MAAMC,eAAKC,YAAL,CAAkB;AAC1BP,sBAD0B;AAE1BE,4BAF0B;AAG1BC,8BAH0B;AAI1BC,8BAJ0B;AAK1BC;AAL0B,OAAlB,CAHR;AAAA,UAEAG,QAFA,UAEAA,QAFA;;AAUF2B,UAAIE,SAAJ,CAAc,GAAd,EAAmB;AACjB,wBAAgB;AADC,OAAnB;AAGAF,UAAIG,KAAJ,CAAU,yBAAe9B,SAAStE,GAAT,CAAa,UAAC2E,CAAD;AAAA,eAAOA,EAAEc,WAAT;AAAA,OAAb,CAAf,CAAV;AACA,aAAOQ,GAAP;AACD,KAfD,CAeE,OAAOhH,CAAP,EAAU;AACVd,aAAOkI,KAAP,CAAa,KAAb,EAAoBpH,KAAKA,EAAEqH,QAAF,EAAzB;AACAL,UAAIE,SAAJ,CAAc,GAAd;AACAF,UAAIG,KAAJ,CAAU,yBAAenH,KAAKA,EAAEqH,QAAF,EAApB,CAAV;AACA,aAAOL,GAAP;AACD;AACF,GA5BmB;AAAA,CAApB;;AA8BA,IAAMQ,gBAAgB,SAAhBA,aAAgB,SAGnBR,GAHmB;AAAA,MACpBS,KADoB,UACpBA,KADoB;AAAA,MAEpBC,OAFoB,UAEpBA,OAFoB;AAAA,SAGX,gBAAOT,IAAP,EAAgB;AACzB,QAAI;AAAA,kDACkBS,OADlB;AAAA,UACO9H,OADP;;AAEF,UAAMqD,cAAca,eAAKqC,cAAL,CAAoBvG,OAApB,CAApB;AACA,UAAMC,UAAU4H,MAAMX,GAAN,CAAU,SAAV,CAAhB;AACA,UAAM3G,SAASsH,MAAMX,GAAN,CAAU,QAAV,CAAf;AACA,UAAMzD,OAAOoE,MAAMX,GAAN,CAAU,MAAV,CAAb;AACA,UAAIpD,eAAJ;AACA,UAAIL,IAAJ,EAAU;AACRK,iBAAS,MAAM+C,oBAAoBQ,IAApB,EAA0B5D,IAA1B,CAAf;AACD,OAFD,MAEO;AACLK,iBAAS,MAAMuC,sBAAsBgB,IAAtB,EAA4BhE,WAA5B,EAAyCpD,OAAzC,EAAkDM,MAAlD,CAAf;AACD;AACD6G,UAAIE,SAAJ,CAAc,GAAd,EAAmB;AACjB,wBAAgB;AADC,OAAnB;AAGAF,UAAIG,KAAJ,CAAU,yBAAezD,MAAf,CAAV;AACA,aAAOsD,GAAP;AACD,KAjBD,CAiBE,OAAOhH,CAAP,EAAU;AACVd,aAAOkI,KAAP,CAAa,eAAb,EAA8BpH,KAAKA,EAAEqH,QAAF,EAAnC;AACAL,UAAIE,SAAJ,CAAc,GAAd;AACAF,UAAIG,KAAJ,CAAU,yBAAenH,KAAKA,EAAEqH,QAAF,EAApB,CAAV;AACA,aAAOL,GAAP;AACD;AACF,GA3BqB;AAAA,CAAtB;;AA6BA,IAAMW,uBAAuB,SAAvBA,oBAAuB,SAG1BX,GAH0B;AAAA,MAC3BS,KAD2B,UAC3BA,KAD2B;AAAA,MAE3BC,OAF2B,UAE3BA,OAF2B;AAAA,SAGlB,gBAAOT,IAAP,EAAgB;AAAA,iDACLS,OADK;AAAA,QAChB9H,OADgB;;AAEzB,QAAMC,UAAU4H,MAAMX,GAAN,CAAU,SAAV,CAAhB;AACA,QAAMc,QAAQ,MAAMC,sBAAYC,wBAAZ,CAAqC;AACvDjI,sBADuD;AAEvDD;AAFuD,KAArC,CAApB;AAIAoH,QAAIE,SAAJ,CAAc,GAAd,EAAmB;AACjB,sBAAgB;AADC,KAAnB;AAGAF,QAAIG,KAAJ,CAAU,yBAAe;AACvBS;AADuB,KAAf,CAAV;AAGA,WAAOZ,GAAP;AACD,GAjB4B;AAAA,CAA7B;;AAmBA,IAAMe,yBAAyB,SAAzBA,sBAAyB,SAG5Bf,GAH4B;AAAA,MAC7BS,KAD6B,UAC7BA,KAD6B;AAAA,MAE7BC,OAF6B,UAE7BA,OAF6B;AAAA,SAGpB,gBAAOT,IAAP,EAAgB;AACzB,QAAMW,QAAQ,EAAd;AACA,QAAMI,aAAa,EAAnB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,KAApB,EAA2BK,KAAK,CAAhC,EAAmC;AACjCD,iBAAWE,OAAX,CAAmB;AACjBC,WAAG,wBACAC,QADA,CACSH,CADT,EACY,GADZ,EAEAI,MAFA,CAEO,OAFP,CADc;AAIjBC,WAAG;AAJc,OAAnB;AAMD;;AAVwB,iDAWLZ,OAXK;AAAA,QAWhB9H,OAXgB;;AAYzB,QAAMC,UAAU4H,MAAMX,GAAN,CAAU,SAAV,CAAhB;AACA,QAAIyB,MAAM,MAAMV,sBAAYE,sBAAZ,CAAmC;AACjDnI,sBADiD;AAEjDC,sBAFiD;AAGjDW,YAAM,wBAAS4H,QAAT,CAAkB,EAAlB,EAAsB,GAAtB,EAA2BI,OAA3B,KAAuC,GAHI;AAIjD1H,UAAI,wBAAS0H,OAAT,KAAqB;AAJwB,KAAnC,CAAhB;AAMA,QAAID,IAAI9E,MAAJ,KAAe,CAAnB,EAAsB;AACpB8E,YAAMP,UAAN;AACD,KAFD,MAEO;AACLO,YAAMA,IAAIxH,GAAJ,CAAQ,UAAC0E,GAAD;AAAA,eAAU;AACtB0C,aAAG,sBAAO1C,IAAI,CAAJ,CAAP,EAAe4C,MAAf,CAAsB,OAAtB,CADmB;AAEtBC,aAAG7C,IAAI,CAAJ;AAFmB,SAAV;AAAA,OAAR,CAAN;AAID;AACDuB,QAAIE,SAAJ,CAAc,GAAd,EAAmB;AACjB,sBAAgB;AADC,KAAnB;AAGAF,QAAIG,KAAJ,CAAU,yBAAeoB,GAAf,CAAV;AACA,WAAOvB,GAAP;AACD,GAnC8B;AAAA,CAA/B;;AAqCA,IAAMyB,6BAA6B,SAA7BA,0BAA6B,SAGhCzB,GAHgC;AAAA,MACjCS,KADiC,UACjCA,KADiC;AAAA,MAEjCC,OAFiC,UAEjCA,OAFiC;AAAA,SAGxB,gBAAOT,IAAP,EAAgB;AAAA,iDACLS,OADK;AAAA,QAChB9H,OADgB;;AAEzB,QAAMC,UAAU4H,MAAMX,GAAN,CAAU,SAAV,CAAhB;AACA,QAAM4B,WAAWC,iBAAOC,aAAP,EAAjB;AACA,QAAMC,eAAe,MAAMhB,sBAAYY,0BAAZ,CAAuC;AAChE7I,sBADgE;AAEhEC,sBAFgE;AAGhEW,YAAM,wBAAS4H,QAAT,CAAkB,EAAlB,EAAsB,GAAtB,EAA2BU,OAA3B,CAAmC,GAAnC,EAAwCN,OAAxC,KAAoD,GAHM;AAIhE1H,UAAI,wBAASiI,KAAT,CAAe,GAAf,EAAoBP,OAApB,KAAgC;AAJ4B,KAAvC,CAA3B;AAMA,QAAMD,MAAMG,SAAS3H,GAAT,CAAa,UAACiI,GAAD,EAAS;AAChC,UAAMC,OAAOC,MAAM,EAAN,EAAUC,IAAV,GAAiBpI,GAAjB,CAAqB,UAACuD,CAAD,EAAII,KAAJ;AAAA,eAAe;AAC/CyD,aAAGzD,KAD4C;AAE/C4D,aAAG;AAF4C,SAAf;AAAA,OAArB,CAAb;AAIA,aAAO;AACL5F,cAAMsG,GADD;AAELC;AAFK,OAAP;AAID,KATW,CAAZ;AAUAJ,iBAAa5G,OAAb,CAAqB,UAACmH,KAAD,EAAW;AAC9B,UAAMC,IAAI,sBAAOD,MAAM,CAAN,CAAP,CAAV;AACAb,UAAIc,EAAEC,OAAF,EAAJ,EAAiBL,IAAjB,CAAsBI,EAAEE,IAAF,EAAtB,EAAgCjB,CAAhC,IAAqCc,MAAM,CAAN,CAArC;AACD,KAHD;AAIApC,QAAIE,SAAJ,CAAc,GAAd,EAAmB;AACjB,sBAAgB;AADC,KAAnB;AAGAF,QAAIG,KAAJ,CAAU,yBAAeoB,IAAIiB,OAAJ,EAAf,CAAV;AACA,WAAOxC,GAAP;AACD,GAhCkC;AAAA,CAAnC;;kBAkCe;AACbF,UADa;AAEbU,8BAFa;AAGbxE,oCAHa;AAIb3D,oDAJa;AAKbuF,0CALa;AAMbqB,8CANa;AAOb0B,4CAPa;AAQbI,gDARa;AASbU,wDATa;AAUbnB,gCAVa;AAWbC;AAXa,C","file":"status.js","sourcesContent":["/* eslint-disable import/no-named-as-default-member */\nimport pino from 'pino';\nimport moment from 'moment';\nimport KVStore from '../../monit/kv-store';\nimport InfluxStore from '../../monit/influx-store';\nimport Util from '../../common/util';\nimport Config from '../../config/dev';\nimport Core from '../../core';\n\nconst logger = pino().child({\n  module: 'controllers/status',\n});\n\nconst getProjectAndNetworkList = (keys) => {\n  const list = keys.reduce((acc, key) => {\n    const [, , project, network] = key.split('/');\n    const isExist = acc.find((e) => e.project === project && e.network === network);\n    if (!isExist) {\n      acc.push({\n        project,\n        network,\n      });\n    }\n    return acc;\n  }, []);\n  return list;\n};\n\nconst getProjectNetworkAndRegionList = (keys) => {\n  // projects/nodes/bcl-commit-hub/unknown/ap-southeast-1a/status/peers-total'\n  const list = keys.reduce((acc, key) => {\n    const [, , project, network, region] = key.split('/');\n    const isExist = acc\n      .find((e) => e.project === project && e.network === network && e.region === region);\n    if (!isExist) {\n      acc.push({\n        project,\n        network,\n        region,\n      });\n    }\n    return acc;\n  }, []);\n  return list;\n};\n\nconst getLastBlockCommits = (Backend) => async ({\n  latestBlockHeight,\n  metaData,\n}) => {\n  if (latestBlockHeight < 2) {\n    return [];\n  }\n  const from = latestBlockHeight > Config.numberOfLastCommits\n    ? latestBlockHeight - Config.numberOfLastCommits - 1 : 1;\n  const blockCommitsValues = await KVStore.getBlockCommitKeys(Backend)({\n    from,\n    to: latestBlockHeight - 1,\n    metaData,\n  });\n  return blockCommitsValues.map((c) => (!!+c.value));\n};\n\nconst getTotalChecks = (healthChecks) => healthChecks.reduce((acc, health) => {\n  const metric = health.checks.reduce((acc2, check) => {\n    const tmpAcc = Object.assign(acc2);\n    if (check.Status === 'passing') {\n      tmpAcc.passing = acc2.passing + 1;\n    } else if (check.Status === 'warning') {\n      tmpAcc.warning = acc2.warning + 1;\n    } else if (check.Status === 'critical') {\n      tmpAcc.critical = acc2.critical + 1;\n    }\n    return tmpAcc;\n  }, {\n    passing: 0,\n    critical: 0,\n    warning: 0,\n  });\n  acc.passing += metric.passing;\n  acc.critical += metric.critical;\n  acc.warning += metric.warning;\n  return acc;\n}, {\n  passing: 0,\n  critical: 0,\n  warning: 0,\n});\n\nconst nodeStatusMap = {\n  passing: 0,\n  warning: 1,\n  critical: 2,\n};\n\nconst getTotalChecksByWorstStatus = (healthChecks) => {\n  const out = {\n    passing: 0,\n    warning: 0,\n    critical: 0,\n  };\n  healthChecks.forEach((health) => {\n    out[health.checks.sort((a, b) => nodeStatusMap[b.Status]\n      - nodeStatusMap[a.Status])[0].Status] += 1;\n  });\n  return out;\n};\n\nconst getRegionChecks = (\n  healthChecks, region,\n) => healthChecks.filter((check) => check.region === region).map(((hc) => {\n  const checks = hc.checks.map((c) => ({\n    checkId: c.CheckID,\n    name: c.Name,\n    status: c.Status,\n    output: c.Output,\n  }));\n  return checks;\n})).reduce((acc, e) => acc.concat(e), []);\n\nconst getNetworkStatus = (Backend) => async ({\n  projectName,\n  networkName,\n  region,\n  keyPrefix,\n  showCommits,\n  healthChecks,\n  host = '',\n  validatorSettings,\n}) => {\n  const statusKeyValues = await KVStore.getAllByKeyPrefix(Backend)(keyPrefix);\n  if (statusKeyValues && statusKeyValues.length === 0) {\n    return null;\n  }\n  const result = statusKeyValues.reduce((acc, status) => {\n    const type = status.key.split('/').pop();\n    const typeCamelCase = Util.convertKebabToCamelCase(type);\n    acc[typeCamelCase] = status.value;\n    return acc;\n  }, {});\n  result.host = host;\n  result.projectName = projectName;\n  result.networkName = networkName;\n  result.catchingUp = !!+result.catchingUp;\n  if (region) {\n    result.region = region;\n    if (healthChecks) {\n      result.healthChecks = getRegionChecks(healthChecks, region);\n    }\n  } else if (healthChecks) {\n    result.healthChecks = getTotalChecks(healthChecks);\n    result.healthChecksBySentry = getTotalChecksByWorstStatus(healthChecks);\n  }\n  if (showCommits) {\n    const validatorAddresses = await Util\n      .getValidatorAddress(validatorSettings, projectName, networkName);\n    const commits = await Promise.all(validatorAddresses\n      .map((v) => getLastBlockCommits(Backend)({\n        latestBlockHeight: result.blockHeight,\n        metaData: {\n          projectName,\n          networkName,\n          region,\n          validatorAddress: v.address,\n        },\n      })));\n    result.commits = commits.reduce((acc, c, index) => acc.concat({\n      name: validatorAddresses[index].name,\n      values: c,\n    }), []);\n  }\n  return result;\n};\n\nconst getAllProjectStatus = async ({\n  Backend,\n  node: nodeIp,\n  nomadPort,\n  consulPort,\n  production,\n  prodConfigFile,\n}) => {\n  const {\n    nodeList,\n  } = await Core.getNodeInfos({\n    nodeIp,\n    nomadPort,\n    consulPort,\n    production,\n    prodConfigFile,\n  });\n  const keys = await Backend.kv.list('projects/global');\n  const validatorSettings = await KVStore.getValidatorAddressSettings(Backend)(prodConfigFile);\n  const prjList = getProjectAndNetworkList(keys);\n  const result = await Promise.all(prjList\n    .map((row) => {\n      const keyPrefix = `projects/global/${row.project}/${row.network}/status/`;\n      const checks = nodeList\n        .filter((n) => n.nodeServiceList.includes(Util.getServiceName(\n          row.project, production, n.nodeRegion,\n        )))\n        .map((n) => ({\n          region: n.nodeRegion,\n          checks: n.nodeCheckList\n            .filter((c) => c.includes(Util.getServiceName(row.project, production, n.nodeRegion)))\n            .map((checkId) => n.nodeChecks[checkId]),\n        }));\n      return getNetworkStatus(Backend)({\n        projectName: row.project,\n        networkName: row.network,\n        keyPrefix,\n        showCommits: true,\n        healthChecks: checks,\n        validatorSettings,\n      });\n    }));\n  return result;\n};\n\nconst filterProjectByRegion = ({\n  Backend,\n  node: nodeIp,\n  nomadPort,\n  consulPort,\n  production,\n  prodConfigFile,\n}) => async (project, network, region) => {\n  const {\n    nodeList,\n  } = await Core.getNodeInfos({\n    nodeIp,\n    nomadPort,\n    consulPort,\n    production,\n    prodConfigFile,\n  });\n  const validatorSettings = await KVStore.getValidatorAddressSettings(Backend)(prodConfigFile);\n  const nodeProjects = nodeList\n    .filter((n) => n.nodeServiceList.includes(Util.getServiceName(\n      project, production, n.nodeRegion,\n    )));\n  const keys = await Backend.kv.list(`projects/nodes/${Util.getProjectName(project)}`);\n  const prjAndNetworkList = getProjectNetworkAndRegionList(keys);\n  const filteredNetworkList = prjAndNetworkList.filter((e) => !network || network === e.network);\n  const filteredRegionList = filteredNetworkList.filter((e) => !region || region === e.region);\n  const checks = nodeProjects\n    .map((n) => ({\n      region: n.nodeRegion,\n      checks: n.nodeCheckList\n        .filter((c) => c.includes(Util.getServiceName(project, production, n.nodeRegion)))\n        .map((checkId) => n.nodeChecks[checkId]),\n    }));\n  return Promise.all(filteredRegionList.map((e) => {\n    const keyPrefix = `projects/nodes/${e.project}/${e.network}/${e.region}/status/`;\n    const nodeByRegion = nodeProjects.find((node) => node.nodeRegion === e.region) || {};\n    return getNetworkStatus(Backend)({\n      projectName: e.project,\n      networkName: e.network,\n      region: e.region,\n      keyPrefix,\n      healthChecks: checks,\n      host: nodeByRegion.nodeAddress,\n      validatorSettings,\n    });\n  }));\n};\n\nconst filterProjectByHost = ({\n  Backend,\n  node: nodeIp,\n  nomadPort,\n  consulPort,\n  production,\n  prodConfigFile,\n}) => async (host) => {\n  const {\n    nodeList,\n  } = await Core.getNodeInfos({\n    nodeIp,\n    nomadPort,\n    consulPort,\n    production,\n    prodConfigFile,\n  });\n  const nodeByHost = nodeList\n    .find((n) => n.nodeAddress === host);\n  if (!nodeByHost) return [];\n  if (!nodeByHost.projects) return [];\n  return Promise.all(nodeByHost.projects.map((e) => {\n    const keyPrefix = `projects/nodes/${Util.getProjectName(e.name)}/${e.network}/${nodeByHost.nodeRegion}/status/`;\n    return getNetworkStatus(Backend)({\n      projectName: Util.getProjectName(e.name),\n      networkName: e.network,\n      region: nodeByHost.nodeRegion,\n      keyPrefix,\n      healthChecks: [{\n        region: nodeByHost.nodeRegion,\n        checks: nodeByHost.nodeCheckList\n          .filter((c) => c.includes(Util.getServiceName(e.name, production, nodeByHost.nodeRegion)))\n          .map((checkId) => nodeByHost.nodeChecks[checkId]),\n      }],\n      host: nodeByHost.nodeAddress,\n    });\n  }));\n};\n\nconst modifyChainId = (projects) => {\n  const networkMapping = {\n    'bcl-band': 'band-guanyu-mainnet',\n    'bcl-terra': 'columbus-4',\n    'bcl-kava': 'kava-6',\n    'bcl-cosmos': 'cosmoshub-4',\n  };\n  return projects.map((project) => {\n    if (networkMapping[project.projectName]) {\n      project.networkName = networkMapping[project.projectName];\n    }\n    return project;\n  });\n};\n\nconst get = (req, res) => async (args) => {\n  try {\n    const result = await getAllProjectStatus(args);\n    res.writeHead(200, {\n      'content-type': 'application/json',\n    });\n    res.write(JSON.stringify(modifyChainId(result)));\n    return res;\n  } catch (e) {\n    logger.error('get', e && e.toString());\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst getAllProjects = (req, res) => async ({\n  Backend,\n}) => {\n  try {\n    const keys = await Backend.kv.list('projects/global');\n    const prjList = getProjectAndNetworkList(keys);\n    res.writeHead(200, {\n      'content-type': 'application/json',\n    });\n    res.write(JSON.stringify(prjList));\n    return res;\n  } catch (e) {\n    logger.error('get', e && e.toString());\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst getAllHosts = (req, res) => async ({\n  node: nodeIp,\n  nomadPort,\n  consulPort,\n  production,\n  prodConfigFile,\n}) => {\n  try {\n    const {\n      nodeList,\n    } = await Core.getNodeInfos({\n      nodeIp,\n      nomadPort,\n      consulPort,\n      production,\n      prodConfigFile,\n    });\n    res.writeHead(200, {\n      'content-type': 'application/json',\n    });\n    res.write(JSON.stringify(nodeList.map((n) => n.nodeAddress)));\n    return res;\n  } catch (e) {\n    logger.error('get', e && e.toString());\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst getNodeStatus = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  try {\n    const [, project] = capture;\n    const projectName = Util.getProjectName(project);\n    const network = query.get('network');\n    const region = query.get('region');\n    const host = query.get('host');\n    let result;\n    if (host) {\n      result = await filterProjectByHost(args)(host);\n    } else {\n      result = await filterProjectByRegion(args)(projectName, network, region);\n    }\n    res.writeHead(200, {\n      'content-type': 'application/json',\n    });\n    res.write(JSON.stringify(result));\n    return res;\n  } catch (e) {\n    logger.error('getNodeStatus', e && e.toString());\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst getTotalMissedBlocks = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  const [, project] = capture;\n  const network = query.get('network');\n  const count = await InfluxStore.getTotalMissedBlockCount({\n    network,\n    project,\n  });\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify({\n    count,\n  }));\n  return res;\n};\n\nconst getMissedBlocksHistory = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  const count = 14;\n  const defaultRet = [];\n  for (let i = 0; i < count; i += 1) {\n    defaultRet.unshift({\n      x: moment()\n        .subtract(i, 'd')\n        .format('MMM D'),\n      y: 0,\n    });\n  }\n  const [, project] = capture;\n  const network = query.get('network');\n  let ret = await InfluxStore.getMissedBlocksHistory({\n    project,\n    network,\n    from: moment().subtract(13, 'd').valueOf() * 1e6,\n    to: moment().valueOf() * 1e6,\n  });\n  if (ret.length === 0) {\n    ret = defaultRet;\n  } else {\n    ret = ret.map((row) => ({\n      x: moment(row[0]).format('MMM D'),\n      y: row[1],\n    }));\n  }\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify(ret));\n  return res;\n};\n\nconst getMissedBlocksByTimeOfDay = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  const [, project] = capture;\n  const network = query.get('network');\n  const weekDays = moment.weekdaysShort();\n  const missedBlocks = await InfluxStore.getMissedBlocksByTimeOfDay({\n    project,\n    network,\n    from: moment().subtract(13, 'd').startOf('d').valueOf() * 1e6,\n    to: moment().endOf('d').valueOf() * 1e6,\n  });\n  const ret = weekDays.map((day) => {\n    const data = Array(24).fill().map((v, index) => ({\n      x: index,\n      y: 0,\n    }));\n    return {\n      name: day,\n      data,\n    };\n  });\n  missedBlocks.forEach((block) => {\n    const d = moment(block[0]);\n    ret[d.weekday()].data[d.hour()].y += block[1];\n  });\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify(ret.reverse()));\n  return res;\n};\n\nexport default {\n  get,\n  getNodeStatus,\n  getNetworkStatus,\n  getProjectAndNetworkList,\n  getAllProjectStatus,\n  filterProjectByRegion,\n  getTotalMissedBlocks,\n  getMissedBlocksHistory,\n  getMissedBlocksByTimeOfDay,\n  getAllProjects,\n  getAllHosts,\n};\n"]}