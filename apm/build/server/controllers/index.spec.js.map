{"version":3,"sources":["../../../src/server/controllers/index.spec.js"],"names":["nockMoreConsulAPI","host","port","baseUri","MockContents","TestUtil","getFolderContent","get","reply","ListKeys","put","GetAllStatusKeys","GetGlobalCommitsKeys","GetNodeStatusKeys","GetThresholdDefaultSetting","GetThresholdCustomSetting","times","describe","server","before","node","consulPort","production","prodConfigFile","it","set","expect","end","err","res","toJSON","text","replyBody","JSON","parse","assert","equal","length","firstStatus","projectName","networkName","blockHeight","peersInbound","peersOutbound","peersTotal","deepEqual","commits","name","values","console","log","expected","customSettings","kava","lastBlockTime","critical","warning","peerCounts","defaultSettings","missedBlocks","project","network","validators","address","process","env","TERRA_LCD","TERRA_ORACLE_VALIDATOR_ADDRESS","misses","uptime","body","notes","status"],"mappings":"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","file":"index.spec.js","sourcesContent":["import { assert } from 'chai';\nimport request from 'supertest';\nimport nock from 'nock';\nimport NockNomadAPI from '../../plugins/schedulers/nomad2/nocks/api';\nimport NockTendermintAPI from '../../plugins/chains/tendermint/nocks';\nimport NockConsulAPI from '../../plugins/backends/consul2/nocks/api';\nimport Server from '../server';\nimport TestUtil from '../../common/test-util';\nimport NockTerraApi from '../../monit/terra/nock/api';\n\nconst nockMoreConsulAPI = async (host, port) => {\n  const baseUri = `http://${host}:${port}`;\n  const MockContents = await TestUtil.getFolderContent('server/controllers/fixtures');\n  nock(baseUri)\n    .get('/v1/kv/projects/global?keys=true')\n    .reply(200, MockContents.ListKeys);\n  nock(baseUri)\n    .get('/v1/kv/projects/nodes/bcl-commit-hub?keys=true')\n    .reply(200, MockContents.ListKeys);\n  nock(baseUri)\n    .put('/v1/txn')\n    .reply(200, MockContents.GetAllStatusKeys);\n  nock(baseUri)\n    .put('/v1/txn')\n    .reply(200, MockContents.GetGlobalCommitsKeys);\n  nock(baseUri)\n    .put('/v1/txn')\n    .reply(200, MockContents.GetNodeStatusKeys);\n  nock(baseUri)\n    .get('/v1/kv/apm/settings/threshold/default')\n    .reply(200, MockContents.GetThresholdDefaultSetting);\n  nock(baseUri)\n    .get('/v1/kv/apm/settings/threshold/custom')\n    .reply(200, MockContents.GetThresholdCustomSetting);\n  nock(baseUri)\n    .get('/v1/kv/apm/settings/validator-addresses/bcl-commit-hub/unknown')\n    .times(2)\n    .reply(200, '');\n};\n\ndescribe('# Server API', () => {\n  let server = {};\n\n  before(async () => {\n    server = Server({\n      node: '127.0.0.1',\n      consulPort: 8500,\n      production: true,\n      prodConfigFile: 'prod-config/config.json',\n    });\n    await NockNomadAPI('127.0.0.1', 4646);\n    await NockConsulAPI('127.0.0.1', 8500);\n    await nockMoreConsulAPI('127.0.0.1', 8500);\n    await NockTendermintAPI('127.0.0.1', 46657);\n    await NockTerraApi('127.0.0.1', 1321);\n  });\n  describe('# Status Controller', () => {\n    it('should get global status Tendermint RPC for all nodes', async () => {\n      request(server)\n        .get('/api/v1/status')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .end((err, res) => {\n          if (err) throw err;\n          const { text } = res.toJSON();\n          const replyBody = JSON.parse(text);\n          assert.equal(replyBody.length, 1);\n          const { 0: firstStatus } = replyBody;\n          assert.equal(firstStatus.projectName, 'bcl-commit-hub');\n          assert.equal(firstStatus.networkName, 'unknown');\n          assert.equal(firstStatus.blockHeight, '1000');\n          assert.equal(firstStatus.peersInbound, '10');\n          assert.equal(firstStatus.peersOutbound, '5');\n          assert.equal(firstStatus.peersTotal, '15');\n          assert.deepEqual(firstStatus.commits,\n            [{\n              name: 'StakeWithUs',\n              values: [],\n            }]);\n        });\n    });\n\n    it('should get global status Tendermint RPC for 1 node', async () => {\n      request(server)\n        .get('/api/v1/node-status/commit-hub?network=unknown&region=ap-southeast-1a')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .end((err, res) => {\n          if (err) throw err;\n          const { text } = res.toJSON();\n          const replyBody = JSON.parse(text);\n          assert.equal(replyBody.length, 1);\n          const { 0: firstStatus } = replyBody;\n          assert.equal(firstStatus.projectName, 'bcl-commit-hub');\n          assert.equal(firstStatus.networkName, 'unknown');\n          assert.equal(firstStatus.blockHeight, '1000');\n          assert.equal(firstStatus.peersInbound, '10');\n          assert.equal(firstStatus.peersOutbound, '5');\n          assert.equal(firstStatus.peersTotal, '15');\n        });\n    });\n  });\n  describe('# KVStore Controller', () => {\n    it('should get threshold settings', async () => {\n      request(server)\n        .get('/api/v1/threshold-settings')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .end((err, res) => {\n          if (err) {\n            console.log(err);\n            throw err;\n          }\n          const { text } = res.toJSON();\n          const replyBody = JSON.parse(text);\n          const expected = {\n            customSettings: {\n              kava: {\n                lastBlockTime: {\n                  critical: 60,\n                  warning: 30,\n                },\n                peerCounts: {\n                  critical: 10,\n                  warning: 5,\n                },\n              },\n            },\n            defaultSettings: {\n              lastBlockTime: {\n                critical: 20,\n                warning: 10,\n              },\n              missedBlocks: {\n                critical: 2,\n                warning: 1,\n              },\n              peerCounts: {\n                critical: 2,\n                warning: 1,\n              },\n            },\n          };\n          assert.deepEqual(replyBody, expected);\n        });\n    });\n    it('should get validator addresses settings', async () => {\n      request(server)\n        .get('/api/v1/validator-addresses')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .end((err, res) => {\n          if (err) throw err;\n          const { text } = res.toJSON();\n          const replyBody = JSON.parse(text);\n          const expected = [{\n            project: 'bcl-commit-hub',\n            network: 'unknown',\n            validators:\n              [{\n                name: 'StakeWithUs',\n                address: 'EA741AD0F8A3B579781243D15A79E99B51F3B60E',\n              }],\n          }];\n          assert.deepEqual(replyBody, expected);\n        });\n    });\n  });\n  describe('# Oracle Controller', () => {\n    process.env.TERRA_LCD = '127.0.0.1:1321';\n    process.env.TERRA_ORACLE_VALIDATOR_ADDRESS = 'terravaloper1emscfpz9jjtj8tj2nh70y25uywcakldsj76luz';\n    it('should get oracle status', async () => {\n      request(server)\n        .get('/api/v1/terra/oracle/status')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .end((err, res) => {\n          if (err) throw err;\n          const expected = { misses: '10', uptime: 83.33, blockHeight: '500' };\n          assert.deepEqual(res.body, expected);\n        });\n    });\n    it('should get oracle health check', async () => {\n      request(server)\n        .get('/api/v1/terra/oracle/health-checks')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .end((err, res) => {\n          if (err) throw err;\n          const expected = [\n            {\n              name: 'Terra-LCD-Backend',\n              notes: '',\n              project: 'terra',\n              status: 'critical',\n            },\n            {\n              name: 'Terra-Oracle-Backend',\n              notes: '',\n              project: 'terra',\n              status: 'passing',\n            }];\n          assert.deepEqual(res.body, expected);\n        });\n    });\n  });\n});\n"]}