{"version":3,"sources":["../../../src/server/controllers/dashboard.js"],"names":["getCpuUsageMetrics","res","query","capture","args","start","get","end","step","data","ret","writeHead","write","getMemoryUsageMetrics","getDiskUsageMetrics","getNetworkIOMetrics","all"],"mappings":"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","file":"dashboard.js","sourcesContent":["import prometheusRequest from '../../plugins/prometheus-client/query';\n\nconst getCpuUsageMetrics = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  const start = query.get('start');\n  const end = query.get('end');\n  const step = query.get('step');\n  const data = await prometheusRequest({\n    query: '100 - (avg by (instance) (irate(node_cpu_seconds_total{job=\"node\",mode=\"idle\"}[5m])) * 100)',\n    start,\n    end,\n    step,\n  });\n  const ret = data;\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify(ret));\n  return res;\n};\n\nconst getMemoryUsageMetrics = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  const start = query.get('start');\n  const end = query.get('end');\n  const step = query.get('step');\n  const data = await prometheusRequest({\n    query: '100 * (1 - ((avg_over_time(node_memory_MemFree_bytes[5m]) + avg_over_time(node_memory_Cached_bytes[5m]) + avg_over_time(node_memory_Buffers_bytes[5m])) / avg_over_time(node_memory_MemTotal_bytes[5m])))',\n    start,\n    end,\n    step,\n  });\n  const ret = data;\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify(ret));\n  return res;\n};\n\nconst getDiskUsageMetrics = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  const start = query.get('start');\n  const end = query.get('end');\n  const step = query.get('step');\n  const data = await prometheusRequest({\n    query: '100 - ((node_filesystem_avail_bytes{mountpoint=\"/\",fstype!=\"rootfs\"} * 100) / node_filesystem_size_bytes{mountpoint=\"/\",fstype!=\"rootfs\"})',\n    start,\n    end,\n    step,\n  });\n  const ret = data;\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify(ret));\n  return res;\n};\n\nconst getNetworkIOMetrics = ({\n  query,\n  capture,\n}, res) => async (args) => {\n  const start = query.get('start');\n  const end = query.get('end');\n  const step = query.get('step');\n  const data = await Promise.all([\n    prometheusRequest({\n      query: 'irate(node_network_receive_bytes_total[5m])/1024/1024',\n      start,\n      end,\n      step,\n    }),\n    prometheusRequest({\n      query: 'irate(node_network_transmit_bytes_total[5m])/1024/1024',\n      start,\n      end,\n      step,\n    }),\n  ]);\n  const ret = data;\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify(ret));\n  return res;\n};\n\nexport default {\n  getCpuUsageMetrics,\n  getMemoryUsageMetrics,\n  getDiskUsageMetrics,\n  getNetworkIOMetrics,\n};\n"]}