{"version":3,"sources":["../../../src/server/controllers/slack.js"],"names":["logger","child","module","validateToken","rawBody","headers","slackSignature","githubSecret","process","env","SLACK_SECRET_TOKEN","timestamp","hashReq","hash","crypto","createHmac","update","digest","validateTimestamp","time","Math","floor","Date","getTime","abs","parseRequest","requestArr","split","request","reduce","acc","data","key","value","generateTableData","tableData","body","unshift","header","generateResponse","text","error","result","response_type","attachments","reply","res","writeHead","write","handleHealthCommand","args","health","showRawData","healthText","params","trim","project","serviceName","healthNodeService","service","output","healthNodeServiceText","healthService","healthServiceText","e","toString","getTableBody","region","projectName","networkName","blockHeight","blockTime","catchingUp","peersTotal","peersInbound","peersOutbound","handleStatusCommand","tableHeader","network","StatusController","filterProjectByRegion","tableBody","map","r","projectStatusText","getAllProjectStatus","row","push","statusText","handle","req","command","includes"],"mappings":"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","file":"slack.js","sourcesContent":["import pino from 'pino';\nimport crypto from 'crypto';\nimport table from 'markdown-table';\nimport healthCmd from '../../health';\nimport StatusController from './status';\n\nconst logger = pino().child({ module: 'controllers/slack' });\n\nconst validateToken = ({ rawBody, headers }) => {\n  const slackSignature = headers['X-Slack-Signature'] || headers['x-slack-signature'];\n  const githubSecret = process.env.SLACK_SECRET_TOKEN;\n  const timestamp = headers['X-Slack-Request-Timestamp'] || headers['x-slack-request-timestamp'];\n  const hashReq = `v0:${timestamp}:${rawBody}`;\n  const hash = `v0=${crypto.createHmac('sha256', githubSecret).update(hashReq).digest('hex')}`;\n  return slackSignature === hash;\n};\n\nconst validateTimestamp = ({ headers }) => {\n  const timestamp = headers['X-Slack-Request-Timestamp'] || headers['x-slack-request-timestamp'];\n  const time = Math.floor(new Date().getTime() / 1000);\n  if (Math.abs(time - timestamp) > 300) {\n    return false;\n  }\n  return true;\n};\n\nconst parseRequest = ({ rawBody }) => {\n  const requestArr = rawBody.split('&');\n  const request = requestArr.reduce((acc, data) => {\n    const [key, value] = data.split('=');\n    acc[key] = value;\n    return acc;\n  }, {});\n  return request;\n};\n\nconst generateTableData = (data) => {\n  const tableData = Object.assign(data.body);\n  tableData.unshift(data.header);\n  return table(tableData);\n};\n\nconst generateResponse = (text, error) => {\n  const result = {\n    response_type: 'in_channel',\n    text: `\\`\\`\\`${text}\\`\\`\\``,\n  };\n  if (error) {\n    result.attachments = [\n      {\n        text: error,\n      },\n    ];\n  }\n  return result;\n};\n\nconst reply = (res, result) => {\n  res.writeHead(200, { 'content-type': 'application/json' });\n  res.write(JSON.stringify(result));\n  return res;\n};\n\nconst handleHealthCommand = async (args, request, res) => {\n  try {\n    if (!request.text) {\n      const health = await healthCmd({ ...args, showRawData: true });\n      const healthText = generateTableData(health);\n      return reply(res, generateResponse(healthText));\n    }\n    const params = request.text.trim(' ');\n    const [project, serviceName] = params.split('+');\n    if (project && serviceName) {\n      const healthNodeService = await healthCmd({\n        ...args, service: project, output: serviceName,\n      });\n      const healthNodeServiceText = generateTableData(healthNodeService);\n      return reply(res, generateResponse(healthNodeServiceText));\n    }\n    const healthService = await healthCmd({ ...args, service: project });\n    const healthServiceText = generateTableData(healthService);\n    return reply(res, generateResponse(healthServiceText));\n  } catch (e) {\n    logger.error('handleHealthCommand', e && e.toString());\n    return reply(res, generateResponse('Some error occurred', e && e.toString()));\n  }\n};\n\nconst getTableBody = (data) => {\n  if (data.region) {\n    return [\n      data.projectName,\n      data.networkName,\n      data.region,\n      data.blockHeight,\n      data.blockTime,\n      data.catchingUp,\n      data.peersTotal,\n      data.peersInbound,\n      data.peersOutbound,\n    ];\n  }\n  return [\n    data.projectName,\n    data.networkName,\n    data.blockHeight,\n    data.blockTime,\n    data.catchingUp,\n    data.peersTotal,\n    data.peersInbound,\n    data.peersOutbound,\n  ];\n};\n\nconst handleStatusCommand = async (args, request, res) => {\n  try {\n    if (request.text) {\n      const tableHeader = ['Project', 'Network', 'Region', 'BlockHeight', 'BlockTime', 'CatchingUp', 'Peers Total',\n        'Inbound', 'Outbound'];\n      const [project, network, region] = request.text.split('+');\n      if (!project) {\n        return reply(res, generateResponse('Invalid command'));\n      }\n      const result = await StatusController.filterProjectByRegion(args)(project, network, region);\n      if (!result) {\n        return reply(res, generateResponse('Not found'));\n      }\n      const tableBody = result.map((r) => getTableBody(r));\n      const projectStatusText = generateTableData({\n        header: tableHeader,\n        body: tableBody,\n      });\n      return reply(res, generateResponse(projectStatusText));\n    }\n    const tableHeader = ['Project', 'Network', 'BlockHeight', 'BlockTime', 'CatchingUp', 'Peers Total',\n      'Inbound', 'Outbound'];\n    const result = await StatusController.getAllProjectStatus(args);\n    const tableBody = result.reduce((acc, row) => {\n      acc.push(getTableBody(row));\n      return acc;\n    }, []);\n    const statusText = generateTableData({\n      header: tableHeader,\n      body: tableBody,\n    });\n    return reply(res, generateResponse(statusText));\n  } catch (e) {\n    logger.error('handleStatusCommand', e && e.toString());\n    return reply(res, generateResponse('Some error occurred', e && e.toString()));\n  }\n};\n\nconst handle = (req, res) => async (args) => {\n  if (!validateToken(req) || !validateTimestamp(req)) {\n    res.writeHead(401);\n    res.write('Invalid request!');\n    return res;\n  }\n  const request = parseRequest(req);\n  if (request.command.includes('health')) {\n    return handleHealthCommand(args, request, res);\n  } if (request.command.includes('status')) {\n    return handleStatusCommand(args, request, res);\n  }\n  res.writeHead(401);\n  return res.write('Invalid request!');\n};\n\nexport default {\n  handle,\n};\n"]}