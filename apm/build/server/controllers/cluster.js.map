{"version":3,"sources":["../../../src/server/controllers/cluster.js"],"names":["get","req","res","nodeIp","node","nomadPort","consulPort","production","prodConfigFile","Core","getNodeInfos","nodeList","result","map","nodeInfo","name","nodeName","id","nodeId","address","nodeAddress","meta","nodeMeta","region","nodeRegion","services","nodeServiceList","filter","service","includes","nodeServices","ID","Service","tags","Tags","port","Port","Address","checks","nodeCheckList","check","nodeChecks","checkId","CheckID","status","Status","notes","Notes","output","Output","serviceId","ServiceID","serviceName","ServiceName","write"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,MAAM,SAANA,GAAM,CAACC,GAAD,EAAMC,GAAN;AAAA,SAAc,sBAEpB;AAAA,QADEC,MACF,QADJC,IACI;AAAA,QADUC,SACV,QADUA,SACV;AAAA,QADqBC,UACrB,QADqBA,UACrB;AAAA,QADiCC,UACjC,QADiCA,UACjC;AAAA,QAD6CC,cAC7C,QAD6CA,cAC7C;;AAAA,gBACiB,MAAMC,eAAKC,YAAL,CAAkB;AAC3CP,oBAD2C,EACnCE,oBADmC,EACxBC,sBADwB,EACZC,sBADY,EACAC;AADA,KAAlB,CADvB;AAAA,QACIG,QADJ,SACIA,QADJ;;AAIJ,QAAMC,SAASD,SAASE,GAAT,CAAa,UAACT,IAAD,EAAU;AACpC,UAAMU,WAAW;AACfC,cAAMX,KAAKY,QADI;AAEfC,YAAIb,KAAKc,MAFM;AAGfC,iBAASf,KAAKgB,WAHC;AAIfC,cAAMjB,KAAKkB,QAJI;AAKfC,gBAAQnB,KAAKoB;AALE,OAAjB;AAOA,UAAMC,WAAWrB,KAAKsB,eAAL,CACdC,MADc,CACP,UAACC,OAAD;AAAA,eAAaA,QAAQC,QAAR,CAAiB,MAAjB,CAAb;AAAA,OADO,EAEdhB,GAFc,CAEV,UAACe,OAAD;AAAA,eAAaxB,KAAK0B,YAAL,CAAkBF,OAAlB,CAAb;AAAA,OAFU,EAGdf,GAHc,CAGV,UAACe,OAAD;AAAA,eAAc;AACjBX,cAAIW,QAAQG,EADK;AAEjBhB,gBAAMa,QAAQI,OAFG;AAGjBC,gBAAML,QAAQM,IAHG;AAIjBC,gBAAMP,QAAQQ,IAJG;AAKjBjB,mBAASS,QAAQS;AALA,SAAd;AAAA,OAHU,CAAjB;AAUA,UAAMC,SAASlC,KAAKmC,aAAL,CACZZ,MADY,CACL,UAACa,KAAD;AAAA,eAAWA,MAAMX,QAAN,CAAe,MAAf,CAAX;AAAA,OADK,EAEZhB,GAFY,CAER,UAAC2B,KAAD;AAAA,eAAWpC,KAAKqC,UAAL,CAAgBD,KAAhB,CAAX;AAAA,OAFQ,EAGZ3B,GAHY,CAGR,UAAC2B,KAAD;AAAA,eAAY;AACfE,mBAASF,MAAMG,OADA;AAEfC,kBAAQJ,MAAMK,MAFC;AAGfC,iBAAON,MAAMO,KAHE;AAIfC,kBAAQR,MAAMS,MAJC;AAKfC,qBAAWV,MAAMW,SALF;AAMfC,uBAAaZ,MAAMa;AANJ,SAAZ;AAAA,OAHQ,CAAf;AAWA,wCACKvC,QADL;AAEEW,0BAFF;AAGEa;AAHF;AAKD,KAlCc,CAAf;AAmCApC,QAAIoD,KAAJ,CAAU,yBAAe1C,MAAf,CAAV;AACA,WAAOV,GAAP;AACD,GA3CW;AAAA,CAAZ;;kBA6Ce;AACbF;AADa,C","file":"cluster.js","sourcesContent":["import Core from '../../core';\n\nconst get = (req, res) => async ({\n  node: nodeIp, nomadPort, consulPort, production, prodConfigFile,\n}) => {\n  const { nodeList } = await Core.getNodeInfos({\n    nodeIp, nomadPort, consulPort, production, prodConfigFile,\n  });\n  const result = nodeList.map((node) => {\n    const nodeInfo = {\n      name: node.nodeName,\n      id: node.nodeId,\n      address: node.nodeAddress,\n      meta: node.nodeMeta,\n      region: node.nodeRegion,\n    };\n    const services = node.nodeServiceList\n      .filter((service) => service.includes('bcl-'))\n      .map((service) => node.nodeServices[service])\n      .map((service) => ({\n        id: service.ID,\n        name: service.Service,\n        tags: service.Tags,\n        port: service.Port,\n        address: service.Address,\n      }));\n    const checks = node.nodeCheckList\n      .filter((check) => check.includes('bcl-'))\n      .map((check) => node.nodeChecks[check])\n      .map((check) => ({\n        checkId: check.CheckID,\n        status: check.Status,\n        notes: check.Notes,\n        output: check.Output,\n        serviceId: check.ServiceID,\n        serviceName: check.ServiceName,\n      }));\n    return {\n      ...nodeInfo,\n      services,\n      checks,\n    };\n  });\n  res.write(JSON.stringify(result));\n  return res;\n};\n\nexport default {\n  get,\n};\n"]}