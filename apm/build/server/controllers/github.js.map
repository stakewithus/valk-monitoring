{"version":3,"sources":["../../../src/server/controllers/github.js"],"names":["logger","child","module","validateToken","rawBody","headers","token","githubSecret","process","env","GITHUB_SECRET_TOKEN","hash","crypto","createHmac","update","digest","validateEvent","event","validateBranch","body","ref","includes","GITHUB_BRANCH","runCommand","execute","command","resolve","reject","bash","ChildProcess","spawn","shell","result","stdout","on","data","toString","console","log","stderr","code","getCommands","githubUrl","rawAbsolutePath","absolutePath","replace","protocol","split","url","urlWithAuth","GITHUB_TOKEN","fetchSourceCodeCommand","configDir","fetch","remove","handle","req","res","node","writeHead","write","repository","commands","e","error"],"mappings":"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","file":"github.js","sourcesContent":["import pino from 'pino';\nimport crypto from 'crypto';\nimport ChildProcess from 'child_process';\nimport SyncCommand from '../../sync2';\n\nconst logger = pino().child({ module: 'controllers/github' });\n\nconst validateToken = ({ rawBody, headers }) => {\n  const token = headers['X-Hub-Signature'] || headers['x-hub-signature'];\n  const githubSecret = process.env.GITHUB_SECRET_TOKEN;\n  const hash = `sha1=${crypto.createHmac('sha1', githubSecret).update(rawBody).digest('hex')}`;\n  return token === hash;\n};\n\nconst validateEvent = ({ headers }) => {\n  const event = headers['X-Github-Event'] || headers['x-github-event'];\n  return event === 'push';\n};\n\nconst validateBranch = ({ body }) => body.ref.includes(process.env.GITHUB_BRANCH);\n\nconst runCommand = async function execute(command) {\n  return new Promise((resolve, reject) => {\n    const bash = ChildProcess.spawn(command, {\n      shell: true,\n    });\n    let result = '';\n    bash.stdout.on('data', (data) => {\n      result += data.toString();\n      console.log(`stdout: ${data.toString()}`);\n    });\n\n    bash.stderr.on('data', (data) => {\n      console.log(`stderr: ${data.toString()}`);\n    });\n\n    bash.on('exit', (code) => {\n      console.log(`child process exited with code ${code.toString()}`);\n      if (code === 0) {\n        resolve(result);\n      } else {\n        reject();\n      }\n    });\n  });\n};\n\nconst getCommands = async (githubUrl) => {\n  const rawAbsolutePath = await runCommand('pwd');\n  const absolutePath = rawAbsolutePath.replace(/\\r?\\n|\\r/g, '');\n  const protocol = 'https://';\n  const [, url] = githubUrl.split(protocol);\n  const urlWithAuth = `${protocol}${process.env.GITHUB_TOKEN}@${url}`;\n  const fetchSourceCodeCommand = `mkdir ${absolutePath}/source-code-tmp && git clone --single-branch --branch ${process.env.GITHUB_BRANCH} ${urlWithAuth} ${absolutePath}/source-code-tmp`;\n  return {\n    configDir: `${absolutePath}/source-code-tmp/config`,\n    fetch: fetchSourceCodeCommand,\n    remove: `rm -rf ${absolutePath}/source-code-tmp`,\n  };\n};\n\nconst handle = (req, res) => async ({ node }) => {\n  if (!validateToken(req) || !validateEvent(req) || !validateBranch(req)) {\n    res.writeHead(401);\n    res.write('Invalid request!');\n    return res;\n  }\n  if (!req.body || !req.body.repository || !req.body.repository.url) {\n    res.writeHead(400);\n    res.writeHead('Invalid request payload');\n    return res;\n  }\n  const commands = await getCommands(req.body.repository.url);\n  try {\n    await runCommand(commands.remove);\n    await runCommand(commands.fetch);\n    await SyncCommand(node, 4646, 8500, commands.configDir, {});\n  } catch (e) {\n    logger.error('Github handle error', e && e.toString());\n  }\n  res.write('ok');\n  return res;\n};\n\nexport default {\n  handle,\n  getCommands,\n  runCommand,\n};\n"]}