{"version":3,"sources":["../../../../src/server/controllers/terra/index.js"],"names":["getStatus","req","res","Backend","missesData","TerraService","getMissingVote","votingPeriod","Math","floor","height","uptime","Terra","getUptimePercentage","writeHead","write","blockHeight","misses","result","getHealthChecks","getMissesChart","limit","from","query","get","to","fromBlock","Number","toBlock","BLOCKS","missesByBlockHeight","ret","length","lastBlockHeight","lastTotalMisses","push","x","y","slice","forEach","val","idx","getExchangeRateCharts","denom","name","data","map","amount","swu_amount"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAMC,GAAN;AAAA,SAAc,sBAAuB;AAAA,QAAdC,OAAc,QAAdA,OAAc;;AACrD,QAAMC,aAAa,MAAMC,kBAAaC,cAAb,EAAzB;AACA,QAAMC,eAAeC,KAAKC,KAAL,CAAW,CAACL,WAAWM,MAAZ,GAAqB,CAAhC,CAArB;AACA,QAAMC,SAAS,MAAMC,gBAAMC,mBAAN,CAA0BV,OAA1B,EAAmCI,YAAnC,CAArB;AACAL,QAAIY,SAAJ,CAAc,GAAd,EAAmB;AACjB,sBAAgB;AADC,KAAnB;AAGAZ,QAAIa,KAAJ,CAAU,yBAAe;AACvBC,mBAAaZ,WAAWM,MADD;AAEvBO,cAAQb,WAAWc,MAFI;AAGvBP;AAHuB,KAAf,CAAV;AAKA,WAAOT,GAAP;AACD,GAbiB;AAAA,CAAlB;;AAeA,IAAMiB,kBAAkB,SAAlBA,eAAkB,CAAClB,GAAD,EAAMC,GAAN;AAAA,SAAc,uBAAuB;AAAA,QAAdC,OAAc,SAAdA,OAAc;;AAC3D,QAAMe,SAAS,MAAMN,gBAAMO,eAAN,CAAsBhB,OAAtB,CAArB;AACAD,QAAIY,SAAJ,CAAc,GAAd,EAAmB;AACjB,sBAAgB;AADC,KAAnB;AAGAZ,QAAIa,KAAJ,CAAU,yBAAeG,MAAf,CAAV;AACA,WAAOhB,GAAP;AACD,GAPuB;AAAA,CAAxB;;AASA,IAAMkB,iBAAiB,SAAjBA,cAAiB,CAACnB,GAAD,EAAMC,GAAN;AAAA,SAAc,uBAAe;AAAA;;AAClD,QAAMmB,QAAQ,IAAd;AACA,QAAMC,OAAO,CAACrB,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,MAAd,KAAyB,CAA1B,IAA+B,GAA5C;AACA,QAAMC,KAAK,CAACxB,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,IAAd,KAAuB,CAAxB,IAA6B,GAAxC;AACA,QAAME,YAAYC,OAAO1B,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,YAAd,CAAP,CAAlB;AACA,QAAMI,UAAUD,OAAO1B,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,UAAd,CAAP,CAAhB;AACA,QAAMK,SAASF,OAAO1B,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,QAAd,CAAP,KAAmC,EAAlD;AACA,QAAMM,sBAAsB,MAAM,uCAAqB;AACrDR,gBADqD,EAC/CG,MAD+C,EAC3CC,oBAD2C,EAChCE,gBADgC,EACvBP;AADuB,KAArB,CAAlC;AAGA,QAAMU,MAAM,EAAZ;AACA,QAAID,oBAAoBE,MAApB,GAA6B,CAAjC,EAAoC;AAClC,UAAIC,kBAAkBH,oBAAoB,CAApB,EAAuBpB,MAA7C;AACA,UAAIwB,kBAAkBJ,oBAAoB,CAApB,EAAuBb,MAA7C;AACAc,UAAII,IAAJ,CAAS;AACPC,WAAGH,eADI;AAEPI,WAAG;AAFI,OAAT;AAIAP,0BAAoBQ,KAApB,CAA0B,CAA1B,EAA6BC,OAA7B,CAAqC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjD,YAAIR,kBAAkBJ,MAAlB,IAA4BW,IAAI9B,MAAhC,IAA0CoB,oBAAoBE,MAApB,GAA6B,CAA7B,KAAmCS,GAAjF,EAAsF;AACpFV,cAAII,IAAJ,CAAS;AACPC,eAAGI,IAAI9B,MADA;AAEP2B,eAAGG,IAAIvB,MAAJ,GAAaiB;AAFT,WAAT;AAIAD,4BAAkBO,IAAI9B,MAAtB;AACAwB,4BAAkBM,IAAIvB,MAAtB;AACD;AACF,OATD;AAUD;AACDf,QAAIa,KAAJ,CAAU,yBAAegB,GAAf,CAAV;AACA,WAAO7B,GAAP;AACD,GA/BsB;AAAA,CAAvB;;AAiCA,IAAMwC,wBAAwB,SAAxBA,qBAAwB,CAACzC,GAAD,EAAMC,GAAN;AAAA,SAAc,uBAAe;AAAA;;AACzD,QAAMmB,QAAQ,EAAd;AACA,QAAMC,OAAO,CAACrB,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,MAAd,KAAyB,CAA1B,IAA+B,GAA5C;AACA,QAAMC,KAAK,CAACxB,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,IAAd,KAAuB,CAAxB,IAA6B,GAAxC;AACA,QAAME,YAAYC,OAAO1B,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,YAAd,CAAP,CAAlB;AACA,QAAMI,UAAUD,OAAO1B,IAAIsB,KAAJ,CAAUC,GAAV,CAAc,UAAd,CAAP,CAAhB;AACA,QAAMO,MAAM,MAAM,8CAA4B;AAC5CT,gBAD4C,EACtCG,MADsC,EAClCC,oBADkC,EACvBE,gBADuB,EACdP;AADc,KAA5B,CAAlB;AAGA,SAAK,IAAMsB,KAAX,IAAoBZ,GAApB,EAAyB;AACvBA,UAAIY,KAAJ,IAAa,CAAC;AACZC,cAAM,GADM;AAEZC,cAAMd,IAAIY,KAAJ,EAAWG,GAAX,CAAe,UAACN,GAAD;AAAA,iBAAU;AAC7BJ,eAAGI,IAAI9B,MADsB;AAE7B2B,eAAGG,IAAIO;AAFsB,WAAV;AAAA,SAAf;AAFM,OAAD,EAMV;AACDH,cAAM,KADL;AAEDC,cAAMd,IAAIY,KAAJ,EAAWG,GAAX,CAAe,UAACN,GAAD;AAAA,iBAAU;AAC7BJ,eAAGI,IAAI9B,MADsB;AAE7B2B,eAAGG,IAAIQ;AAFsB,WAAV;AAAA,SAAf;AAFL,OANU,CAAb;AAaD;AACD9C,QAAIa,KAAJ,CAAU,yBAAegB,GAAf,CAAV;AACA,WAAO7B,GAAP;AACD,GA1B6B;AAAA,CAA9B;;kBA4Be;AACbF,sBADa;AAEbmB,kCAFa;AAGbC,gCAHa;AAIbsB;AAJa,C","file":"index.js","sourcesContent":["import TerraService from '../../../monit/terra/service';\nimport Terra from '../../../monit/terra';\nimport { getTerraOracleMisses, getTerraOracleExchangeRates } from '../../../monit/influx-store';\n\nconst getStatus = (req, res) => async ({ Backend }) => {\n  const missesData = await TerraService.getMissingVote();\n  const votingPeriod = Math.floor(+missesData.height / 5);\n  const uptime = await Terra.getUptimePercentage(Backend)(votingPeriod);\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify({\n    blockHeight: missesData.height,\n    misses: missesData.result,\n    uptime,\n  }));\n  return res;\n};\n\nconst getHealthChecks = (req, res) => async ({ Backend }) => {\n  const result = await Terra.getHealthChecks(Backend);\n  res.writeHead(200, {\n    'content-type': 'application/json',\n  });\n  res.write(JSON.stringify(result));\n  return res;\n};\n\nconst getMissesChart = (req, res) => async ({ }) => {\n  const limit = 2500;\n  const from = (req.query.get('from') || 0) * 1e6;\n  const to = (req.query.get('to') || 0) * 1e6;\n  const fromBlock = Number(req.query.get('from_block'));\n  const toBlock = Number(req.query.get('to_block'));\n  const BLOCKS = Number(req.query.get('blocks')) || 50;\n  const missesByBlockHeight = await getTerraOracleMisses({\n    from, to, fromBlock, toBlock, limit,\n  });\n  const ret = [];\n  if (missesByBlockHeight.length > 0) {\n    let lastBlockHeight = missesByBlockHeight[0].height;\n    let lastTotalMisses = missesByBlockHeight[0].misses;\n    ret.push({\n      x: lastBlockHeight,\n      y: 0,\n    });\n    missesByBlockHeight.slice(1).forEach((val, idx) => {\n      if (lastBlockHeight + BLOCKS <= val.height || missesByBlockHeight.length - 2 === idx) {\n        ret.push({\n          x: val.height,\n          y: val.misses - lastTotalMisses,\n        });\n        lastBlockHeight = val.height;\n        lastTotalMisses = val.misses;\n      }\n    });\n  }\n  res.write(JSON.stringify(ret));\n  return res;\n};\n\nconst getExchangeRateCharts = (req, res) => async ({ }) => {\n  const limit = 50;\n  const from = (req.query.get('from') || 0) * 1e6;\n  const to = (req.query.get('to') || 0) * 1e6;\n  const fromBlock = Number(req.query.get('from_block'));\n  const toBlock = Number(req.query.get('to_block'));\n  const ret = await getTerraOracleExchangeRates({\n    from, to, fromBlock, toBlock, limit,\n  });\n  for (const denom in ret) {\n    ret[denom] = [{\n      name: '_',\n      data: ret[denom].map((val) => ({\n        x: val.height,\n        y: val.amount,\n      })),\n    }, {\n      name: 'swu',\n      data: ret[denom].map((val) => ({\n        x: val.height,\n        y: val.swu_amount,\n      })),\n    }];\n  }\n  res.write(JSON.stringify(ret));\n  return res;\n};\n\nexport default {\n  getStatus,\n  getHealthChecks,\n  getMissesChart,\n  getExchangeRateCharts,\n};\n"]}