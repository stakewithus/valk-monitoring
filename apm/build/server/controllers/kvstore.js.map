{"version":3,"sources":["../../../src/server/controllers/kvstore.js"],"names":["getKVStoreValueByKey","rawData","reduce","acc","data","value","Buffer","from","Value","toString","Key","generateBroadcastData","kvStoreData","validatorSettings","keys","projectAndNetworkList","StatusController","getProjectAndNetworkList","keyTypes","Constant","KV_STORE_KEY_TYPES","GLOBAL_STATUS_BLOCK_HEIGHT","GLOBAL_STATUS_BLOCK_TIME","GLOBAL_STATUS_PEERS_INBOUND","GLOBAL_STATUS_PEERS_OUTBOUND","GLOBAL_STATUS_PEERS_TOTAL","GLOBAL_STATUS_CATCHING_UP","all","map","row","validatorAddresses","Util","getValidatorAddress","project","network","metaData","projectName","networkName","keyType","KVStore","generateConsulKey","type","blockHeight","blockTime","peersInbound","peersOutbound","peersTotal","catchingUp","blockCommits","minimumBlock","Math","max","v","commits","i","push","GLOBAL_COMMIT_BY_BLOCK_HEIGHT","validatorAddress","address","name","values","filter","c","watch","req","res","wss","Backend","prodConfigFile","body","length","KVStoreData","getValidatorAddressSettings","formattedData","WebSocket","broadcast","write","listNodes","nodes","kv","getValue","Config","mutedNodesKey","writeHead","updateNodes","query","upsert","get","e","composeDefaultSettings","updatingSettings","savedStr","s","str","warning","critical","composeCustomSettings","proj","acc2","setting","str2","updateThresholdSettings","updateDefaultSettings","defaultSettings","updateCustomSettings","customSettings","validTypes","thresholdLimits","validProjects","areSettingsValid","every","includes","areCustomSettingsValid","getProjectName","defaultSettingsStr","customSettingsStr","thresholdDefaultSettingsKey","thresholdCustomSettingsKey","default","custom","getThresholdSettings","production","settings","getValidatorAddresses","validatorAddressess","console","log","addNewChecks","nodeList","serverConfig","validator","getProjectNameSimple","deregisteredRegions","deRegisterServices","node","projects","some","p","region","nodeRegion","svcName","getServiceName","checkPayload","Name","getMissedBlockName","ID","getMissedBlockCheckId","Notes","TTL","ServiceID","Status","agent","check","register","removeChecks","checkId","destroy","updateValidatorAddressKVStore","validatorStr","validatorAddressesPrefix","updateValidatorAddress","nodeIp","nomadPort","consulPort","isPayloadValid","doesValidatorExist","find","newValidatorAddress","concat","Core","getNodeInfos","validators","removeValidatorAddress","matchValidatorIndex","findIndex","splice"],"mappings":"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","file":"kvstore.js","sourcesContent":["import WebSocket from '../websocket';\nimport StatusController from './status';\nimport Constant from '../../monit/constant';\nimport KVStore from '../../monit/kv-store';\nimport Config from '../../config';\nimport Util from '../../common/util';\nimport Core from '../../core';\n\nconst getKVStoreValueByKey = (rawData) => rawData.reduce((acc, data) => {\n  const value = Buffer.from(data.Value, 'base64').toString('utf-8');\n  acc[data.Key] = value;\n  return acc;\n}, {});\n\nconst generateBroadcastData = async (kvStoreData, validatorSettings) => {\n  const keys = Object.keys(kvStoreData);\n  const projectAndNetworkList = StatusController.getProjectAndNetworkList(keys);\n  const keyTypes = [\n    Constant.KV_STORE_KEY_TYPES.GLOBAL_STATUS_BLOCK_HEIGHT,\n    Constant.KV_STORE_KEY_TYPES.GLOBAL_STATUS_BLOCK_TIME,\n    Constant.KV_STORE_KEY_TYPES.GLOBAL_STATUS_PEERS_INBOUND,\n    Constant.KV_STORE_KEY_TYPES.GLOBAL_STATUS_PEERS_OUTBOUND,\n    Constant.KV_STORE_KEY_TYPES.GLOBAL_STATUS_PEERS_TOTAL,\n    Constant.KV_STORE_KEY_TYPES.GLOBAL_STATUS_CATCHING_UP,\n  ];\n  return Promise.all(projectAndNetworkList.map(async (row) => {\n    const validatorAddresses = await Util.getValidatorAddress(validatorSettings,\n      row.project, row.network);\n    const metaData = { projectName: row.project, networkName: row.network };\n    const [blockHeight, blockTime, peersInbound, peersOutbound, peersTotal, catchingUp] = keyTypes\n      .map((keyType) => kvStoreData[KVStore.generateConsulKey({ type: keyType, metaData })]);\n    let blockCommits = [];\n    if (blockHeight > 1) {\n      const minimumBlock = Math.max(blockHeight - 50, 1);\n      blockCommits = validatorAddresses.map((v) => {\n        const commits = [];\n        for (let i = blockHeight - 1; i >= minimumBlock; i -= 1) {\n          commits.push(kvStoreData[KVStore.generateConsulKey({\n            type: Constant.KV_STORE_KEY_TYPES.GLOBAL_COMMIT_BY_BLOCK_HEIGHT,\n            blockHeight: i,\n            metaData: { ...metaData, validatorAddress: v.address },\n          })]);\n        }\n        return {\n          name: v.name,\n          values: commits.filter((c) => c).map((value) => !!+value),\n        };\n      });\n    }\n    return {\n      ...metaData,\n      catchingUp: !!+catchingUp,\n      blockTime,\n      blockHeight,\n      peersInbound,\n      peersOutbound,\n      peersTotal,\n      commits: blockCommits,\n    };\n  }));\n};\n\nconst watch = (req, res) => async ({ wss, Backend, prodConfigFile }) => {\n  if (!req.body || req.body.length === 0) {\n    return res;\n  }\n  const KVStoreData = getKVStoreValueByKey(req.body);\n  const validatorSettings = await KVStore.getValidatorAddressSettings(Backend)(prodConfigFile);\n  const formattedData = await generateBroadcastData(KVStoreData, validatorSettings);\n  WebSocket.broadcast(wss)('GLOBAL_STATUS_UPDATE', formattedData);\n  res.write('ok');\n  return res;\n};\n\nconst listNodes = (req, res) => async ({ Backend }) => {\n  const nodes = await Backend.kv.getValue(Config.mutedNodesKey) || '';\n  res.writeHead(200, { 'content-type': 'application/json' });\n  res.write(nodes);\n  return res;\n};\n\nconst updateNodes = ({ query }, res) => async ({ Backend }) => {\n  try {\n    await Backend.kv.upsert(Config.mutedNodesKey, query.get('nodes'));\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write(query.get('nodes'));\n    return res;\n  } catch (e) {\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst composeDefaultSettings = (updatingSettings) => {\n  const savedStr = Object.keys(updatingSettings).reduce((acc, s) => {\n    const str = `${s}:${updatingSettings[s].warning}:${updatingSettings[s].critical}`;\n    if (acc) {\n      return `${acc},${str}`;\n    }\n    return str;\n  }, '');\n  return savedStr;\n};\n\nconst composeCustomSettings = (updatingSettings) => {\n  const savedStr = Object.keys(updatingSettings).reduce((acc, proj) => {\n    const str = Object.keys(updatingSettings[proj]).reduce((acc2, s) => {\n      const setting = updatingSettings[proj][s];\n      const str2 = `${proj}:${s}:${setting.warning}:${setting.critical}`;\n      if (acc2) {\n        return `${acc2},${str2}`;\n      }\n      return str2;\n    }, '');\n    if (acc) {\n      return `${acc},${str}`;\n    }\n    return str;\n  }, '');\n  return savedStr;\n};\n\nconst updateThresholdSettings = ({ body }, res) => async ({\n  Backend, prodConfigFile,\n}) => {\n  try {\n    const validatorAddresses = await KVStore\n      .getValidatorAddressSettings(Backend)(prodConfigFile);\n    const { defaultSettings: updateDefaultSettings, customSettings: updateCustomSettings } = body;\n    const validTypes = Object.keys(Config.thresholdLimits);\n    const validProjects = validatorAddresses.map((v) => v.project);\n    const areSettingsValid = updateDefaultSettings && Object.keys(updateDefaultSettings)\n      .every((s) => validTypes.includes(s)\n        && +updateDefaultSettings[s].warning > 0\n        && +updateDefaultSettings[s].critical > 0);\n    const areCustomSettingsValid = Object.keys(updateCustomSettings || [])\n      .every((proj) => validProjects.includes(Util.getProjectName(proj))\n        && Object.keys(updateCustomSettings[proj]).every((s) => validTypes.includes(s)\n          && +updateCustomSettings[proj][s].warning > 0\n          && +updateCustomSettings[proj][s].critical > 0));\n    if (!areSettingsValid || !areCustomSettingsValid) {\n      res.writeHead(400);\n      res.write('Invalid payload');\n      return res;\n    }\n    const defaultSettingsStr = composeDefaultSettings(updateDefaultSettings);\n    const customSettingsStr = composeCustomSettings(updateCustomSettings);\n    await Promise.all([\n      Backend.kv.upsert(Config.thresholdDefaultSettingsKey, defaultSettingsStr),\n      Backend.kv.upsert(Config.thresholdCustomSettingsKey, customSettingsStr),\n    ]);\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write(JSON.stringify({ default: defaultSettingsStr, custom: customSettingsStr }));\n    return res;\n  } catch (e) {\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst getThresholdSettings = (req, res) => async ({ Backend, production, prodConfigFile }) => {\n  try {\n    const settings = await KVStore.getThresholdSettings(Backend)({ production, prodConfigFile });\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write(JSON.stringify(settings));\n    return res;\n  } catch (e) {\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst getValidatorAddresses = (req, res) => async ({ Backend, prodConfigFile }) => {\n  try {\n    const validatorAddressess = await KVStore.getValidatorAddressSettings(Backend)(prodConfigFile);\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write(JSON.stringify(validatorAddressess));\n    return res;\n  } catch (e) {\n    console.log(e);\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst addNewChecks = (Backend) => async (nodeList, serverConfig, project, network, validator) => {\n  const projectName = Util.getProjectNameSimple(project);\n  const deregisteredRegions = serverConfig.deRegisterServices[projectName] || [];\n  const nodes = nodeList\n    .filter((node) => !deregisteredRegions.includes(projectName)\n      && node.projects.some((p) => p.name === projectName && p.network === network))\n    .map((node) => ({\n      region: node.nodeRegion,\n      project: projectName,\n      network,\n    }));\n  await Promise.all(nodes.map(async (node) => {\n    const svcName = Util.getServiceName(node.project, true, node.region);\n    const checkPayload = {\n      Name: Util.getMissedBlockName(validator.name),\n      ID: Util.getMissedBlockCheckId(svcName, validator.name),\n      Notes: `Tally for monitoring missed blocks threshold ${validator.address}`,\n      TTL: '20s',\n      ServiceID: svcName,\n      Status: 'critical',\n    };\n    const res = await Backend.agent.check.register(checkPayload);\n    return res;\n  }));\n};\n\nconst removeChecks = (Backend) => async (nodeList, serverConfig, project, network, validator) => {\n  const projectName = Util.getProjectNameSimple(project);\n  const deregisteredRegions = serverConfig.deRegisterServices[projectName] || [];\n  const nodes = nodeList\n    .filter((node) => !deregisteredRegions.includes(projectName)\n      && node.projects.some((p) => p.name === projectName && p.network === network))\n    .map((node) => ({\n      region: node.nodeRegion,\n      project: projectName,\n      network,\n    }));\n  await Promise.all(nodes.map(async (node) => {\n    const svcName = Util.getServiceName(node.project, true, node.region);\n    const checkId = Util.getMissedBlockCheckId(svcName, validator.name);\n    return Backend.agent.check.destroy(checkId);\n  }));\n};\n\nconst updateValidatorAddressKVStore = (Backend) => async (validatorAddresses, project, network) => {\n  const validatorStr = validatorAddresses.reduce((acc, v) => {\n    const str = `${v.name}:${v.address}`;\n    if (acc) {\n      return `${acc},${str}`;\n    }\n    return str;\n  }, '');\n  return Backend.kv.upsert(`${Config.validatorAddressesPrefix}/${project}/${network}`,\n    validatorStr);\n};\n\nconst updateValidatorAddress = (req, res) => async ({\n  Backend,\n  node: nodeIp,\n  nomadPort,\n  consulPort,\n  production,\n  prodConfigFile,\n}) => {\n  try {\n    const {\n      body: {\n        network, project, validator,\n      },\n    } = req;\n    const isPayloadValid = network && project\n      && validator && validator.address && validator.address.length === 40 && validator.name;\n    if (!isPayloadValid) {\n      res.writeHead(400);\n      res.write('Invalid payload');\n      return res;\n    }\n    const validatorSettings = await KVStore.getValidatorAddressSettings(Backend)(prodConfigFile);\n    const validatorAddresses = Util.getValidatorAddress(validatorSettings, project, network);\n    const doesValidatorExist = validatorAddresses\n      .find((v) => v.address === validator.address || v.name === validator.name);\n    if (doesValidatorExist) {\n      res.writeHead(400);\n      res.write('Validator name or address exists!');\n      return res;\n    }\n    const newValidatorAddress = validatorAddresses.concat({\n      name: validator.name,\n      address: validator.address,\n    });\n    await updateValidatorAddressKVStore(Backend)(newValidatorAddress, project, network);\n    const {\n      nodeList,\n      serverConfig,\n    } = await Core.getNodeInfos({\n      nodeIp,\n      nomadPort,\n      consulPort,\n      production,\n      prodConfigFile,\n    });\n\n    await addNewChecks(Backend)(nodeList, serverConfig, project, network, validator);\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write(JSON.stringify({\n      project, network, validators: newValidatorAddress,\n    }));\n    return res;\n  } catch (e) {\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nconst removeValidatorAddress = (req, res) => async ({\n  Backend,\n  node: nodeIp,\n  nomadPort,\n  consulPort,\n  production,\n  prodConfigFile,\n}) => {\n  try {\n    const {\n      body: {\n        network, project, validator,\n      },\n    } = req;\n    const isPayloadValid = network && project\n      && validator && validator.address && validator.address.length === 40 && validator.name;\n    if (!isPayloadValid) {\n      res.writeHead(400);\n      res.write('Invalid payload');\n      return res;\n    }\n    const validatorSettings = await KVStore.getValidatorAddressSettings(Backend)(prodConfigFile);\n    const validatorAddresses = Util.getValidatorAddress(validatorSettings, project, network);\n    const matchValidatorIndex = validatorAddresses\n      .findIndex((v) => v.address === validator.address && v.name === validator.name);\n    if (matchValidatorIndex === -1) {\n      res.writeHead(400);\n      res.write('Validator not found!');\n      return res;\n    }\n    validatorAddresses.splice(matchValidatorIndex, 1);\n    await updateValidatorAddressKVStore(Backend)(validatorAddresses, project, network);\n\n    const {\n      nodeList,\n      serverConfig,\n    } = await Core.getNodeInfos({\n      nodeIp,\n      nomadPort,\n      consulPort,\n      production,\n      prodConfigFile,\n    });\n\n    await removeChecks(Backend)(nodeList, serverConfig, project, network, validator);\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write(JSON.stringify({\n      project, network, validators: validatorAddresses,\n    }));\n    return res;\n  } catch (e) {\n    res.writeHead(500);\n    res.write(JSON.stringify(e && e.toString()));\n    return res;\n  }\n};\n\nexport default {\n  watch,\n  listNodes,\n  updateNodes,\n  updateThresholdSettings,\n  getThresholdSettings,\n  getValidatorAddresses,\n  updateValidatorAddress,\n  removeValidatorAddress,\n};\n"]}