{"version":3,"sources":["../../src/server/server.js"],"names":["EventEmitter","defaultMaxListeners","getRouter","on","args","req","resp","reqUrl","url","headers","body","rawBody","Url","URL","pathname","query","searchParams","matcher","anyMatch","getRouteHandlers","method","map","re","mapRes","match","capture","routeKey","filter","m","length","writeHead","then","r","end","catch","err","console","log","routeTo","GET","emit","POST","bodyParser","resolve","data","chunk","indexOf","JSON","parse","router","setHeader","allowedMethods","clientErrorHandler","socket","upgradeHandler","wss","request","head","handleUpgrade","ws","destroy","app","node","consulPort","nomadPort","production","prodConfigFile","Backend","Api","WebSocket","Server","noServer","server","http","createServer"],"mappings":"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","file":"server.js","sourcesContent":["import http from 'http';\nimport EventEmitter from 'events';\nimport url from 'url';\nimport WebSocket from 'ws';\nimport { getRouteHandlers } from './routes';\nimport Consul from '../plugins/backends/consul2/api';\n\nEventEmitter.EventEmitter.defaultMaxListeners = 30;\n\nconst getRouter = new EventEmitter();\n\ngetRouter.on('request', (args, req, resp) => {\n  const {\n    url: reqUrl,\n    headers,\n    body,\n    rawBody,\n  } = req;\n  const Url = new url.URL(reqUrl, 'http://127.0.0.1:3000');\n  const { pathname, searchParams: query } = Url;\n  const matcher = async () => {\n    const anyMatch = Object.keys(getRouteHandlers[req.method]).map((re) => {\n      const mapRes = pathname.match(re);\n      if (mapRes === null) return null;\n      return { capture: mapRes, routeKey: re };\n    }).filter((m) => m !== null);\n    if (anyMatch.length === 0) {\n      resp.writeHead(404, {\n        'content-type': 'application/json',\n      });\n      return resp;\n    }\n    const { 0: { capture, routeKey } } = anyMatch;\n    return getRouteHandlers[req.method][routeKey]({\n      body,\n      rawBody,\n      query,\n      capture,\n      headers,\n    }, resp)(args);\n  };\n  matcher().then((r) => r.end()).catch((err) => {\n    if (err) console.log(err);\n    resp.end();\n  });\n});\n\nconst routeTo = {\n  GET: (args) => (req, resp) => getRouter.emit('request', args, req, resp),\n  POST: (args) => (req, resp) => getRouter.emit('request', args, req, resp),\n};\n\nconst bodyParser = (req) => new Promise((resolve) => {\n  let data = '';\n  req.on('data', (chunk) => {\n    data += chunk;\n  });\n  req.on('end', () => {\n    req.rawBody = data;\n    req.body = data;\n    if (data && data.indexOf('{') > -1) {\n      req.body = JSON.parse(data);\n    }\n    resolve();\n  });\n});\n\nconst router = (args) => async (req, resp) => {\n  resp.setHeader('Access-Control-Allow-Origin', '*');\n  resp.setHeader('Access-Control-Request-Method', '*');\n  resp.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET, POST');\n  resp.setHeader('Access-Control-Allow-Headers', 'access-control-allow-headers, access-control-allow-origin, content-type');\n  if (req.method === 'OPTIONS') {\n    resp.writeHead(200);\n    resp.end();\n    return;\n  }\n  const { method } = req;\n  if (method === 'POST') {\n    await bodyParser(req);\n  }\n  const allowedMethods = Object.keys(routeTo);\n  if (allowedMethods.indexOf(method) > -1) {\n    routeTo[method](args)(req, resp);\n  } else {\n    resp.writeHead(403, {\n      'content-type': 'application/json',\n    });\n    resp.end();\n  }\n};\n\nconst clientErrorHandler = (err, socket) => socket.end('HTTP/1.1 400 Bad Request \\r\\n\\r\\n');\n\nconst upgradeHandler = (wss) => (request, socket, head) => {\n  const { pathname } = url.parse(request.url);\n  if (pathname === '/api/ws') {\n    wss.handleUpgrade(request, socket, head, (ws) => {\n      wss.emit('connection', ws, request);\n    });\n  } else {\n    socket.destroy();\n  }\n};\n\nconst app = ({\n  node, consulPort, nomadPort, production, prodConfigFile,\n}) => {\n  console.log('Before consul');\n  const Backend = Consul(node, consulPort).Api;\n  console.log('After consul');\n  const wss = new WebSocket.Server({\n    noServer: true,\n  });\n  console.log('Server routing...')\n  const server = http.createServer(router({\n    Backend, wss, node, consulPort, nomadPort, production, prodConfigFile,\n  }));\n  console.log('Server route inited')\n  server.on('upgrade', upgradeHandler(wss));\n  server.on('clientError', clientErrorHandler);\n  return server;\n};\n\nexport default app;\n"]}