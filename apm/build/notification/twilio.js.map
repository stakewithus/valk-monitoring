{"version":3,"sources":["../../src/notification/twilio.js"],"names":["logger","child","module","generateMessage","rows","reduce","acc","r","keys","line","acc1","key","text","sendSMS","message","Client","process","env","TWILIO_ACCOUNT_ID","TWILIO_SECRET_TOKEN","res","messages","create","body","from","TWILIO_FROM_PHONE","to","TWILIO_TO_PHONE","sid","e","error","toString","sendCall","toPhone","calls","url","API_DOMAIN"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,sBAAOC,KAAP,CAAa,EAAEC,QAAQ,qBAAV,EAAb,CAAf;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,IAAD;AAAA,SAAUA,KAAKC,MAAL,CAAY,UAACC,GAAD,EAAMC,CAAN,EAAY;AACxD,QAAMC,OAAO,oBAAYD,CAAZ,CAAb;AACA,QAAME,OAAOD,KAAKH,MAAL,CAAY,UAACK,IAAD,EAAOC,GAAP,EAAe;AACtC,UAAMC,OAAUD,GAAV,UAAkBJ,EAAEI,GAAF,CAAlB,OAAN;AACA,kBAAUD,IAAV,GAAiBE,IAAjB;AACD,KAHY,EAGV,EAHU,CAAb;AAIA,gBAAUN,GAAV,IAAgBA,MAAM,MAAN,GAAe,EAA/B,IAAoCG,IAApC;AACD,GAPiC,EAO/B,EAP+B,CAAV;AAAA,CAAxB;;AASA,IAAMI,UAAU,eAAVA,OAAU,CAAOC,OAAP,EAAmB;AACjC,MAAMC,SAAS,sBAAOC,QAAQC,GAAR,CAAYC,iBAAnB,EAAsCF,QAAQC,GAAR,CAAYE,mBAAlD,CAAf;AACA,MAAI;AACF,QAAMC,MAAM,MAAML,OAAOM,QAAP,CAAgBC,MAAhB,CAAuB;AACvCC,YAAMT,OADiC;AAEvCU,YAAMR,QAAQC,GAAR,CAAYQ,iBAFqB;AAGvCC,UAAIV,QAAQC,GAAR,CAAYU;AAHuB,KAAvB,CAAlB;AAKA,QAAIP,GAAJ,EAAS;AACP,aAAOA,IAAIQ,GAAX;AACD;AACD,WAAO,IAAP;AACD,GAVD,CAUE,OAAOC,CAAP,EAAU;AACV7B,WAAO8B,KAAP,CAAa,uBAAb,EAAsCD,KAAKA,EAAEE,QAAF,EAA3C;AACA,WAAO,IAAP;AACD;AACF,CAhBD;;AAkBA,IAAMC,WAAW,eAAXA,QAAW,CAAOlB,OAAP,EAAgBmB,OAAhB,EAA4B;AAC3C,MAAI,CAACA,OAAL,EAAc;AACZjC,WAAO8B,KAAP,CAAa,uBAAb;AACA,WAAO,IAAP;AACD;AACD,MAAMf,SAAS,sBAAOC,QAAQC,GAAR,CAAYC,iBAAnB,EAAsCF,QAAQC,GAAR,CAAYE,mBAAlD,CAAf;AACA,MAAI;AACF,QAAMC,MAAM,MAAML,OAAOmB,KAAP,CAAaZ,MAAb,CAAoB;AACpCa,WAAQnB,QAAQC,GAAR,CAAYmB,UAApB,uBAAgDtB,OADZ;AAEpCU,YAAMR,QAAQC,GAAR,CAAYQ,iBAFkB;AAGpCC,UAAIO;AAHgC,KAApB,CAAlB;AAKA,QAAIb,GAAJ,EAAS;AACP,aAAOA,IAAIQ,GAAX;AACD;AACD,WAAO,IAAP;AACD,GAVD,CAUE,OAAOC,CAAP,EAAU;AACV7B,WAAO8B,KAAP,CAAa,wBAAb,EAAuCD,KAAKA,EAAEE,QAAF,EAA5C;AACA,WAAO,IAAP;AACD;AACF,CApBD;;kBAsBe;AACblB,kBADa;AAEbmB,oBAFa;AAGb7B;AAHa,C","file":"twilio.js","sourcesContent":["import twilio from 'twilio';\nimport pino from 'pino';\n\nconst logger = pino().child({ module: 'notification/twilio' });\n\nconst generateMessage = (rows) => rows.reduce((acc, r) => {\n  const keys = Object.keys(r);\n  const line = keys.reduce((acc1, key) => {\n    const text = `${key}: ${r[key]}\\n`;\n    return `${acc1}${text}`;\n  }, '');\n  return `${acc}${acc ? '\\n\\n' : ''}${line}`;\n}, '');\n\nconst sendSMS = async (message) => {\n  const Client = twilio(process.env.TWILIO_ACCOUNT_ID, process.env.TWILIO_SECRET_TOKEN);\n  try {\n    const res = await Client.messages.create({\n      body: message,\n      from: process.env.TWILIO_FROM_PHONE,\n      to: process.env.TWILIO_TO_PHONE,\n    });\n    if (res) {\n      return res.sid;\n    }\n    return null;\n  } catch (e) {\n    logger.error('Twilio send SMS error', e && e.toString());\n    return null;\n  }\n};\n\nconst sendCall = async (message, toPhone) => {\n  if (!toPhone) {\n    logger.error('Twilio phone is empty');\n    return null;\n  }\n  const Client = twilio(process.env.TWILIO_ACCOUNT_ID, process.env.TWILIO_SECRET_TOKEN);\n  try {\n    const res = await Client.calls.create({\n      url: `${process.env.API_DOMAIN}/api/v1/twilio/${message}`,\n      from: process.env.TWILIO_FROM_PHONE,\n      to: toPhone,\n    });\n    if (res) {\n      return res.sid;\n    }\n    return null;\n  } catch (e) {\n    logger.error('Twilio send call error', e && e.toString());\n    return null;\n  }\n};\n\nexport default {\n  sendSMS,\n  sendCall,\n  generateMessage,\n};\n"]}