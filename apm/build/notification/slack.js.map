{"version":3,"sources":["../../src/notification/slack.js"],"names":["logger","child","module","generateMessage","obj","keys","reduce","acc","key","value","undefined","text","slice","toUpperCase","length","postToChannel","webhookUrl","message","body","resolve","reject","uri","method","json","err","res","error","toString"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,sBAAOC,KAAP,CAAa,EAAEC,QAAQ,oBAAV,EAAb,CAAf;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAS;AAC/B,MAAMC,OAAO,oBAAYD,GAAZ,CAAb;AACA,SAAOC,KAAKC,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,QAAIC,QAAQL,IAAII,GAAJ,MAAaE,SAAb,GAAyBN,IAAII,GAAJ,CAAzB,GAAoC,EAAhD;AACA,QAAIA,QAAQ,MAAR,IAAkBA,QAAQ,QAA1B,IAAsCA,QAAQ,SAA9C,IAA2DA,QAAQ,QAAvE,EAAiF;AAC/EC,oBAAYA,KAAZ;AACD;AACD,QAAME,YAAUH,IAAII,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgBC,WAAhB,EAAV,GAA0CL,IAAII,KAAJ,CAAU,CAAV,EAAaJ,IAAIM,MAAjB,CAA1C,UAAuEL,KAAvE,OAAN;AACA,gBAAUF,GAAV,GAAgBI,IAAhB;AACD,GAPM,EAOJ,EAPI,CAAP;AAQD,CAVD;;AAYA,IAAMI,gBAAgB,SAAhBA,aAAgB,CAACC,UAAD,EAAaC,OAAb,EAAyB;AAC7C,MAAMC,OAAO;AACXP,UAAMM;AADK,GAAb;AAGA,SAAO,sBAAY,UAACE,OAAD,EAAUC,MAAV;AAAA,WAAqB,uBAAQ;AAC9CC,WAAKL,UADyC,EAC7BM,QAAQ,MADqB,EACbC,MAAML;AADO,KAAR,EAErC,UAACM,GAAD,EAAMC,GAAN,EAAc;AACf,UAAID,GAAJ,EAAS;AACPxB,eAAO0B,KAAP,CAAa,kBAAb,EAAiCF,OAAOA,IAAIG,QAAJ,EAAxC;AACA,eAAOP,OAAOI,GAAP,CAAP;AACD;AACD,aAAOL,QAAQM,GAAR,CAAP;AACD,KARuC,CAArB;AAAA,GAAZ,CAAP;AASD,CAbD;;kBAee;AACbV,8BADa;AAEbZ;AAFa,C","file":"slack.js","sourcesContent":["import request from 'request';\nimport pino from 'pino';\n\nconst logger = pino().child({ module: 'notification/slack' });\n\nconst generateMessage = (obj) => {\n  const keys = Object.keys(obj);\n  return keys.reduce((acc, key) => {\n    let value = obj[key] !== undefined ? obj[key] : '';\n    if (key === 'type' || key === 'status' || key === 'project' || key === 'region') {\n      value = `*${value}*`;\n    }\n    const text = `${key.slice(0, 1).toUpperCase()}${key.slice(1, key.length)}: ${value}\\n`;\n    return `${acc}${text}`;\n  }, '');\n};\n\nconst postToChannel = (webhookUrl, message) => {\n  const body = {\n    text: message,\n  };\n  return new Promise((resolve, reject) => request({\n    uri: webhookUrl, method: 'POST', json: body,\n  }, (err, res) => {\n    if (err) {\n      logger.error('Slack send error', err && err.toString());\n      return reject(err);\n    }\n    return resolve(res);\n  }));\n};\n\nexport default {\n  postToChannel,\n  generateMessage,\n};\n"]}