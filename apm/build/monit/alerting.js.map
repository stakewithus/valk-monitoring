{"version":3,"sources":["../../src/monit/alerting.js"],"names":["CHECK_NAMES","Constant","HEALTH_CHECK_STATUS","logger","child","module","isNodeMuted","mutedNodes","projectName","region","result","filter","node","length","isStatusChanged","check","status","prevStatus","PASS","alertDataFromNode","project","network","ip","getAlertByType","changedStatusNodes","type","reduce","acc","healthCheck","healthChecks","error","console","log","Error","concat","note","getDisconnectionAlert","disconnectionErrorNodes","healthCheckValues","statuses","isAllStatusCritical","every","s","CRITICAL","isAllStatusWarning","WARNING","isAllNoteCritical","c","NOTE_MESSAGES","DISCONNECTION_ERROR_CRITICAL","isAllNoteWarning","DISCONNECTION_ERROR_WARNING","alerts","map","TM_LATE_BLOCK_TIME","alertNodeIds","nodeId","others","alert","includes","getMissedBlockAlert","validatorSettings","r","existing","find","e","validatorChecks","validatorAddresses","Util","getValidatorAddress","validator","getMissedBlockName","name","push","TM_MISSED_BLOCK","handleAlerting","nodeStatuses","some","disconnectErrorAlerts","lateBlockAlerts","peerCountAlert","TM_PEER_COUNT","missedBlockAlert","all","Notification","sendToSlack","sendToTwilio"],"mappings":"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","file":"alerting.js","sourcesContent":["import pino from 'pino';\nimport Constant from './constant';\nimport Util from '../common/util';\nimport Notification from '../notification';\n\nconst { CHECK_NAMES } = Constant;\nconst { HEALTH_CHECK_STATUS } = Constant;\nconst logger = pino().child({ module: 'cmd/alerting' });\n\nconst isNodeMuted = (mutedNodes, projectName, region) => {\n  const result = mutedNodes.filter((node) => {\n    if (!node.region) {\n      return node.projectName === projectName;\n    }\n    return node.projectName === projectName && node.region === region;\n  });\n  return result.length > 0;\n};\n\nconst isStatusChanged = (check) => {\n  if (!check.status || !check.prevStatus) {\n    return false;\n  }\n  return check.status !== HEALTH_CHECK_STATUS.PASS && check.status !== check.prevStatus;\n};\n\nconst alertDataFromNode = (node) => ({\n  project: node.project,\n  network: node.network,\n  region: node.region,\n  ip: node.ip,\n});\n\nconst getAlertByType = (changedStatusNodes, type) => changedStatusNodes.reduce((acc, node) => {\n  const healthCheck = node.healthChecks[type];\n  if (!healthCheck) {\n    logger.error('getAlertByType Error');\n    console.log(changedStatusNodes, type);\n    throw new Error('HEALTH_CHECK_NOT_FOUND');\n  }\n  if (isStatusChanged(healthCheck)) {\n    return acc.concat({\n      ...alertDataFromNode(node),\n      type,\n      status: healthCheck.status,\n      note: healthCheck.note,\n      prevStatus: healthCheck.prevStatus,\n    });\n  }\n  return acc;\n}, []);\n\nconst getDisconnectionAlert = (changedStatusNodes) => {\n  const disconnectionErrorNodes = changedStatusNodes.filter((node) => {\n    const healthCheckValues = Object.values(node.healthChecks);\n    const statuses = healthCheckValues.reduce((acc, check) => acc.concat(check.status), []);\n    const isAllStatusCritical = statuses.every((s) => s === HEALTH_CHECK_STATUS.CRITICAL);\n    const isAllStatusWarning = statuses.every((s) => s === HEALTH_CHECK_STATUS.WARNING);\n    const isAllNoteCritical = healthCheckValues\n      .every((c) => c.note === Constant.NOTE_MESSAGES.DISCONNECTION_ERROR_CRITICAL);\n    const isAllNoteWarning = healthCheckValues\n      .every((c) => c.note === Constant.NOTE_MESSAGES.DISCONNECTION_ERROR_WARNING);\n    return (isAllStatusCritical && isAllNoteCritical) || (isAllStatusWarning && isAllNoteWarning);\n  }, []);\n  const alerts = disconnectionErrorNodes.map((node) => ({\n    ...alertDataFromNode(node),\n    note: node.healthChecks[CHECK_NAMES.TM_LATE_BLOCK_TIME].note,\n    status: node.healthChecks[CHECK_NAMES.TM_LATE_BLOCK_TIME].status,\n    prevStatus: node.healthChecks[CHECK_NAMES.TM_LATE_BLOCK_TIME].prevStatus,\n  }));\n  const alertNodeIds = disconnectionErrorNodes.map((node) => node.nodeId);\n  return {\n    alerts,\n    others: changedStatusNodes.filter((alert) => !alertNodeIds.includes(alert.nodeId)),\n  };\n};\n\nconst getMissedBlockAlert = (\n  changedStatusNodes, validatorSettings,\n) => changedStatusNodes.filter((r) => r).reduce((acc, node) => {\n  const existing = acc.find((e) => e.project === node.project && e.network === node.network);\n  if (existing) {\n    return acc;\n  }\n  const validatorChecks = [];\n  const validatorAddresses = Util.getValidatorAddress(\n    validatorSettings, node.project, node.network,\n  );\n  validatorAddresses.map((validator) => {\n    const check = node.healthChecks[Util.getMissedBlockName(validator.name)];\n    if (isStatusChanged(check)) {\n      validatorChecks.push({\n        project: node.project,\n        network: node.network,\n        type: CHECK_NAMES.TM_MISSED_BLOCK,\n        status: check.status,\n        prevStatus: check.prevStatus,\n        note: check.note,\n        validator: validator.name,\n      });\n    }\n    return null;\n  });\n  return acc.concat(validatorChecks);\n}, []);\n\nconst handleAlerting = async (mutedNodes, nodeStatuses, validatorSettings) => {\n  const changedStatusNodes = nodeStatuses.filter((node) => {\n    if (isNodeMuted(mutedNodes, node.project, node.region)) {\n      return false;\n    }\n    const healthChecks = Object.values(node.healthChecks);\n    return healthChecks.some((check) => isStatusChanged(check));\n  });\n  const { alerts: disconnectErrorAlerts, others } = getDisconnectionAlert(changedStatusNodes);\n  const lateBlockAlerts = getAlertByType(others, CHECK_NAMES.TM_LATE_BLOCK_TIME);\n  const peerCountAlert = getAlertByType(others, CHECK_NAMES.TM_PEER_COUNT);\n  const missedBlockAlert = getMissedBlockAlert(others, validatorSettings);\n  const alerts = [\n    ...disconnectErrorAlerts,\n    ...lateBlockAlerts,\n    ...peerCountAlert,\n    ...missedBlockAlert,\n  ];\n  await Promise.all(alerts.map(Notification.sendToSlack));\n  return Notification.sendToTwilio(alerts);\n};\n\nexport default {\n  handleAlerting,\n};\n"]}