{"version":3,"sources":["../../src/monit/index.js"],"names":["Bluebird","promisifyAll","fs","logger","child","module","parseJobFile","nodeList","schd","jobHCL","rawHCL","readFileAsync","normHCL","stripNewLine","jobDef","job","parse","jobLayout","Job","layoutFromDef","map","n","nodeId","nodeID","projectName","name","networkName","network","port","ports","http_rpc","host","nodeAddress","region","nodeRegion","nodeChecks","nodeServiceList","getAllJobs","Schedule","configDir","fileList","readdirAsync","jobFileList","filter","f","endsWith","path","join","jobParser","jobTasks","all","reduce","acc","concat","updateKVStore","Backend","nodeState","nodeMeta","validatorSettings","validatorAddresses","Util","getValidatorAddress","KVStore","update","updateHealthChecks","healthCheckConfigs","production","customConfig","customSettings","customHealthCheckConfigs","defaultSettings","HealthCheck","getNodes","nodeIp","consulPort","nomadPort","prodConfigFile","config","serverConfig","getProductionFileConfig","Core","getClusterProd","nodeInfos","projects","prj","getCluster","getHighestBlockHeightByProject","projectStates","state","pid","block_height","Math","max","getMutedNodes","mutedConfig","kv","getValue","Config","mutedNodesKey","nodes","split","node","getConfigs","getThresholdSettings","getValidatorAddressSettings","mutedNodes","run","runningNodes","includes","getServiceName","length","info","Api","requestPromises","Tendermint","getNodeState","getProjectName","requestTimeoutMs","nodeStates","highestBlockHeights","nodeForUpdatingGlobal","meta","id","nodeStatesForUpdating","updateGlobal","ConsulClient","updateKVStorePromises","index","consulClient","updateHealthCheckPromises","healthCheckResult","Alerting","handleAlerting","e","console","log","error","toString","getConfigDir","commands","Github","getCommands","process","env","GITHUB_REPO","runCommand","remove","fetch","runEvery5s","args","result","TerraMonitoring","v","dir","depth","setTimeout","start","fetchExchangeRate"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Bluebird from 'bluebird';\nimport pino from 'pino';\nimport Tendermint from '../plugins/chains/tendermint';\nimport HealthCheck from './health-checks';\nimport KVStore from './kv-store';\nimport Core from '../core';\nimport Config from '../config';\nimport Util from '../common/util';\nimport Consul from '../plugins/backends/consul2/api';\nimport Github from '../server/controllers/github';\nimport Alerting from './alerting';\nimport TerraMonitoring from './terra';\n\nBluebird.promisifyAll(fs);\nconst logger = pino().child({ module: 'cmd/monit' });\n\nconst parseJobFile = (nodeList, schd) => async (jobHCL) => {\n  const rawHCL = await fs.readFileAsync(jobHCL, 'utf-8');\n  const normHCL = schd.stripNewLine(rawHCL);\n  const jobDef = await schd.job.parse(`${normHCL}`);\n  const jobLayout = schd.Job.layoutFromDef(jobDef);\n  return nodeList.map((n) => ({\n    nodeId: n.nodeID,\n    projectName: jobLayout.name,\n    networkName: jobLayout.network || 'unknown',\n    port: jobLayout.ports.http_rpc,\n    host: n.nodeAddress,\n    region: n.nodeRegion,\n    nodeChecks: n.nodeChecks,\n    nodeServiceList: n.nodeServiceList,\n  }));\n};\n\nconst getAllJobs = (nodeList, Schedule) => async (configDir) => {\n  const fileList = await fs.readdirAsync(configDir);\n  const jobFileList = fileList.filter((f) => f.endsWith('.hcl')).map((f) => path.join(configDir, f));\n  const jobParser = parseJobFile(nodeList, Schedule);\n  const jobTasks = await Promise.all(jobFileList.map(jobParser));\n  return jobTasks.reduce((acc, job) => acc.concat(job), []);\n};\n\nconst updateKVStore = (Backend) => async ({\n  nodeState, nodeMeta, validatorSettings,\n}) => {\n  if (!nodeState) {\n    return null;\n  }\n  nodeMeta.validatorAddresses = Util.getValidatorAddress(validatorSettings, nodeMeta.projectName, nodeMeta.networkName); // eslint-disable-line\n  return KVStore.update(Backend)({ nodeState, nodeMeta });\n};\n\nconst updateHealthChecks = (Backend) => async ({\n  nodeState, nodeMeta, healthCheckConfigs, production, validatorSettings,\n}) => {\n  const customConfig = healthCheckConfigs.customSettings[nodeMeta.projectName];\n  let customHealthCheckConfigs = healthCheckConfigs.defaultSettings;\n  if (customConfig) {\n    customHealthCheckConfigs = Object.assign({}, healthCheckConfigs.defaultSettings, customConfig); // eslint-disable-line\n  }\n  nodeMeta.validatorAddresses = Util.getValidatorAddress(validatorSettings, nodeMeta.projectName, nodeMeta.networkName); // eslint-disable-line\n  return HealthCheck.update(Backend)({\n    nodeState, nodeMeta, production, healthCheckConfigs: customHealthCheckConfigs,\n  });\n};\n\nconst getNodes = async ({\n  nodeIp, production, consulPort, nomadPort, prodConfigFile, config,\n}) => {\n  if (production) {\n    const serverConfig = await Util.getProductionFileConfig(prodConfigFile);\n    const { nodeList: nodeInfos } = await Core.getClusterProd(nodeIp, consulPort, serverConfig);\n    return nodeInfos.reduce((acc, n) => acc.concat(n.projects.map((prj) => ({\n      nodeId: n.nodeID,\n      projectName: prj.name,\n      networkName: prj.network || 'unknown',\n      port: prj.ports.http_rpc,\n      host: n.nodeAddress,\n      region: n.nodeRegion,\n      nodeChecks: n.nodeChecks,\n      nodeServiceList: n.nodeServiceList,\n    }))), []);\n  }\n  const { nodeList, schd: Schedule } = await Core.getCluster(nodeIp, nomadPort,\n    consulPort);\n  return getAllJobs(nodeList, Schedule)(config);\n};\n\nconst getHighestBlockHeightByProject = (projectStates) => projectStates.reduce((acc, state) => {\n  if (!state) {\n    return acc;\n  }\n  const pid = `${state.projectName}-${state.networkName}`;\n  if (!acc[pid]) {\n    acc[pid] = state.block_height;\n  } else {\n    acc[pid] = Math.max(acc[pid], state.block_height);\n  }\n  return acc;\n}, {});\n\nconst getMutedNodes = async (Backend) => {\n  const mutedConfig = await Backend.kv.getValue(Config.mutedNodesKey);\n  if (!mutedConfig) {\n    return [];\n  }\n  const nodes = mutedConfig.split(',');\n  return nodes.map((node) => {\n    const [region, projectName] = node.split(':');\n    if (!region) {\n      return null;\n    }\n    return {\n      region,\n      projectName,\n    };\n  }).filter((n) => n);\n};\n\nconst getConfigs = (Backend) => async ({ production, prodConfigFile }) => {\n  const [healthCheckConfigs, mutedNodes, validatorSettings] = await Promise.all([\n    KVStore.getThresholdSettings(Backend)({ production, prodConfigFile }),\n    getMutedNodes(Backend),\n    KVStore.getValidatorAddressSettings(Backend)(prodConfigFile),\n  ]);\n  return {\n    healthCheckConfigs,\n    mutedNodes,\n    validatorSettings,\n  };\n};\n\nconst run = async ({\n  node: nodeIp, consulPort, nomadPort, prodConfigFile, production, config,\n}) => {\n  try {\n    const nodes = await getNodes({\n      nodeIp, production, consulPort, nomadPort, prodConfigFile, config,\n    });\n    const runningNodes = nodes.filter((n) => n.nodeServiceList && n.nodeServiceList\n      .includes(Util.getServiceName(n.projectName, production, n.region)));\n    if (runningNodes.length === 0) {\n      logger.info('Service is not registered on nodes');\n      return null;\n    }\n    const {\n      healthCheckConfigs,\n      mutedNodes,\n      validatorSettings,\n    } = await getConfigs(Consul(nodeIp, consulPort).Api)({\n      production, prodConfigFile,\n    });\n    const requestPromises = runningNodes\n      .map((n) => Tendermint.getNodeState(\n        n.host,\n        n.port,\n        Util.getProjectName(n.projectName),\n        n.networkName,\n        Config.requestTimeoutMs,\n        validatorSettings,\n      ));\n    const nodeStates = await Promise.all(requestPromises);\n    const highestBlockHeights = getHighestBlockHeightByProject(nodeStates);\n    const nodeForUpdatingGlobal = nodeStates\n      .reduce((acc, node) => {\n        if (!node) return acc;\n        const pid = `${node.projectName}-${node.networkName}`;\n        if (!acc[pid] && (+node.block_height === +highestBlockHeights[pid])) {\n          acc[pid] = node.meta.id;\n        }\n        return acc;\n      }, {});\n    const nodeStatesForUpdating = nodeStates.map((node) => {\n      if (!node) return node;\n      if (node.meta.id === nodeForUpdatingGlobal[`${node.projectName}-${node.networkName}`]) {\n        return Object.assign(node, { updateGlobal: true });\n      }\n      return node;\n    });\n    const ConsulClient = Consul(nodeIp, consulPort).Api;\n    const updateKVStorePromises = nodeStatesForUpdating\n      .map((nodeState, index) => {\n        const consulClient = production ? ConsulClient\n          : Consul(runningNodes[index].host, consulPort).Api;\n        return updateKVStore(consulClient)({\n          nodeState,\n          nodeMeta: runningNodes[index],\n          validatorSettings,\n        });\n      });\n    await Promise.all(updateKVStorePromises);\n    const updateHealthCheckPromises = nodeStatesForUpdating\n      .map((nodeState, index) => {\n        const consulClient = production ? ConsulClient\n          : Consul(runningNodes[index].host, consulPort).Api;\n        return updateHealthChecks(consulClient)({\n          nodeState,\n          nodeMeta: runningNodes[index],\n          healthCheckConfigs,\n          validatorSettings,\n          production,\n        });\n      });\n    const healthCheckResult = await Promise.all(updateHealthCheckPromises);\n    await Alerting.handleAlerting(mutedNodes, healthCheckResult, validatorSettings);\n    return healthCheckResult;\n  } catch (e) {\n    console.log(e);\n    logger.error('Error while executing the command');\n    logger.info(e && e.toString());\n    return null;\n  }\n};\n\nconst getConfigDir = async () => {\n  let commands = null;\n  try {\n    commands = await Github.getCommands(process.env.GITHUB_REPO);\n    await Github.runCommand(commands.remove);\n    await Github.runCommand(commands.fetch);\n    return commands.configDir;\n  } catch (e) {\n    logger.error('Error fetching config');\n    logger.info(e && e.toString());\n    return null;\n  }\n};\n\nconst runEvery5s = async (args) => {\n  const result = await run(args);\n  await TerraMonitoring.run(args);\n  if (args.v) {\n    console.dir(result, { depth: null });\n  }\n  setTimeout(() => {\n    runEvery5s(args);\n  }, 5000);\n};\n\nconst start = async (args) => {\n  if (!args.config && !args.production) {\n    args.config = await getConfigDir(); // eslint-disable-line no-param-reassign\n    logger.info('Using config dir', args.config);\n  }\n  TerraMonitoring.fetchExchangeRate();\n  runEvery5s(args);\n};\nexport default {\n  start,\n  run,\n};\n"]}