{"version":3,"sources":["../../src/monit/kv-store.js"],"names":["kvStoreKeys","Constant","KV_STORE_KEY_TYPES","logger","child","module","generateConsulKey","type","blockHeight","metaData","projectName","networkName","region","validatorAddress","nodeStatusPrefix","globalStatusPrefix","NODE_STATUS_BLOCK_HEIGHT","NODE_STATUS_BLOCK_TIME","NODE_STATUS_PEERS_TOTAL","NODE_STATUS_PEERS_INBOUND","NODE_STATUS_PEERS_OUTBOUND","NODE_STATUS_CATCHING_UP","GLOBAL_STATUS_BLOCK_HEIGHT","GLOBAL_STATUS_BLOCK_TIME","GLOBAL_STATUS_PEERS_TOTAL","GLOBAL_STATUS_PEERS_INBOUND","GLOBAL_STATUS_PEERS_OUTBOUND","GLOBAL_COMMIT_BY_BLOCK_HEIGHT","GLOBAL_STATUS_CATCHING_UP","upsertMultipleKeys","Backend","data","chunks","Util","splitArray","Config","maxKVStoreTransactions","promises","map","ch","payload","d","KV","Verb","Key","key","Value","Buffer","from","value","toString","kv","txn","all","deleteMultipleKeys","updateNodeStatuses","nodeState","statuses","block_height","block_time","inbound_peers","outbound_peers","total_peers","catching_up","network","project","inbound","outbound","total","height","time","keyValues","status","reduce","acc","row","updateGlobalStatuses","getOldKeys","keyType","minBlockHeight","keys","list","filter","arr","split","length","e","updateAndRemoveKeys","blocks","removeKeys","upsertKeys","blk","upsertResult","removeResult","getValueByKey","getValue","updateBlockCommitByValidator","blockCommits","b","block","block_meta","header","blockPreCommits","last_commit","precommits","signatures","validatorAddressInCommits","find","c","validator_address","validatorCommit","validator_commits","vc","address","commitBlockValue","commit","push","bc","missed","Date","valueOf","res","r","updateBlockCommit","currentBlockHeight","previousBlockHeightKey","previousBlockHeight","limitFromBlockHeight","numberOfLastCommits","fromBlk","Math","max","TendermintApi","getBlocks","host","port","requestTimeoutMs","validatorAddresses","v","update","nodeMeta","getProjectName","updateBC","updateGlobal","result","finalResult","concat","getAllByKeyPrefix","keyPrefix","response","Errors","error","Results","replace","getBlockCommitKeys","to","commits","sort","e1","e2","getThresholdSettings","production","prodConfigFile","getHealthCheckConfigs","defaultSettingInFile","defaultSettings","customSettingInFile","customSettings","thresholdDefaultSettingsKey","thresholdCustomSettingsKey","defaultSettingStr","customSettingsStr","defaultSettingsArr","s","warning","critical","customSettingsArr","finalDefaultSettings","finalCustomSettings","getValidatorSettingsByProject","fullProjectName","validatorStr","validatorAddressesPrefix","name","validators","defaultValidatorAddresses","projectSettings","getValidatorAddressSettings","projectList","getProjectList","validatorAddressess"],"mappings":"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","file":"kv-store.js","sourcesContent":["import pino from 'pino';\nimport Constant from './constant';\nimport Util from '../common/util';\nimport Config from '../config';\nimport TendermintApi from '../plugins/chains/tendermint';\nimport {\n  saveBlockCommits,\n  savePeerCounts,\n  saveBlockHeights,\n} from './influx-store';\n\nconst kvStoreKeys = Constant.KV_STORE_KEY_TYPES;\nconst logger = pino().child({\n  module: 'kv-store',\n});\n\nconst generateConsulKey = ({\n  type,\n  blockHeight,\n  metaData: {\n    projectName,\n    networkName,\n    region,\n    validatorAddress,\n  },\n}) => {\n  const nodeStatusPrefix = `projects/nodes/${projectName}/${networkName}/${region}`;\n  const globalStatusPrefix = `projects/global/${projectName}/${networkName}`;\n  switch (type) {\n    case kvStoreKeys.NODE_STATUS_BLOCK_HEIGHT:\n      return `${nodeStatusPrefix}/status/block-height`;\n    case kvStoreKeys.NODE_STATUS_BLOCK_TIME:\n      return `${nodeStatusPrefix}/status/block-time`;\n    case kvStoreKeys.NODE_STATUS_PEERS_TOTAL:\n      return `${nodeStatusPrefix}/status/peers-total`;\n    case kvStoreKeys.NODE_STATUS_PEERS_INBOUND:\n      return `${nodeStatusPrefix}/status/peers-inbound`;\n    case kvStoreKeys.NODE_STATUS_PEERS_OUTBOUND:\n      return `${nodeStatusPrefix}/status/peers-outbound`;\n    case kvStoreKeys.NODE_STATUS_CATCHING_UP:\n      return `${nodeStatusPrefix}/status/catching-up`;\n    case kvStoreKeys.GLOBAL_STATUS_BLOCK_HEIGHT:\n      return `${globalStatusPrefix}/status/block-height`;\n    case kvStoreKeys.GLOBAL_STATUS_BLOCK_TIME:\n      return `${globalStatusPrefix}/status/block-time`;\n    case kvStoreKeys.GLOBAL_STATUS_PEERS_TOTAL:\n      return `${globalStatusPrefix}/status/peers-total`;\n    case kvStoreKeys.GLOBAL_STATUS_PEERS_INBOUND:\n      return `${globalStatusPrefix}/status/peers-inbound`;\n    case kvStoreKeys.GLOBAL_STATUS_PEERS_OUTBOUND:\n      return `${globalStatusPrefix}/status/peers-outbound`;\n    case kvStoreKeys.GLOBAL_COMMIT_BY_BLOCK_HEIGHT:\n      return `${globalStatusPrefix}/commits/${blockHeight}/${validatorAddress}`;\n    case kvStoreKeys.GLOBAL_STATUS_CATCHING_UP:\n      return `${globalStatusPrefix}/status/catching-up`;\n    default:\n      return '';\n  }\n};\n\nconst upsertMultipleKeys = (Backend) => async (data) => {\n  const chunks = Util.splitArray(data, Config.maxKVStoreTransactions);\n  const promises = chunks.map((ch) => {\n    const payload = ch.map((d) => ({\n      KV: {\n        Verb: 'set',\n        Key: d.key,\n        Value: Buffer.from(d.value.toString()).toString('base64'),\n      },\n    }));\n    return Backend.kv.txn(payload);\n  });\n  return Promise.all(promises);\n};\n\nconst deleteMultipleKeys = (Backend) => async (data) => {\n  const chunks = Util.splitArray(data, Config.maxKVStoreTransactions);\n  const promises = chunks.map((ch) => {\n    const payload = ch.map((d) => ({\n      KV: {\n        Verb: 'delete',\n        Key: d,\n      },\n    }));\n    return Backend.kv.txn(payload);\n  });\n  return Promise.all(promises);\n};\n\nconst updateNodeStatuses = (Backend) => async ({\n  nodeState,\n  metaData,\n}) => {\n  const statuses = [{\n    key: kvStoreKeys.NODE_STATUS_BLOCK_HEIGHT,\n    value: nodeState.block_height,\n  },\n  {\n    key: kvStoreKeys.NODE_STATUS_BLOCK_TIME,\n    value: nodeState.block_time,\n  },\n  {\n    key: kvStoreKeys.NODE_STATUS_PEERS_INBOUND,\n    value: nodeState.inbound_peers,\n  },\n  {\n    key: kvStoreKeys.NODE_STATUS_PEERS_OUTBOUND,\n    value: nodeState.outbound_peers,\n  },\n  {\n    key: kvStoreKeys.NODE_STATUS_PEERS_TOTAL,\n    value: nodeState.total_peers,\n  },\n  {\n    key: kvStoreKeys.NODE_STATUS_CATCHING_UP,\n    value: nodeState.catching_up ? 1 : 0,\n  },\n  ];\n\n  // save peer counts into influx db\n  savePeerCounts({\n    network: metaData.networkName,\n    project: metaData.projectName,\n    region: metaData.region,\n    inbound: nodeState.inbound_peers,\n    outbound: nodeState.outbound_peers,\n    total: nodeState.total_peers,\n  });\n  // save block height into influx db\n  saveBlockHeights({\n    network: metaData.networkName,\n    project: metaData.projectName,\n    region: metaData.region,\n    height: nodeState.block_height,\n    time: nodeState.block_time * 1000,\n  });\n\n  const keyValues = statuses.map((status) => ({\n    key: generateConsulKey({\n      type: status.key,\n      metaData,\n    }),\n    value: status.value,\n  }));\n  await upsertMultipleKeys(Backend)(keyValues);\n  return keyValues.reduce((acc, row) => {\n    acc[row.key] = {\n      type: 'upsert',\n      value: row.value,\n    };\n    return acc;\n  }, {});\n};\n\nconst updateGlobalStatuses = (Backend) => async ({\n  nodeState,\n  metaData,\n}) => {\n  const statuses = [{\n    key: kvStoreKeys.GLOBAL_STATUS_BLOCK_HEIGHT,\n    value: nodeState.block_height,\n  },\n  {\n    key: kvStoreKeys.GLOBAL_STATUS_BLOCK_TIME,\n    value: nodeState.block_time,\n  },\n  {\n    key: kvStoreKeys.GLOBAL_STATUS_PEERS_INBOUND,\n    value: nodeState.inbound_peers,\n  },\n  {\n    key: kvStoreKeys.GLOBAL_STATUS_PEERS_OUTBOUND,\n    value: nodeState.outbound_peers,\n  },\n  {\n    key: kvStoreKeys.GLOBAL_STATUS_PEERS_TOTAL,\n    value: nodeState.total_peers,\n  },\n  {\n    key: kvStoreKeys.GLOBAL_STATUS_CATCHING_UP,\n    value: nodeState.catching_up ? 1 : 0,\n  },\n  ];\n  const keyValues = statuses.map((status) => ({\n    key: generateConsulKey({\n      type: status.key,\n      metaData,\n    }),\n    value: status.value,\n  }));\n  await upsertMultipleKeys(Backend)(keyValues);\n  return keyValues.reduce((acc, row) => {\n    acc[row.key] = {\n      type: 'upsert',\n      value: row.value,\n    };\n    return acc;\n  }, {});\n};\n\nconst getOldKeys = (Backend) => async ({\n  keyType,\n  minBlockHeight,\n  metaData,\n}) => {\n  try {\n    const keys = await Backend.kv.list(`projects/global/${metaData.projectName}/${metaData.networkName}/commits`);\n    return keys.filter((key) => {\n      const arr = key.split('/');\n      const blockHeight = arr[arr.length - 2];\n      if (+blockHeight < +minBlockHeight) {\n        return true;\n      }\n      return false;\n    }).map((key) => {\n      const arr = key.split('/');\n      const blockHeight = +arr[arr.length - 2];\n      return generateConsulKey({\n        type: keyType,\n        metaData,\n        blockHeight,\n      });\n    });\n  } catch (e) {\n    return [];\n  }\n};\n\nconst updateAndRemoveKeys = (Backend) => async ({\n  keyType,\n  blocks,\n  metaData,\n  minBlockHeight,\n}) => {\n  const removeKeys = await getOldKeys(Backend)({ keyType, metaData, minBlockHeight });\n  const upsertKeys = blocks.map((blk) => {\n    const key = generateConsulKey({\n      type: keyType,\n      metaData,\n      blockHeight: blk.key,\n    });\n    return {\n      key,\n      value: blk.value,\n    };\n  });\n  await Promise.all([\n    upsertMultipleKeys(Backend)(upsertKeys),\n    deleteMultipleKeys(Backend)(removeKeys),\n  ]);\n  const upsertResult = upsertKeys.reduce((acc, row) => {\n    acc[row.key] = {\n      type: 'upsert',\n      value: row.value,\n    };\n    return acc;\n  }, {});\n  const removeResult = removeKeys.reduce((acc, key) => {\n    acc[key] = {\n      type: 'del',\n    };\n    return acc;\n  }, {});\n  return {\n    ...upsertResult,\n    ...removeResult,\n  };\n};\n\nconst getValueByKey = (Backend) => async (keyType, metaData) => {\n  const key = generateConsulKey({\n    type: keyType,\n    metaData,\n  });\n  return Backend.kv.getValue(key);\n};\n\nconst updateBlockCommitByValidator = (Backend) => async ({\n  nodeState, metaData, blocks, validatorAddress, minBlockHeight,\n}) => {\n  const blockCommits = blocks.filter(b => b).map((blk) => {\n    const block = blk.block_meta || blk.block;\n    const blockHeight = block.header.height - 1; // pre-commit of previous block\n    const blockPreCommits = blk.block.last_commit.precommits || blk.block.last_commit.signatures;\n    const validatorAddressInCommits = blockPreCommits\n      .find((c) => c && c.validator_address === validatorAddress);\n    const value = validatorAddressInCommits ? 1 : 0;\n    return {\n      key: blockHeight,\n      value,\n      time: block.header.time,\n    };\n  });\n  const validatorCommit = nodeState.validator_commits\n    .find((vc) => vc.address === validatorAddress);\n  const commitBlockValue = validatorCommit && validatorCommit.commit ? 1 : 0;\n  blockCommits.push({\n    key: nodeState.block_height - 1,\n    value: commitBlockValue,\n    time: nodeState.block_time * 1000,\n  });\n  // save to influxdb\n  saveBlockCommits({\n    network: metaData.networkName,\n    project: metaData.projectName,\n    blockCommits: blockCommits.map((bc) => ({\n      height: bc.key,\n      missed: !bc.value,\n      time: new Date(bc.time).valueOf(),\n    })),\n  });\n  const res = await Promise.all([\n    updateAndRemoveKeys(Backend)({\n      keyType: kvStoreKeys.GLOBAL_COMMIT_BY_BLOCK_HEIGHT,\n      blocks: blockCommits,\n      metaData: { ...metaData, validatorAddress },\n      minBlockHeight,\n    }),\n  ]);\n  return res.filter((r) => r).reduce((acc, r) => ({\n    ...acc,\n    ...r,\n  }), {});\n};\n\nconst updateBlockCommit = (Backend) => async ({\n  nodeState,\n  metaData,\n}) => {\n  const currentBlockHeight = nodeState.block_height;\n  const previousBlockHeightKey = generateConsulKey({\n    type: kvStoreKeys.GLOBAL_STATUS_BLOCK_HEIGHT,\n    metaData,\n  });\n  const previousBlockHeight = await Backend.kv.getValue(previousBlockHeightKey);\n  // eslint-disable-next-line eqeqeq\n  if (previousBlockHeight && previousBlockHeight == currentBlockHeight) {\n    return null;\n  }\n  const limitFromBlockHeight = currentBlockHeight - 1 - Config.numberOfLastCommits;\n  const fromBlk = previousBlockHeight > 0\n    ? Math.max(+previousBlockHeight + 1, limitFromBlockHeight) : limitFromBlockHeight;\n  const blocks = await TendermintApi.getBlocks(\n    metaData.host, metaData.port, Config.requestTimeoutMs,\n  )(fromBlk, currentBlockHeight - 1); // avoid duplicate latest block height call\n  const { validatorAddresses } = metaData;\n  const res = await Promise.all(validatorAddresses.map((v) => updateBlockCommitByValidator(\n    Backend,\n  )({\n    nodeState,\n    metaData,\n    blocks,\n    validatorAddress: v.address,\n    minBlockHeight: limitFromBlockHeight - 10,\n  })));\n  return res.filter((r) => r).reduce((acc, r) => ({\n    ...acc,\n    ...r,\n  }), {});\n};\n\nconst update = (Backend) => async ({\n  nodeState,\n  nodeMeta,\n}) => {\n  const projectName = Util.getProjectName(nodeMeta.projectName);\n  const metaData = {\n    ...nodeMeta,\n    projectName,\n  };\n  let updateBC = [];\n  if (nodeState.updateGlobal) {\n    updateBC = await updateBlockCommit(Backend)({\n      nodeState,\n      metaData,\n    });\n  }\n  const result = await Promise.all([\n    updateNodeStatuses(Backend)({\n      nodeState,\n      metaData,\n    }),\n    nodeState.updateGlobal && updateGlobalStatuses(Backend)({\n      nodeState,\n      metaData,\n    }),\n  ]);\n  const finalResult = result.concat(updateBC);\n  return finalResult.filter((r) => r).reduce((acc, r) => ({\n    ...acc,\n    ...r,\n  }), {});\n};\n\n\nconst getAllByKeyPrefix = (Backend) => async (keyPrefix) => {\n  const payload = [{\n    KV: {\n      Verb: 'get-tree',\n      Key: keyPrefix,\n    },\n  }];\n  try {\n    const response = await Backend.kv.txn(payload);\n    if (response.Errors) {\n      logger.error(`getAllByKeyPrefix ${keyPrefix}`, response.Errors);\n      return [];\n    }\n    return response.Results.map((r) => ({\n      key: r.KV.Key,\n      value: r.KV.Value && Buffer.from(r.KV.Value, 'base64').toString('utf-8').replace(/\"/g, ''),\n    }));\n  } catch (e) {\n    logger.error(`getAllByKeyPrefix ${keyPrefix}`, e && e.toString());\n    return [];\n  }\n};\n\nconst getBlockCommitKeys = (Backend) => async ({\n  from,\n  to,\n  metaData,\n}) => {\n  const payload = [\n    {\n      KV: {\n        Verb: 'get-tree',\n        Key: `projects/global/${metaData.projectName}/${metaData.networkName}/commits/`,\n      },\n    },\n  ];\n  try {\n    const response = await Backend.kv.txn(payload);\n    if (response.Errors) {\n      logger.error(`getBlockCommitKeys ${from}-${to}`, response.Errors);\n      return [];\n    }\n    const commits = (response.Results || []).map((r) => {\n      const arr = r.KV.Key.split('/');\n      const blockHeight = arr[arr.length - 2];\n      const address = arr[arr.length - 1];\n      return {\n        key: +blockHeight,\n        address,\n        value: r.KV.Value && Buffer.from(r.KV.Value, 'base64').toString('utf-8').replace(/\"/g, ''),\n      };\n    }).filter((c) => c.address === metaData.validatorAddress && c.key >= from && c.key < to);\n    commits.sort((e1, e2) => (e1.key < e2.key ? 1 : -1));\n    return commits;\n  } catch (e) {\n    logger.error(`getBlockCommitKeys ${from}-${to}`, e && e.toString());\n    return [];\n  }\n};\n\nconst getThresholdSettings = (Backend) => async ({\n  production,\n  prodConfigFile,\n}) => {\n  const {\n    defaultSettings: defaultSettingInFile,\n    customSettings: customSettingInFile,\n  } = await Util.getHealthCheckConfigs(production, prodConfigFile);\n  const [defaultSettingStr, customSettingsStr] = await Promise.all([\n    Backend.kv.getValue(Config.thresholdDefaultSettingsKey),\n    Backend.kv.getValue(Config.thresholdCustomSettingsKey),\n  ]);\n  const defaultSettingsArr = (defaultSettingStr || '').split(',');\n  const defaultSettings = defaultSettingsArr.filter((s) => s).reduce((acc, s) => {\n    const [type, warning, critical] = s.split(':');\n    acc[type] = {\n      warning: +warning,\n      critical: +critical,\n    };\n    return acc;\n  }, {});\n\n  const customSettingsArr = (customSettingsStr || '').split(',');\n  const customSettings = customSettingsArr.filter((s) => s).reduce((acc, s) => {\n    const [project, type, warning, critical] = s.split(':');\n    if (!acc[project]) {\n      acc[project] = {};\n    }\n    acc[project][type] = {\n      warning: +warning,\n      critical: +critical,\n    };\n    return acc;\n  }, {});\n  const finalDefaultSettings = Object.assign(defaultSettingInFile, defaultSettings);\n  const finalCustomSettings = Object.assign(customSettingInFile, customSettings);\n  return {\n    defaultSettings: finalDefaultSettings,\n    customSettings: finalCustomSettings,\n  };\n};\n\nconst getValidatorSettingsByProject = (Backend) => async (project, network) => {\n  const fullProjectName = Util.getProjectName(project);\n  const validatorStr = await Backend.kv\n    .getValue(`${Config.validatorAddressesPrefix}/${fullProjectName}/${network}`) || '';\n  const validatorAddresses = validatorStr.split(',').filter((v) => v).reduce((acc, v) => {\n    const [name, address] = v.split(':');\n    return acc.concat({ name, address });\n  }, []);\n  if (validatorAddresses.length > 0) {\n    return {\n      project: fullProjectName,\n      network,\n      validators: validatorAddresses,\n    };\n  }\n  const defaultValidatorAddresses = Config.projectSettings[fullProjectName]\n    && Config.projectSettings[fullProjectName][network];\n  return {\n    project: fullProjectName,\n    network,\n    validators: defaultValidatorAddresses,\n  };\n};\n\nconst getValidatorAddressSettings = (Backend) => async (prodConfigFile) => {\n  const projectList = await Util.getProjectList(prodConfigFile);\n  const validatorAddressess = await Promise.all(projectList\n    .map((e) => getValidatorSettingsByProject(Backend)(e.project, e.network)));\n  return validatorAddressess;\n};\n\nexport default {\n  update,\n  getValueByKey,\n  generateConsulKey,\n  getAllByKeyPrefix,\n  getBlockCommitKeys,\n  getThresholdSettings,\n  getValidatorAddressSettings,\n  deleteMultipleKeys,\n};\n"]}