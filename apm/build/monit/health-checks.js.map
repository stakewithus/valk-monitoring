{"version":3,"sources":["../../src/monit/health-checks.js"],"names":["CHECK_NAMES","Constant","getLateBlockTimeStatus","nodeState","healthCheckConfigs","currentTime","Math","floor","Date","now","delta","block_time","status","HEALTH_CHECK_STATUS","PASS","lastBlockTime","critical","CRITICAL","warning","WARNING","timeDelta","updateHealthCheckPass","Backend","checkId","note","response","agent","check","ttlPass","updateHealthCheckWarning","type","nodeMeta","nodeId","region","network","networkName","project","projectName","host","blockHeight","block_height","blockTime","ttlWarn","updateHealthCheckCritical","ttlFail","updateHealthCheckConnectionError","checkName","HealthCheckCounter","get","increase","NOTE_MESSAGES","DISCONNECTION_ERROR_WARNING","DISCONNECTION_ERROR_CRITICAL","updateDefaultChecks","reset","catching_up","warningNote","updateChecks","updateResponse","updateLateBlockTimeStatus","defaultCheck","TM_LATE_BLOCK_TIME","time","updatePeerCountStatus","TM_PEER_COUNT","total_peers","peerCounts","peers","updateMissedBlocksStatus","validatorAddress","console","log","TM_MISSED_BLOCK","commitBlockHeight","lastCommitValues","KVStore","getBlockCommitKeys","from","Config","numberOfLastCommits","to","metaData","Util","getProjectName","length","missedBlocksTotal","map","c","value","filter","v","upTimeRatio","upTimePercentage","missedBlocks","update","production","checks","nodeChecks","CheckID","startsWith","getServiceName","reduce","acc","Name","lateBlockAndPeerCount","validatorAddresses","missedBlockPromises","address","getMissedBlockName","name","all","lateBlockTime","peerCount","missedBlocksInARow","healthChecks","prevStatus","Status","toUpperCase","indx","ip"],"mappings":"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","file":"health-checks.js","sourcesContent":["import Constant from './constant';\nimport Config from '../config';\nimport KVStore from './kv-store';\nimport HealthCheckCounter from './health-check-counter';\nimport Util from '../common/util';\nimport {\n  saveHealthChecks,\n} from './influx-store';\n\nconst { CHECK_NAMES } = Constant;\n\nconst getLateBlockTimeStatus = (nodeState, healthCheckConfigs) => {\n  const currentTime = Math.floor(Date.now() / 1000);\n  const delta = currentTime - nodeState.block_time;\n  let status = Constant.HEALTH_CHECK_STATUS.PASS;\n  if (delta > healthCheckConfigs.lastBlockTime.critical) {\n    status = Constant.HEALTH_CHECK_STATUS.CRITICAL;\n  } else if (delta > healthCheckConfigs.lastBlockTime.warning) {\n    status = Constant.HEALTH_CHECK_STATUS.WARNING;\n  }\n  return {\n    timeDelta: delta,\n    status,\n  };\n};\n\nconst updateHealthCheckPass = (Backend) => async (checkId, note = '') => {\n  const response = await Backend.agent.check.ttlPass(checkId, note);\n  return {\n    checkId,\n    status: Constant.HEALTH_CHECK_STATUS.PASS,\n    response,\n    note,\n  };\n};\nconst updateHealthCheckWarning = (Backend) => async ({\n  checkId,\n  note = '',\n  type,\n  nodeMeta = {},\n  nodeState = {},\n}) => {\n  saveHealthChecks({\n    nodeId: nodeMeta.nodeId,\n    region: nodeMeta.region,\n    network: nodeMeta.networkName,\n    project: nodeMeta.projectName,\n    host: nodeMeta.host,\n    blockHeight: nodeState.block_height,\n    blockTime: nodeState.block_time,\n    status: Constant.HEALTH_CHECK_STATUS.WARNING,\n    checkId,\n    note,\n    type,\n  });\n  const response = await Backend.agent.check.ttlWarn(checkId, note);\n  return {\n    checkId,\n    status: Constant.HEALTH_CHECK_STATUS.WARNING,\n    response,\n    note,\n  };\n};\nconst updateHealthCheckCritical = (Backend) => async ({\n  checkId,\n  note = '',\n  type,\n  nodeMeta = {},\n  nodeState = {},\n}) => {\n  saveHealthChecks({\n    nodeId: nodeMeta.nodeId,\n    region: nodeMeta.region,\n    network: nodeMeta.networkName,\n    project: nodeMeta.projectName,\n    host: nodeMeta.host,\n    blockHeight: nodeState.block_height,\n    blockTime: nodeState.block_time,\n    status: Constant.HEALTH_CHECK_STATUS.CRITICAL,\n    checkId,\n    note,\n    type,\n  });\n  const response = await Backend.agent.check.ttlFail(checkId, note);\n  return {\n    checkId,\n    status: Constant.HEALTH_CHECK_STATUS.CRITICAL,\n    response,\n    note,\n  };\n};\n\nconst updateHealthCheckConnectionError = (Backend) => async ({\n  checkId,\n  nodeMeta,\n  checkName,\n  type,\n}) => {\n  if (HealthCheckCounter.get(nodeMeta, checkName) < 2) {\n    HealthCheckCounter.increase(nodeMeta, checkName);\n    return true;\n  }\n  if (HealthCheckCounter.get(nodeMeta, checkName) <= 5) {\n    HealthCheckCounter.increase(nodeMeta, checkName);\n    return updateHealthCheckWarning(Backend)({\n      checkId,\n      note: Constant.NOTE_MESSAGES.DISCONNECTION_ERROR_WARNING,\n      nodeMeta,\n      type,\n    });\n  }\n  return updateHealthCheckCritical(Backend)({\n    checkId,\n    note: Constant.NOTE_MESSAGES.DISCONNECTION_ERROR_CRITICAL,\n    nodeMeta,\n    type,\n  });\n};\n\nconst updateDefaultChecks = (Backend) => async ({\n  checkId,\n  nodeState,\n  nodeMeta,\n  checkName,\n  type,\n}) => {\n  if (!nodeState) {\n    return updateHealthCheckConnectionError(Backend)({\n      checkId,\n      nodeMeta,\n      checkName,\n      type,\n    });\n  }\n  HealthCheckCounter.reset(nodeMeta, checkName);\n  if (nodeState.catching_up) {\n    const warningNote = `Node is still catch up, now at ${nodeState.block_height}`;\n    return updateHealthCheckWarning(Backend)({\n      checkId,\n      note: warningNote,\n      nodeMeta,\n      nodeState,\n      type,\n    });\n  }\n  return null;\n};\n\nconst updateChecks = (Backend) => async ({\n  status,\n  note,\n  checkId,\n  nodeMeta,\n  nodeState,\n  type,\n}) => {\n  let updateResponse = null;\n  switch (status) {\n    case Constant.HEALTH_CHECK_STATUS.PASS:\n      updateResponse = await updateHealthCheckPass(Backend)(checkId, note);\n      break;\n    case Constant.HEALTH_CHECK_STATUS.WARNING:\n      updateResponse = await updateHealthCheckWarning(Backend)({\n        checkId,\n        note,\n        nodeMeta,\n        nodeState,\n        type,\n      });\n      break;\n    case Constant.HEALTH_CHECK_STATUS.CRITICAL:\n      updateResponse = await updateHealthCheckCritical(Backend)({\n        checkId,\n        note,\n        nodeMeta,\n        nodeState,\n        type,\n      });\n      break;\n    default:\n      updateResponse = null;\n  }\n  return updateResponse;\n};\n\nconst updateLateBlockTimeStatus = (Backend) => async ({\n  nodeState,\n  checkId,\n  nodeMeta,\n  checkName,\n  healthCheckConfigs,\n}) => {\n  if (!checkId) {\n    return null;\n  }\n  const defaultCheck = await updateDefaultChecks(Backend)({\n    nodeState,\n    checkId,\n    nodeMeta,\n    checkName,\n    type: CHECK_NAMES.TM_LATE_BLOCK_TIME,\n  });\n  if (defaultCheck) {\n    return defaultCheck;\n  }\n  const {\n    timeDelta,\n    status,\n  } = getLateBlockTimeStatus(nodeState, healthCheckConfigs);\n  const updateResponse = await updateChecks(Backend)({\n    checkId,\n    status,\n    note: `${timeDelta}s`,\n    nodeMeta,\n    nodeState,\n    type: CHECK_NAMES.TM_LATE_BLOCK_TIME,\n  });\n  return {\n    ...updateResponse,\n    time: timeDelta,\n  };\n};\n\nconst updatePeerCountStatus = (Backend) => async ({\n  nodeState,\n  checkId,\n  nodeMeta,\n  checkName,\n  healthCheckConfigs,\n}) => {\n  if (!checkId) {\n    return null;\n  }\n  if (!nodeState) {\n    return updateHealthCheckConnectionError(Backend)({\n      checkId,\n      nodeMeta,\n      checkName,\n      type: CHECK_NAMES.TM_PEER_COUNT,\n    });\n  }\n  HealthCheckCounter.reset(nodeMeta, checkName);\n  let status = Constant.HEALTH_CHECK_STATUS.PASS;\n  if (nodeState.total_peers < healthCheckConfigs.peerCounts.critical) {\n    status = Constant.HEALTH_CHECK_STATUS.CRITICAL;\n  } else if (nodeState.total_peers < healthCheckConfigs.peerCounts.warning) {\n    status = Constant.HEALTH_CHECK_STATUS.WARNING;\n  }\n  const updateResponse = await updateChecks(Backend)({\n    status,\n    checkId,\n    note: `${nodeState.total_peers}peers`,\n    nodeMeta,\n    nodeState,\n    type: CHECK_NAMES.TM_PEER_COUNT,\n  });\n  return {\n    ...updateResponse,\n    peers: nodeState.total_peers,\n  };\n};\n\nconst updateMissedBlocksStatus = (Backend) => async ({\n  nodeState,\n  nodeMeta,\n  checkId,\n  checkName,\n  healthCheckConfigs,\n  validatorAddress,\n}) => {\n  if (!checkId) {\n    console.log('checkId not found');\n    return null;\n  }\n  const defaultCheck = await updateDefaultChecks(Backend)({\n    nodeState,\n    checkId,\n    nodeMeta,\n    checkName,\n    type: CHECK_NAMES.TM_MISSED_BLOCK,\n  });\n  if (defaultCheck) {\n    return defaultCheck;\n  }\n  const commitBlockHeight = nodeState.block_height - 1;\n  const lastCommitValues = await KVStore.getBlockCommitKeys(Backend)({\n    from: commitBlockHeight - Config.numberOfLastCommits - 1,\n    to: commitBlockHeight - 1,\n    metaData: {\n      projectName: Util.getProjectName(nodeMeta.projectName),\n      networkName: nodeMeta.networkName,\n      validatorAddress,\n    },\n  });\n  if (lastCommitValues.length < 40) {\n    // ignore this check if node is not catching up\n    console.log('Not enough values', nodeMeta.projectName, nodeMeta.networkName, nodeMeta.region, lastCommitValues.length);\n    return updateHealthCheckPass(Backend)(checkId);\n  }\n  const missedBlocksTotal = lastCommitValues.map((c) => +c.value).filter((v) => v === 0).length;\n  const upTimeRatio = (lastCommitValues.length - missedBlocksTotal) / lastCommitValues.length;\n  const upTimePercentage = Math.floor(upTimeRatio * 100);\n  if (upTimePercentage < healthCheckConfigs.missedBlocks.critical) {\n    console.log('Critical', nodeMeta.projectName, nodeMeta.region, upTimePercentage);\n    return updateHealthCheckCritical(Backend)({\n      checkId,\n      note: upTimePercentage,\n      nodeMeta,\n      nodeState,\n      type: CHECK_NAMES.TM_MISSED_BLOCK,\n    });\n  }\n  if (upTimePercentage < healthCheckConfigs.missedBlocks.warning) {\n    return updateHealthCheckWarning(Backend)({\n      checkId,\n      note: upTimePercentage,\n      nodeMeta,\n      nodeState,\n      type: CHECK_NAMES.TM_MISSED_BLOCK,\n    });\n  }\n  return updateHealthCheckPass(Backend)(checkId);\n};\n\nconst update = (Backend) => async ({\n  nodeState,\n  nodeMeta,\n  production,\n  healthCheckConfigs,\n}) => {\n  const checks = Object.values(nodeMeta.nodeChecks)\n    .filter((c) => c.CheckID.startsWith(`service:${Util.getServiceName(nodeMeta.projectName, production, nodeMeta.region)}`))\n    .reduce((acc, check) => {\n      acc[check.Name] = check.CheckID;\n      return acc;\n    }, {});\n  const lateBlockAndPeerCount = [\n    updateLateBlockTimeStatus(Backend)({\n      nodeState,\n      nodeMeta,\n      checkId: checks[CHECK_NAMES.TM_LATE_BLOCK_TIME],\n      checkName: CHECK_NAMES.TM_LATE_BLOCK_TIME,\n      healthCheckConfigs,\n    }),\n    updatePeerCountStatus(Backend)({\n      nodeState,\n      nodeMeta,\n      checkId: checks[CHECK_NAMES.TM_PEER_COUNT],\n      checkName: CHECK_NAMES.TM_PEER_COUNT,\n      healthCheckConfigs,\n    }),\n  ];\n  const { validatorAddresses } = nodeMeta;\n  const missedBlockPromises = validatorAddresses.map((v) => updateMissedBlocksStatus(Backend)({\n    nodeState,\n    nodeMeta,\n    validatorAddress: v.address,\n    checkId: checks[Util.getMissedBlockName(v.name)],\n    checkName: Util.getMissedBlockName(v.name),\n    healthCheckConfigs,\n  }));\n  const [lateBlockTime, peerCount, ...missedBlocksInARow] = await Promise.all([\n    ...lateBlockAndPeerCount,\n    ...missedBlockPromises,\n  ]);\n  const healthChecks = {\n    [CHECK_NAMES.TM_LATE_BLOCK_TIME]: {\n      ...lateBlockTime,\n      prevStatus: nodeMeta.nodeChecks[checks[CHECK_NAMES.TM_LATE_BLOCK_TIME]].Status.toUpperCase(),\n    },\n    [CHECK_NAMES.TM_PEER_COUNT]: {\n      ...peerCount,\n      prevStatus: nodeMeta.nodeChecks[checks[CHECK_NAMES.TM_PEER_COUNT]].Status.toUpperCase(),\n    },\n  };\n  validatorAddresses.map((v, indx) => {\n    const checkName = Util.getMissedBlockName(v.name);\n    healthChecks[checkName] = {\n      ...missedBlocksInARow[indx],\n      prevStatus: nodeMeta.nodeChecks[checks[checkName]].Status.toUpperCase(),\n    };\n    return null;\n  });\n  return {\n    nodeId: nodeMeta.nodeId,\n    project: nodeMeta.projectName,\n    network: nodeMeta.networkName,\n    region: nodeMeta.region,\n    ip: nodeMeta.host,\n    healthChecks,\n  };\n};\n\nexport default {\n  update,\n};\n"]}