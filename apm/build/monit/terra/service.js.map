{"version":3,"sources":["../../../src/monit/terra/service.js"],"names":["getLcdDetail","endpoint","process","env","TERRA_LCD","split","host","port","getMissingVote","TERRA_ORACLE_VALIDATOR_ADDRESS","getExchangeRates","response","blockHeight","height","result","getActiveDenoms","getVotingRates","exchangeRates","exchange_rate_tuples","err"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe,GAAM;AACzB,MAAMC,WAAWC,QAAQC,GAAR,CAAYC,SAA7B;;AADyB,8BAEJH,SAASI,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAuBA,KAAvB,CAA6B,GAA7B,CAFI;AAAA;AAAA,MAElBC,IAFkB;AAAA,MAEZC,IAFY;;AAGzB,SAAO,EAAED,UAAF,EAAQC,UAAR,EAAP;AACD,CAJD;;AAMA,IAAMC,iBAAiB,eAAjBA,cAAiB,GAAY;AAAA,sBACVR,cADU;AAAA,MACzBM,IADyB,iBACzBA,IADyB;AAAA,MACnBC,IADmB,iBACnBA,IADmB;;AAEjC,SAAO,2BAAWD,IAAX,EAAiBC,IAAjB,EAAuB,EAAvB,sBAA6CL,QAAQC,GAAR,CAAYM,8BAAzD,YAAgG,KAAhG,EAAuG,EAAvG,CAAP;AACD,CAHD;;AAKA,IAAMC,mBAAmB,eAAnBA,gBAAmB,GAAY;AAAA,uBACZV,cADY;AAAA,MAC3BM,IAD2B,kBAC3BA,IAD2B;AAAA,MACrBC,IADqB,kBACrBA,IADqB;;AAEnC,MAAMI,WAAW,MAAM,2BAAWL,IAAX,EAAiBC,IAAjB,EAAuB,EAAvB,EAA2B,+BAA3B,EAA4D,KAA5D,EAAmE,EAAnE,CAAvB;AACA,SAAO;AACLK,iBAAaD,SAASE,MAAT,IAAmB,CAD3B;AAELC,YAAQH,SAASG,MAAT,IAAmBH;AAFtB,GAAP;AAID,CAPD;;AASA,IAAMI,kBAAkB,eAAlBA,eAAkB,GAAY;AAAA,uBACXf,cADW;AAAA,MAC1BM,IAD0B,kBAC1BA,IAD0B;AAAA,MACpBC,IADoB,kBACpBA,IADoB;;AAElC,MAAMI,WAAW,MAAM,2BAAWL,IAAX,EAAiBC,IAAjB,EAAuB,EAAvB,EAA2B,wBAA3B,EAAqD,KAArD,EAA4D,EAA5D,CAAvB;AACA,SAAOI,YAAYA,SAASG,MAArB,GAA8BH,SAASG,MAAvC,GAAgDH,QAAvD;AACD,CAJD;;AAMA,IAAMK,iBAAiB,eAAjBA,cAAiB,GAAY;AAAA,uBACVhB,cADU;AAAA,MACzBM,IADyB,kBACzBA,IADyB;AAAA,MACnBC,IADmB,kBACnBA,IADmB;;AAEjC,MAAI;AACF,QAAMI,WAAW,MAAM,2BAAWL,IAAX,EAAiBC,IAAjB,EAAuB,EAAvB,sBAA6CL,QAAQC,GAAR,CAAYM,8BAAzD,sBAA0G,KAA1G,EAAiH,EAAjH,CAAvB;AACA,QAAMQ,gBAAgBN,YAAYA,SAASG,MAArB,IAA+BH,SAASG,MAAT,CAAgBI,oBAArE;AACA,WAAOD,aAAP;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,WAAO,EAAP;AACD;AACF,CATD;;kBAWe;AACbX,gCADa;AAEbE,oCAFa;AAGbK,kCAHa;AAIbC;AAJa,C","file":"service.js","sourcesContent":["import httpClient from '../../common/http_client';\n\nconst getLcdDetail = () => {\n  const endpoint = process.env.TERRA_LCD;\n  const [host, port] = endpoint.split(',')[0].split(':');\n  return { host, port };\n};\n\nconst getMissingVote = async () => {\n  const { host, port } = getLcdDetail();\n  return httpClient(host, port, {})(`/oracle/voters/${process.env.TERRA_ORACLE_VALIDATOR_ADDRESS}/miss`, 'GET')({});\n};\n\nconst getExchangeRates = async () => {\n  const { host, port } = getLcdDetail();\n  const response = await httpClient(host, port, {})('/oracle/denoms/exchange_rates', 'GET')({});\n  return {\n    blockHeight: response.height || 0,\n    result: response.result || response,\n  };\n};\n\nconst getActiveDenoms = async () => {\n  const { host, port } = getLcdDetail();\n  const response = await httpClient(host, port, {})('/oracle/denoms/actives', 'GET')({});\n  return response && response.result ? response.result : response;\n};\n\nconst getVotingRates = async () => {\n  const { host, port } = getLcdDetail();\n  try {\n    const response = await httpClient(host, port, {})(`/oracle/voters/${process.env.TERRA_ORACLE_VALIDATOR_ADDRESS}/aggregate_vote`, 'GET')({});\n    const exchangeRates = response && response.result && response.result.exchange_rate_tuples;\n    return exchangeRates;\n  } catch (err) {\n    return [];\n  }\n};\n\nexport default {\n  getMissingVote,\n  getExchangeRates,\n  getActiveDenoms,\n  getVotingRates,\n};\n"]}