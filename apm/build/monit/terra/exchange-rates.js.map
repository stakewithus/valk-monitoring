{"version":3,"sources":["../../../src/monit/terra/exchange-rates.js"],"names":["persistData","blockHeight","denoms","exchangeRates","votingRates","service","getVotingRates","length","map","denom","votingRate","find","rate","networkRate","r","swu_amount","exchange_rate","filter","er","amount","height","result","start","getExchangeRates","networkExchangeRates","runEverySec","setTimeout","error","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA,IAAMA,cAAc,eAAdA,WAAc,GAAuD;AAAA,MAAhDC,WAAgD,uEAAlC,CAAkC;AAAA,MAA/BC,MAA+B;AAAA,MAAvBC,aAAuB,uEAAP,EAAO;;AACzE,MAAMC,cAAc,MAAMC,kBAAQC,cAAR,EAA1B;AACA,MAAI,CAACF,WAAD,IAAgBA,YAAYG,MAAZ,KAAuB,CAA3C,EAA8C;AAC5C,WAAO,IAAP;AACD;AACDL,SAAOM,GAAP,CAAW,UAACC,KAAD,EAAW;AACpB,QAAMC,aAAaN,YAAYO,IAAZ,CAAiB,UAACC,IAAD;AAAA,aAAUA,KAAKH,KAAL,KAAeA,KAAzB;AAAA,KAAjB,CAAnB;AACA,QAAMI,cAAcV,cAAcQ,IAAd,CAAmB,UAACG,CAAD;AAAA,aAAOA,EAAEL,KAAF,KAAYA,KAAnB;AAAA,KAAnB,CAApB;AACA,QAAII,WAAJ,EAAiB;AACfA,kBAAYE,UAAZ,GAAyBL,cAAcA,WAAWM,aAAlD;AACD;AACF,GAND;AAOAb,kBAAgBA,cAAcc,MAAd,CAAqB,UAACC,EAAD;AAAA,WAAQA,GAAGC,MAAH,IAAaD,GAAGH,UAAxB;AAAA,GAArB,CAAhB;AACA,SAAO,+CAA6B,EAAEK,QAAQnB,WAAV,EAAuBoB,QAAQlB,aAA/B,EAA7B,CAAP;AACD,CAdD;;AAgBA,IAAMmB,QAAQ,eAARA,KAAQ,CAAOpB,MAAP,EAAkB;AAAA,aACwB,MAAMG,kBAAQkB,gBAAR,EAD9B;AAAA,MACtBtB,WADsB,QACtBA,WADsB;AAAA,MACDuB,oBADC,QACTH,MADS;;AAE9B,SAAOrB,YAAYC,WAAZ,EAAyBC,MAAzB,EAAiCsB,oBAAjC,CAAP;AACD,CAHD;;AAKA,IAAMC,cAAc,eAAdA,WAAc,CAAOvB,MAAP,EAAkB;AACpC,MAAI;AACF,UAAMoB,MAAMpB,MAAN,CAAN;AACAwB,eAAW,YAAM;AACfD,kBAAYvB,MAAZ;AACD,KAFD,EAEG,IAFH;AAGD,GALD,CAKE,OAAOyB,KAAP,EAAc;AACdC,YAAQC,GAAR,CAAY,4BAAZ;AACAD,YAAQC,GAAR,CAAYF,KAAZ;AACAD,eAAW,YAAM;AACfD,kBAAYvB,MAAZ;AACD,KAFD,EAEG,KAFH;AAGD;AACF,CAbD;;kBAee;AACboB,cADa;AAEbG;AAFa,C","file":"exchange-rates.js","sourcesContent":["import service from './service';\nimport { saveTerraOracleExchangeRates } from '../influx-store';\n\nconst persistData = async (blockHeight = 0, denoms, exchangeRates = []) => {\n  const votingRates = await service.getVotingRates();\n  if (!votingRates || votingRates.length === 0) {\n    return null;\n  }\n  denoms.map((denom) => {\n    const votingRate = votingRates.find((rate) => rate.denom === denom);\n    const networkRate = exchangeRates.find((r) => r.denom === denom);\n    if (networkRate) {\n      networkRate.swu_amount = votingRate && votingRate.exchange_rate;\n    }\n  });\n  exchangeRates = exchangeRates.filter((er) => er.amount && er.swu_amount);\n  return saveTerraOracleExchangeRates({ height: blockHeight, result: exchangeRates });\n};\n\nconst start = async (denoms) => {\n  const { blockHeight, result: networkExchangeRates } = await service.getExchangeRates();\n  return persistData(blockHeight, denoms, networkExchangeRates);\n};\n\nconst runEverySec = async (denoms) => {\n  try {\n    await start(denoms);\n    setTimeout(() => {\n      runEverySec(denoms);\n    }, 1000);\n  } catch (error) {\n    console.log('Error saving exchange rate');\n    console.log(error);\n    setTimeout(() => {\n      runEverySec(denoms);\n    }, 10000);\n  }\n};\n\nexport default {\n  start,\n  runEverySec,\n};\n"]}