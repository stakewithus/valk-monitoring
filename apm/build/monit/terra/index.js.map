{"version":3,"sources":["../../../src/monit/terra/index.js"],"names":["logger","child","module","getHealthChecks","Backend","nodeChecks","agent","check","list","lcdList","process","env","TERRA_LCD","split","lcdHealthChecks","map","lcd","host","port","LcdBackend","healthCheck","lcdResult","filter","c","project","name","id","CheckID","status","Status","output","Output","notes","Notes","oracleHealthCheck","OracleBackend","oracleResult","result","concat","getLCDAlerts","checks","shouldAlerting","alert","type","endpoint","toUpperCase","Constant","HEALTH_CHECK_STATUS","CRITICAL","note","e","getOracleAlert","prevStatus","handleAlerting","alerts","all","Notification","sendToSlack","sendToTwilio","saveToKVStore","missingData","service","getMissingVote","height","misses","votingPeriod","Math","floor","keyPrefix","getKeyPrefix","kvKey","getKey","kv","upsert","votingMisses","KVStore","getAllByKeyPrefix","lastVotingPeriodForSaving","config","numberOfLastVotingPeriod","lastVotings","getLastVotings","removeOldKeys","getUptimePercentage","missed","length","totalVotingPeriod","percentage","round","run","nodeIp","node","consulPort","Api","alertings","updateHealthCheck","error","fetchExchangeRate","activeDenoms","getActiveDenoms","ExchangeRate","runEverySec","info","toString"],"mappings":"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","file":"index.js","sourcesContent":["import pino from 'pino';\nimport LcdBackend from '../lcd-backend';\nimport OracleBackend from './oracle-backend';\nimport KVStore from '../kv-store';\nimport config from '../../config';\nimport Consul from '../../plugins/backends/consul2/api';\nimport Notification from '../../notification';\nimport service from './service';\nimport Constant from '../constant';\nimport ExchangeRate from './exchange-rates';\nimport { saveTerraOracleMisses } from '../influx-store';\n\nconst logger = pino().child({ module: 'cmd/monit/tera/oracle-backend' });\n\nconst getHealthChecks = async (Backend) => {\n  const nodeChecks = await Backend.agent.check.list();\n  const lcdList = process.env.TERRA_LCD.split(',');\n  const lcdHealthChecks = lcdList.map((lcd) => {\n    const [host, port] = lcd.split(':');\n    return LcdBackend.healthCheck(nodeChecks, 'terra', host, port);\n  });\n  const lcdResult = lcdHealthChecks.filter((c) => c).map((check) => ({\n    project: 'terra',\n    name: 'Terra-LCD-Backend',\n    id: check.CheckID,\n    status: check.Status,\n    output: check.Output,\n    notes: check.Notes,\n  }));\n  const oracleHealthCheck = OracleBackend.healthCheck(nodeChecks);\n  if (!oracleHealthCheck) {\n    return lcdResult;\n  }\n  const oracleResult = {\n    project: 'terra',\n    name: 'Terra-Oracle-Backend',\n    status: oracleHealthCheck.Status,\n    output: oracleHealthCheck.Output,\n    notes: oracleHealthCheck.Notes,\n  };\n  const result = lcdResult.concat(oracleResult);\n  return result;\n};\n\nconst getLCDAlerts = (checks) => {\n  const lcdList = process.env.TERRA_LCD.split(',');\n  return lcdList.map((lcd) => {\n    const [host, port] = lcd.split(':');\n    const check = LcdBackend.healthCheck(checks, 'terra', host, port);\n    if (!LcdBackend.shouldAlerting(check, 'terra', host, port)) {\n      return null;\n    }\n    const alert = {\n      type: 'LCD-Monitoring',\n      project: 'terra',\n      endpoint: lcd,\n      status: check.Status && check.Status.toUpperCase(),\n    };\n    if (alert.status === Constant.HEALTH_CHECK_STATUS.CRITICAL) {\n      alert.note = check.Output;\n    }\n    return alert;\n  }).filter((e) => e);\n};\n\nconst getOracleAlert = (check) => {\n  if (!OracleBackend.shouldAlerting(check.status, check.prevStatus)) {\n    return [];\n  }\n  return [{\n    type: 'Oracle-Monitoring',\n    project: 'terra',\n    status: check.status,\n    prevStatus: check.prevStatus,\n    note: check.note,\n  }];\n};\n\nconst handleAlerting = async (alerts) => {\n  await Promise.all(alerts.map(Notification.sendToSlack));\n  return Notification.sendToTwilio(alerts);\n};\n\nconst saveToKVStore = async (Backend) => {\n  const missingData = await service.getMissingVote();\n  saveTerraOracleMisses({ height: missingData.height, misses: missingData.result });\n  const votingPeriod = Math.floor(+missingData.height / 5);\n  const keyPrefix = OracleBackend.getKeyPrefix();\n  const kvKey = OracleBackend.getKey(votingPeriod);\n  await Backend.kv.upsert(kvKey, +missingData.result);\n  const votingMisses = await KVStore.getAllByKeyPrefix(Backend)(keyPrefix);\n  const lastVotingPeriodForSaving = votingPeriod - config.numberOfLastVotingPeriod;\n  const lastVotings = await OracleBackend.getLastVotings(votingMisses, lastVotingPeriodForSaving);\n  await OracleBackend.removeOldKeys(Backend)(votingMisses, lastVotingPeriodForSaving);\n  return lastVotings;\n};\n\nconst getUptimePercentage = (Backend) => async (votingPeriod) => {\n  const keyPrefix = OracleBackend.getKeyPrefix();\n  const votingMisses = await KVStore.getAllByKeyPrefix(Backend)(keyPrefix);\n  const lastVotings = await OracleBackend.getLastVotings(votingMisses,\n    votingPeriod - config.numberOfLastVotingPeriod);\n  const missed = lastVotings[lastVotings.length - 1] - lastVotings[0];\n  const totalVotingPeriod = lastVotings.length;\n  const percentage = (1 - missed / totalVotingPeriod) * 100;\n  return Math.round(percentage * 100) / 100;\n};\n\nconst run = async ({\n  node: nodeIp, consulPort,\n}) => {\n  try {\n    const Backend = Consul(nodeIp, consulPort).Api;\n    const lastVotings = await saveToKVStore(Backend);\n    const checks = await Backend.agent.check.list();\n    let alertings = getLCDAlerts(checks);\n    if (lastVotings.length > 10) {\n      const oracleHealthCheck = await OracleBackend.updateHealthCheck(Backend)(lastVotings, checks);\n      if (oracleHealthCheck) {\n        alertings = alertings.concat(getOracleAlert(oracleHealthCheck));\n      }\n    }\n    await handleAlerting(alertings);\n  } catch (error) {\n    logger.error('TerraMonitoring-ERROR', error);\n  }\n};\n\nconst fetchExchangeRate = async () => {\n  try {\n    const activeDenoms = await service.getActiveDenoms();\n    ExchangeRate.runEverySec(activeDenoms);\n  } catch (error) {\n    logger.error('fetchExchangeRate-ERROR');\n    logger.info(error && error.toString());\n  }\n};\n\nexport default {\n  getHealthChecks,\n  run,\n  getUptimePercentage,\n  fetchExchangeRate,\n};\n"]}