{"version":3,"sources":["../../../src/monit/terra/index.spec.js"],"names":["Bluebird","promisifyAll","fs","nockSlackCall","post","reply","describe","before","process","env","TERRA_LCD","TERRA_ORACLE_VALIDATOR_ADDRESS","SLACK_INCOMING_WEBHOOK","split","host","port","sinon","stub","Twilio","returns","resolve","it","slackSpy","spy","Notification","twilioSpy","TerraMonitoring","run","node","consulPort","assert","equal","calledOnce","activeDenoms","service","getActiveDenoms","exchangeRate","start"],"mappings":";;;;;;;;;;AAAA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,mBAASC,YAAT,CAAsBC,YAAtB;;AAEA,IAAMC,gBAAgB,eAAhBA,aAAgB,GAAY;AAChC,sBAAK,yBAAL,EACGC,IADH,CACQ,GADR,EAEGC,KAFH,CAES,GAFT,EAEc,IAFd;AAGD,CAJD;;AAMAC,SAAS,oBAAT,EAA+B,YAAM;AACnCC,SAAO,kBAAY;AACjBC,YAAQC,GAAR,CAAYC,SAAZ,GAAwB,gBAAxB;AACAF,YAAQC,GAAR,CAAYE,8BAAZ,GAA6C,qDAA7C;AACAH,YAAQC,GAAR,CAAYG,sBAAZ,GAAqC,yBAArC;;AAHiB,gCAIIJ,QAAQC,GAAR,CAAYC,SAAZ,CAAsBG,KAAtB,CAA4B,GAA5B,CAJJ;AAAA;AAAA,QAIVC,IAJU;AAAA,QAIJC,IAJI;;AAKjB,UAAM,mBAAaD,IAAb,EAAmBC,IAAnB,CAAN;AACA,UAAMZ,eAAN;AACAa,oBAAMC,IAAN,CAAWC,gBAAX,EAAmB,SAAnB,EAA8BC,OAA9B,CAAsC,kBAAQC,OAAR,EAAtC;AACAJ,oBAAMC,IAAN,CAAWC,gBAAX,EAAmB,UAAnB,EAA+BC,OAA/B,CAAuC,kBAAQC,OAAR,EAAvC;AACD,GATD;AAUAC,KAAG,yBAAH,EAA8B,kBAAY;AACxC,QAAMC,WAAWN,gBAAMO,GAAN,CAAUC,sBAAV,EAAwB,aAAxB,CAAjB;AACA,QAAMC,YAAYT,gBAAMO,GAAN,CAAUC,sBAAV,EAAwB,cAAxB,CAAlB;AACA,UAAME,gBAAgBC,GAAhB,CAAoB;AACxBC,YAAM,WADkB;AAExBC,kBAAY;AAFY,KAApB,CAAN;AAIAC,iBAAOC,KAAP,CAAaT,SAASU,UAAtB,EAAkC,IAAlC;AACAF,iBAAOC,KAAP,CAAaN,UAAUO,UAAvB,EAAmC,IAAnC;AACD,GATD;AAUAX,KAAG,0CAAH,EAA+C,kBAAY;AACzD,QAAMY,eAAe,MAAMC,kBAAQC,eAAR,EAA3B;AACA,UAAMC,wBAAaC,KAAb,CAAmBJ,YAAnB,CAAN;AACD,GAHD;AAID,CAzBD","file":"index.spec.js","sourcesContent":["import {\n  assert,\n} from 'chai';\nimport Bluebird from 'bluebird';\nimport fs from 'fs';\nimport nock from 'nock';\nimport sinon from 'sinon';\nimport NockTerraApi from './nock/api';\nimport TerraMonitoring from './index';\nimport Twilio from '../../notification/twilio';\nimport Notification from '../../notification';\nimport service from './service';\nimport exchangeRate from './exchange-rates';\n\nBluebird.promisifyAll(fs);\n\nconst nockSlackCall = async () => {\n  nock('https://hooks.slack.com')\n    .post('/')\n    .reply(200, true);\n};\n\ndescribe('# Monitoring Terra', () => {\n  before(async () => {\n    process.env.TERRA_LCD = '127.0.0.1:1321';\n    process.env.TERRA_ORACLE_VALIDATOR_ADDRESS = 'terravaloper1emscfpz9jjtj8tj2nh70y25uywcakldsj76luz';\n    process.env.SLACK_INCOMING_WEBHOOK = 'https://hooks.slack.com';\n    const [host, port] = process.env.TERRA_LCD.split(':');\n    await NockTerraApi(host, port);\n    await nockSlackCall();\n    sinon.stub(Twilio, 'sendSMS').returns(Promise.resolve());\n    sinon.stub(Twilio, 'sendCall').returns(Promise.resolve());\n  });\n  it('Should run successfully', async () => {\n    const slackSpy = sinon.spy(Notification, 'sendToSlack');\n    const twilioSpy = sinon.spy(Notification, 'sendToTwilio');\n    await TerraMonitoring.run({\n      node: '127.0.0.1',\n      consulPort: 8500,\n    });\n    assert.equal(slackSpy.calledOnce, true);\n    assert.equal(twilioSpy.calledOnce, true);\n  });\n  it('Should fetch exchange rate without error', async () => {\n    const activeDenoms = await service.getActiveDenoms();\n    await exchangeRate.start(activeDenoms);\n  });\n});\n"]}