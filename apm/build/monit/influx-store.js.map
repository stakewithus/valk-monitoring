{"version":3,"sources":["../../src/monit/influx-store.js"],"names":["dbName","blockCommitMeasurement","healthCheckMeasurement","peerCountMeasurement","blockHeightMeasurement","terraOracleMissesMeasurement","terraOracleExchangeRateMeasurement","getTotalMissedBlockCount","network","project","from","to","ret","exec","query","parseTimeCondition","params","series","values","getTotalBlockCount","getMissedBlocksHistory","getMissedBlocksByTimeOfDay","getBlocksByTimeOfDay","getMissedBlocksAlert","type","Constant","CHECK_NAMES","TM_MISSED_BLOCK","out","forEach","sr","v","push","concat","tags","status","getLateBlockTimeAlert","TM_LATE_BLOCK_TIME","getPeerCount","map","name","region","getBlockHeights","saveBlockCommits","blockCommits","points","parseBlockCommitsToPoints","Util","getProjectName","writePoints","saveHealthChecks","host","checkId","note","time","blockHeight","blockTime","nodeId","parseHealthChecksToPoints","savePeerCounts","inbound","outbound","total","parsePeerCountsToPoints","saveBlockHeights","height","parseBlockHeightsToPoints","saveTerraOracleMisses","misses","deleteExistingBlockHeight","measurement","parseTerraOracleMissesToPoints","saveTerraOracleExchangeRates","result","console","log","parseTerraOracleExchangeRatesToPoints","exchangeRates","error","Number","times","all","getTerraOracleMisses","fromBlock","toBlock","limit","parseBlockHeightCondition","val","reverse","getTerraOracleExchangeRates","reduce","acc","cur","denom","amount","swu_amount","block","fields","block_height","fieldToString","missed","timestamp","check_id","block_time","startOf","valueOf","rate","input","String"],"mappings":"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","file":"influx-store.js","sourcesContent":["/* eslint-disable no-use-before-define */\nimport moment from 'moment';\nimport {\n  Query,\n  Writer,\n} from '../plugins/influxdb-client';\nimport Constant from './constant';\nimport Util from '../common/util';\n\nconst dbName = 'apm';\nconst blockCommitMeasurement = 'block_commits';\nconst healthCheckMeasurement = 'health_checks';\nconst peerCountMeasurement = 'peer_counts';\nconst blockHeightMeasurement = 'block_heights';\nconst terraOracleMissesMeasurement = 'terra_oracle_misses';\nconst terraOracleExchangeRateMeasurement = 'terra_oracle_exchange_rates';\n\nconst getTotalMissedBlockCount = async ({\n  // host,\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({\n    // host\n  })(dbName).exec({\n    query: `SELECT COUNT(block_height) FROM ${blockCommitMeasurement} WHERE network=$network AND project=$project AND missed='true' ${parseTimeCondition({ from, to })}`,\n    params: {\n      from,\n      to,\n      network,\n      project,\n    },\n  });\n  if (!ret[0].series) return 0;\n  return ret[0].series[0].values[0][1];\n};\n\nconst getTotalBlockCount = async ({\n  // host,\n  network,\n  project,\n}) => {\n  const ret = await Query({\n    // host\n  })(dbName).exec({\n    query: `SELECT COUNT(block_height) FROM ${blockCommitMeasurement} WHERE network=$network AND project=$project`,\n    params: {\n      network,\n      project,\n    },\n  });\n  if (!ret[0].series) return 0;\n  return ret[0].series[0].values[0][1];\n};\n\nconst getMissedBlocksHistory = async ({\n  // host,\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({\n    // host\n  })(dbName).exec({\n    query: `SELECT COUNT(block_height) FROM ${blockCommitMeasurement} WHERE network=$network AND project=$project AND missed='true' ${parseTimeCondition({ from, to })} GROUP BY time(1d) fill(0)`,\n    params: {\n      network,\n      project,\n      from,\n      to,\n    },\n  });\n  if (!ret[0].series) return [];\n  return ret[0].series[0].values;\n};\n\nconst getMissedBlocksByTimeOfDay = async ({\n  // host,\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({\n    // host\n  })(dbName).exec({\n    query: `SELECT COUNT(block_height) FROM ${blockCommitMeasurement} WHERE network=$network AND project=$project AND missed='true' ${parseTimeCondition({ from, to })} GROUP BY time(1h) fill(none) ORDER BY time ASC`,\n    params: {\n      network,\n      project,\n      from,\n      to,\n    },\n  });\n  if (!ret[0].series) return [];\n  return ret[0].series[0].values;\n};\n\nconst getBlocksByTimeOfDay = async ({\n  // host,\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({\n    // host\n  })(dbName).exec({\n    query: `SELECT COUNT(block_height) FROM ${blockCommitMeasurement} WHERE network=$network AND project=$project ${parseTimeCondition({ from, to })} GROUP BY time(1h) fill(none) ORDER BY time ASC`,\n    params: {\n      network,\n      project,\n      from,\n      to,\n    },\n  });\n  if (!ret[0].series) return [];\n  return ret[0].series[0].values;\n};\n\nconst getMissedBlocksAlert = async ({\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({})(dbName).exec({\n    query: `SELECT count(block_height) FROM ${healthCheckMeasurement} WHERE network=$network AND project=$project AND type=$type ${parseTimeCondition({ from, to })} GROUP BY time(1h),status fill(0)`,\n    params: {\n      network,\n      project,\n      from,\n      to,\n      type: Constant.CHECK_NAMES.TM_MISSED_BLOCK,\n    },\n  });\n  const out = [];\n  if (!ret[0].series) return [];\n  ret[0].series.forEach((sr) => sr.values.forEach((v) => {\n    out.push(v.concat(sr.tags.status));\n  }));\n  return out;\n};\n\nconst getLateBlockTimeAlert = async ({\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({})(dbName).exec({\n    query: `SELECT count(block_height) FROM ${healthCheckMeasurement} WHERE network=$network AND project=$project AND type=$type ${parseTimeCondition({ from, to })} GROUP BY time(1h),status fill(none)`,\n    params: {\n      network,\n      project,\n      from,\n      to,\n      type: Constant.CHECK_NAMES.TM_LATE_BLOCK_TIME,\n    },\n  });\n  const out = [];\n  if (!ret[0].series) return [];\n  ret[0].series.forEach((sr) => sr.values.forEach((v) => {\n    out.push(v.concat(sr.tags.status));\n  }));\n  return out;\n};\n\nconst getPeerCount = async ({\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({})(dbName).exec({\n    query: `SELECT total FROM ${peerCountMeasurement} WHERE network=$network AND project=$project ${parseTimeCondition({ from, to })} GROUP BY region`,\n    params: {\n      network,\n      project,\n      from,\n      to,\n    },\n  });\n  if (!ret[0].series) return [];\n  return ret[0].series.map((sr) => ({\n    name: sr.tags.region,\n    values: sr.values,\n  }));\n};\n\nconst getBlockHeights = async ({\n  network,\n  project,\n  from,\n  to,\n}) => {\n  const ret = await Query({})(dbName).exec({\n    query: `SELECT max(height) FROM ${blockHeightMeasurement} WHERE network=$network AND project=$project ${parseTimeCondition({ from, to })} GROUP BY region,time(1h) fill(none)`,\n    params: {\n      network,\n      project,\n      from,\n      to,\n    },\n  });\n  if (!ret[0].series) return [];\n  return ret[0].series.map((sr) => ({\n    name: sr.tags.region,\n    values: sr.values,\n  }));\n};\n\nconst saveBlockCommits = async ({\n  // host,\n  network,\n  project,\n  blockCommits = [],\n}) => {\n  const points = parseBlockCommitsToPoints(blockCommits, {\n    network,\n    project: Util.getProjectName(project),\n  });\n  const ret = await Writer({\n    // host\n  }).writePoints(dbName)(points);\n  return ret;\n};\n\nconst saveHealthChecks = async ({\n  host,\n  network,\n  project,\n  status,\n  checkId,\n  note,\n  time,\n  blockHeight,\n  blockTime,\n  nodeId,\n  region,\n  type,\n}) => {\n  const points = parseHealthChecksToPoints({\n    host,\n    network,\n    project: Util.getProjectName(project),\n    status,\n    checkId,\n    note,\n    time,\n    blockHeight,\n    blockTime,\n    nodeId,\n    region,\n    type,\n  });\n  const ret = await Writer({\n    // host\n  }).writePoints(dbName)(points);\n  return ret;\n};\n\nconst savePeerCounts = async ({\n  network,\n  project,\n  region,\n  inbound,\n  outbound,\n  total,\n}) => {\n  const points = parsePeerCountsToPoints({\n    network,\n    project: Util.getProjectName(project),\n    region,\n    inbound,\n    outbound,\n    total,\n  });\n  const ret = await Writer({}).writePoints(dbName)(points);\n  return ret;\n};\n\nconst saveBlockHeights = async ({\n  network,\n  project,\n  region,\n  height,\n  time,\n}) => {\n  const points = parseBlockHeightsToPoints({\n    network,\n    project: Util.getProjectName(project),\n    region,\n    height,\n    time,\n  });\n  const ret = await Writer({}).writePoints(dbName)(points);\n  return ret;\n};\n\nconst saveTerraOracleMisses = async ({ height, misses }) => {\n  await deleteExistingBlockHeight({ height, measurement: terraOracleMissesMeasurement });\n  const points = parseTerraOracleMissesToPoints({ height, misses });\n  return Writer({}).writePoints(dbName)(points);\n};\n\nconst saveTerraOracleExchangeRates = async ({ height, result }) => {\n  try {\n    console.log('Before deleting existing blocks');\n    await deleteExistingBlockHeight({ height, measurement: terraOracleExchangeRateMeasurement });\n    const points = parseTerraOracleExchangeRatesToPoints({ height, exchangeRates: result });\n    console.log('Before saving exchange rates');\n    return Writer({}).writePoints(dbName)(points);\n  } catch (error) {\n    console.log('Saving exchange rates error');\n    console.log(error);\n  }\n};\n\nconst deleteExistingBlockHeight = async ({ height, measurement }) => {\n  const [{ series }] = await Query({})(dbName).exec({\n    query: `SELECT time,block_height FROM ${measurement} WHERE block_height=$height`,\n    params: {\n      height: Number(height),\n    },\n  });\n  if (!series) return;\n  const times = series[0].values.map((v) => v[0]);\n  await Promise.all(times.map(async (time) => Query({})(dbName).exec({\n    query: `DELETE FROM ${measurement} WHERE time=$time`,\n    params: {\n      time,\n    },\n  })));\n};\n\nconst getTerraOracleMisses = async ({\n  from, to, fromBlock, toBlock, limit,\n}) => {\n  const ret = await Query({})(dbName).exec({\n    query: `SELECT block_height,misses FROM ${terraOracleMissesMeasurement} WHERE 1=1 ${parseTimeCondition({ from, to })} ${parseBlockHeightCondition({ fromBlock, toBlock })} ORDER BY time DESC LIMIT ${limit}`,\n    params: {\n      from,\n      to,\n      fromBlock,\n      toBlock,\n    },\n  });\n  if (!ret[0].series) return [];\n  return ret[0].series[0].values.map((val) => ({\n    height: Number(val[1]),\n    misses: Number(val[2]),\n  })).reverse();\n};\n\nconst getTerraOracleExchangeRates = async ({\n  from, to, fromBlock, toBlock, limit,\n}) => {\n  const ret = await Query({})(dbName).exec({\n    query: `SELECT block_height,amount,swu_amount FROM ${terraOracleExchangeRateMeasurement} WHERE 1=1 ${parseTimeCondition({ from, to })} ${parseBlockHeightCondition({ fromBlock, toBlock })} GROUP BY denom ORDER BY time DESC LIMIT ${limit}`,\n    params: {\n      from,\n      to,\n      fromBlock,\n      toBlock,\n    },\n  });\n  if (!ret[0].series) return [];\n  return ret[0].series.reduce((acc, cur) => {\n    acc[cur.tags.denom] = cur.values.map((val) => ({\n      height: val[1],\n      amount: val[2],\n      swu_amount: val[3],\n    })).reverse();\n    return acc;\n  }, {});\n};\n\n// #region helpersheight: Number(height)\nconst parseTimeCondition = ({\n  from,\n  to,\n}) => {\n  let out = '';\n  if (from) {\n    out += ' AND time>=$from';\n  }\n  if (to) {\n    out += ' AND time<=$to';\n  }\n  return out;\n};\n\nconst parseBlockHeightCondition = ({\n  fromBlock,\n  toBlock,\n}) => {\n  let out = '';\n  if (fromBlock) {\n    out += ' AND block_height>=$fromBlock';\n  }\n  if (toBlock) {\n    out += ' AND block_height<=$toBlock';\n  }\n  return out;\n};\n\nconst parseBlockCommitsToPoints = (blockCommits = [], {\n  network,\n  project,\n}) => blockCommits.map((block) => ({\n  measurement: blockCommitMeasurement,\n  tags: {\n    network,\n    project,\n  },\n  fields: {\n    block_height: fieldToString(block.height),\n    missed: fieldToString(block.missed),\n  },\n  timestamp: block.time,\n}));\n\nconst parseHealthChecksToPoints = ({\n  host,\n  network,\n  project,\n  status,\n  checkId,\n  note,\n  time,\n  blockHeight,\n  blockTime,\n  nodeId,\n  region,\n  type,\n}) => [{\n  measurement: healthCheckMeasurement,\n  tags: {\n    nodeId,\n    region,\n    network,\n    project,\n    type,\n    status,\n  },\n  fields: {\n    host: fieldToString(host),\n    note: fieldToString(note),\n    check_id: fieldToString(checkId),\n    block_height: fieldToString(blockHeight),\n    block_time: fieldToString(blockTime),\n  },\n  timestamp: time,\n}];\n\nconst parsePeerCountsToPoints = ({\n  network,\n  project,\n  region,\n  inbound,\n  outbound,\n  total,\n}) => [{\n  measurement: peerCountMeasurement,\n  tags: {\n    network,\n    project,\n    region,\n  },\n  fields: {\n    inbound: fieldToString(inbound),\n    outbound: fieldToString(outbound),\n    total: fieldToString(total),\n  },\n  timestamp: moment().startOf('h').valueOf(),\n}];\n\nconst parseBlockHeightsToPoints = ({\n  network,\n  project,\n  region,\n  height,\n  time,\n}) => [{\n  measurement: blockHeightMeasurement,\n  tags: {\n    network,\n    project,\n    region,\n  },\n  fields: {\n    height,\n  },\n  timestamp: time,\n}];\n\nconst parseTerraOracleMissesToPoints = ({ height, misses }) => [{\n  measurement: terraOracleMissesMeasurement,\n  tags: {\n    note: fieldToString(''),\n  },\n  fields: {\n    misses: Number(misses),\n    block_height: Number(height),\n  },\n}];\n\nconst parseTerraOracleExchangeRatesToPoints = ({\n  height, exchangeRates = [],\n}) => exchangeRates.map((rate) => ({\n  measurement: terraOracleExchangeRateMeasurement,\n  tags: {\n    denom: rate.denom,\n  },\n  fields: {\n    amount: Number(rate.amount),\n    swu_amount: Number(rate.swu_amount),\n    block_height: Number(height),\n  },\n}));\n\nconst fieldToString = (input) => JSON.stringify(String(input));\n// #endregion\n\nexport {\n  saveBlockCommits,\n  saveHealthChecks,\n  savePeerCounts,\n  saveBlockHeights,\n  saveTerraOracleMisses,\n  saveTerraOracleExchangeRates,\n  getTotalMissedBlockCount,\n  getMissedBlocksHistory,\n  getMissedBlocksByTimeOfDay,\n  getMissedBlocksAlert,\n  getLateBlockTimeAlert,\n  getPeerCount,\n  getTotalBlockCount,\n  getBlocksByTimeOfDay,\n  getBlockHeights,\n  getTerraOracleMisses,\n  getTerraOracleExchangeRates,\n};\n\nexport default {\n  saveBlockCommits,\n  saveHealthChecks,\n  savePeerCounts,\n  saveBlockHeights,\n  saveTerraOracleMisses,\n  saveTerraOracleExchangeRates,\n  getTotalMissedBlockCount,\n  getMissedBlocksHistory,\n  getMissedBlocksByTimeOfDay,\n  getMissedBlocksAlert,\n  getLateBlockTimeAlert,\n  getPeerCount,\n  getTotalBlockCount,\n  getBlocksByTimeOfDay,\n  getBlockHeights,\n  getTerraOracleMisses,\n  getTerraOracleExchangeRates,\n};\n"]}