{"version":3,"sources":["../../src/health/index.js"],"names":["Bluebird","promisifyAll","fs","logger","child","module","getDistinctServices","nodeList","isSingleHost","svcPrefix","services","reduce","acc","n","nodeServiceList","critMet","filter","svc","startsWith","critNew","indexOf","map","split","concat","sort","getHealthMainRow","distSvc","showRawData","nodeID","nodeAddress","nodeRegion","nodeCheckList","nodeChecks","nid","slice","initRow","svcRow","aacc","prjName","serviceName","Util","getServiceName","svcIdx","svcChecks","c","checkStatus","chkName","Status","numPass","s","length","numWarn","numFail","svcStatus","chalk","green","yellow","red","fullRow","getTableDataByNode","node","service","showOutput","production","console","log","checkRecords","check","ServiceID","content","Name","CheckID","Output","header","row","showHealthService","serverConfig","serviceId","find","nodes","offlineNodes","deRegisterServices","projects","p","name","includes","firstNode","tableData","table","Table","head","tableBody","push","data","t","toString","body","health","nodeIp","nomadPort","consulPort","configDir","config","output","nomadToken","consulToken","prodConfigFile","info","Core","getNodeInfos","tableHeaders"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable max-len */\n\nimport fs from 'fs';\nimport Bluebird from 'bluebird';\nimport pino from 'pino';\nimport chalk from 'chalk';\nimport Table from 'cli-table';\nimport Util from '../common/util';\n\nimport Core from '../core';\n\nBluebird.promisifyAll(fs);\nconst logger = pino().child({ module: 'cmd/health' });\n\nconst getDistinctServices = (nodeList, isSingleHost) => {\n  const svcPrefix = 'bcl-';\n  const services = nodeList.reduce((acc, n) => {\n    const { nodeServiceList } = n;\n    const critMet = nodeServiceList.filter((svc) => svc.startsWith(svcPrefix));\n    let critNew = critMet.filter((svc) => acc.indexOf(svc) === -1);\n    if (isSingleHost) {\n      critNew = critNew.map((svc) => svc.split(':')[0]);\n    }\n    return acc.concat(critNew);\n  }, []);\n  services.sort();\n  return [...new Set(services)];\n};\n\nconst getHealthMainRow = (distSvc, showRawData, isSingleHost) => (acc, n) => {\n  const {\n    nodeID,\n    nodeAddress,\n    nodeRegion,\n    nodeServiceList,\n    nodeCheckList,\n    nodeChecks,\n  } = n;\n  const nid = showRawData ? `${nodeID.slice(0, 8)}..` : nodeID;\n  const initRow = [nid, nodeAddress, nodeRegion];\n  const svcRow = distSvc.reduce((aacc, prjName) => {\n    const serviceName = Util.getServiceName(prjName, isSingleHost, nodeRegion);\n    const svcIdx = nodeServiceList.indexOf(serviceName);\n    if (svcIdx === -1) return aacc.concat('-');\n    const svcPrefix = `service:${serviceName}`;\n    const svcChecks = nodeCheckList.filter((c) => c.startsWith(svcPrefix));\n    const checkStatus = svcChecks.map((chkName) => nodeChecks[chkName].Status);\n    const numPass = checkStatus.filter((s) => s === 'passing').length;\n    const numWarn = checkStatus.filter((s) => s === 'warning').length;\n    const numFail = checkStatus.filter((s) => s === 'critical').length;\n    const svcStatus = showRawData ? `${numPass} (pass), ${numWarn} (warn), ${numFail} (critical)`\n      : `(${chalk.green(numPass)}, ${chalk.yellow(numWarn)}, ${chalk.red(numFail)})`;\n    return aacc.concat(svcStatus);\n  }, []);\n  const fullRow = initRow.concat(svcRow);\n  return acc.concat([fullRow]);\n};\n\nconst getTableDataByNode = (node, service, showOutput, production) => {\n  if (!node) {\n    console.log('Node check is empty!');\n    return {};\n  }\n  const checkRecords = Object.values(node.nodeChecks)\n    .filter((check) => check.ServiceID === Util.getServiceName(service, production, node.nodeRegion));\n  const checkStatus = checkRecords.reduce((acc, check) => {\n    const content = check.Status;\n    if (showOutput) {\n      if (check.Name === showOutput) {\n        acc[check.Name] = `${check.CheckID} ${content} (${check.Output})`;\n      }\n    } else {\n      acc[check.Name] = content;\n    }\n    return acc;\n  }, {});\n  const header = ['NodeID', 'IP', 'Region'].concat(Object.keys(checkStatus));\n  const row = [`${node.nodeID.slice(0, 8)}..`, node.nodeAddress, node.nodeRegion].concat(Object.values(checkStatus));\n  return {\n    header,\n    row,\n  };\n};\nconst showHealthService = async (\n  service, distSvc, nodeList, showOutput, production, serverConfig,\n) => {\n  const svcPrefix = 'bcl-';\n  const serviceId = `${svcPrefix}${service}`;\n  if (!distSvc.find((s) => s.startsWith(serviceId))) {\n    return console.log('Service not found!');\n  }\n  const nodes = nodeList.filter((n) => {\n    if (!n) {\n      return null;\n    }\n    const offlineNodes = (serverConfig && serverConfig.deRegisterServices[service]) || [];\n    return production\n      ? (n.projects.find((p) => p.name === service) && !offlineNodes.includes(n.nodeRegion))\n      : Object.values(n.nodeChecks)\n        .find((check) => check.ServiceID === Util.getServiceName(service, production, n.nodeRegion));\n  });\n  const [firstNode] = nodes;\n  const tableData = getTableDataByNode(firstNode, service, showOutput, production);\n  const table = new Table({\n    head: tableData.header,\n  });\n  const tableBody = [];\n  tableBody.push(tableData.row);\n  nodes.slice(1, nodes.length).map((node) => {\n    const data = getTableDataByNode(node, service, showOutput, production);\n    return tableBody.push(data.row);\n  });\n  tableBody.map((t) => table.push(t));\n  console.log(table.toString());\n  return {\n    header: tableData.header,\n    body: tableBody,\n  };\n};\n\nconst health = async ({\n  node: nodeIp,\n  nomadPort,\n  consulPort,\n  service,\n  config: configDir,\n  output: showOutput,\n  showRawData,\n  nomadToken,\n  consulToken,\n  production,\n  prodConfigFile,\n}) => {\n  logger.info('Retrieving cluster info...');\n  const { nodeList, serverConfig } = await Core.getNodeInfos({\n    nodeIp, nomadPort, consulPort, production, prodConfigFile,\n  });\n  const distSvc = getDistinctServices(nodeList, production);\n  if (service) {\n    return showHealthService(service, distSvc, nodeList, showOutput, production, serverConfig);\n  }\n  const tableHeaders = ['NodeID', 'IP', 'Region'].concat(distSvc);\n  const tableBody = nodeList.reduce(getHealthMainRow(distSvc, showRawData, production), []);\n  const table = new Table({\n    head: tableHeaders,\n  });\n  tableBody.map((t) => table.push(t));\n  console.log(table.toString());\n\n  return {\n    header: tableHeaders,\n    body: tableBody,\n  };\n};\n\nexport default health;\n"]}