{"version":3,"sources":["../src/app.js"],"names":["logger","child","module","dotenv","config","info","args","yargs","usage","command","yags","option","describe","alias","default","demandOption","argv","node","nomadPort","consulPort","nomadToken","consulToken","configDir","production","prodConfigFile","then","process","exit","catch","err","console","log","Monit","start","server","help"],"mappings":"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","file":"app.js","sourcesContent":["import yargs from 'yargs';\nimport pino from 'pino';\nimport dotenv from 'dotenv';\nimport Monit from './monit';\n\nimport syncCmd2 from './sync2';\n\nimport healthCmd from './health';\n\nimport server from './server';\n\nconst logger = pino().child({ module: 'app.js' });\n\ndotenv.config();\nlogger.info('Launching APM-AGENT');\n\nconst args = yargs  // eslint-disable-line\n  .usage('Usage: $0 <command> [options]')\n  .command(\n    ['sync'],\n    'Sync the Nomad and Consul APM Agent',\n    (yags) => {\n      //\n      yags.option('node', {\n        describe: 'Node for the APM Agent to query',\n      })\n        .option('nomad-port', {\n          alias: 'np',\n          default: 4646,\n        })\n        .option('consul-port', {\n          alias: 'cp',\n          default: 8500,\n        })\n        .option('nomad-token', {\n          alias: 'nt',\n        })\n        .option('consul-token', {\n          alias: 'ct',\n        })\n        .option('config', {\n          default: 'github',\n        })\n        .option('production')\n        .option('prod-config-file')\n        .describe('production', 'Run monit in production mode without nomad')\n        .describe('prod-config-file', 'Custom config file for production')\n        .describe('consul-port', 'Port Consul Agent is listening on')\n        .describe('nomad-port', 'Port Nomad Agent is listening on')\n        .describe('consul-token', 'Consul ACL Token')\n        .describe('nomad-token', 'Nomad ACL Token')\n        .describe('config', 'Configuration directory to read Nomad Job Files')\n        .demandOption(['node']);\n    },\n    (argv) => {\n      const {\n        node,\n        nomadPort,\n        consulPort,\n        nomadToken,\n        consulToken,\n        config: configDir,\n        production,\n        prodConfigFile,\n      } = argv;\n\n      syncCmd2(\n        node,\n        nomadPort,\n        consulPort,\n        configDir,\n        { nomadToken, consulToken },\n        production,\n        prodConfigFile,\n      ).then(() => {\n        process.exit(0);\n      }).catch((err) => {\n        if (err) console.log(err);\n        process.exit(1);\n      });\n    },\n  )\n  .command(\n    ['health'],\n    'Get cluster health from Nomad and Consul through APM agent',\n    (yags) => {\n      //\n      yags.option('node', {\n        describe: 'Node for the APM Agent to query',\n      })\n        .option('nomad-port', {\n          alias: 'np',\n          default: 4646,\n        })\n        .option('consul-port', {\n          alias: 'cp',\n          default: 8500,\n        })\n        .option('nomad-token', {\n          alias: 'nt',\n        })\n        .option('consul-token', {\n          alias: 'ct',\n        })\n        .option('config', {\n          default: 'github',\n        })\n        .option('service', {\n          alias: 's',\n        })\n        .option('output', {\n          alias: 'o',\n        })\n        .option('production')\n        .option('prod-config-file')\n        .describe('production', 'Run monit in production mode without nomad')\n        .describe('prod-config-file', 'Custom config file for production')\n        .describe('consul-port', 'Port Consul Agent is listening on')\n        .describe('nomad-port', 'Port Nomad Agent is listening on')\n        .describe('consul-token', 'Consul ACL Token')\n        .describe('nomad-token', 'Nomad ACL Token')\n        .describe('config', 'Configuration directory to read Nomad Job Files')\n        .describe('service', 'Service name, fx: kava')\n        .describe('output', 'Show output of health check name, fx: tm-missed-blocks')\n        .demandOption(['node']);\n    },\n    (argv) => {\n      healthCmd(argv).then(() => {\n        process.exit(0);\n      }).catch((err) => {\n        if (err) console.log(err);\n        process.exit(1);\n      });\n    },\n  )\n  .command(\n    ['monit [node]'],\n    'Monitor and Update node state',\n    (yags) => {\n      //\n      yags.option('node', {\n        describe: 'Node for the APM Agent to query',\n        alias: 'n',\n        default: '127.0.0.1',\n      })\n        .option('config', {\n          describe: 'Config folder path',\n          alias: 'c',\n        })\n        .option('nomad-port', {\n          default: 4646,\n        })\n        .option('consul-port', {\n          default: 8500,\n        })\n        .option('verbose', {\n          alias: 'v',\n        })\n        .option('production')\n        .option('prod-config-file')\n        .option('nomad-token')\n        .option('consul-token')\n        .describe('consul-port', 'Port Consul Agent is listening on')\n        .describe('nomad-port', 'Port Nomad Agent is listening on')\n        .describe('consul-token', 'Consul ACL Token')\n        .describe('nomad-token', 'Nomad ACL Token')\n        .describe('verbose', 'Show logs')\n        .describe('production', 'Run monit in production mode without nomad')\n        .describe('prod-config-file', 'Custom config file for production')\n        .demandOption(['node']);\n    },\n    (argv) => {\n      logger.info('Starting Monit...');\n      Monit.start(argv);\n    },\n  )\n  .command(\n    ['server [node]'],\n    'Monitor and Update node state',\n    (yags) => {\n      yags.option('node', {\n        describe: 'Node for the APM Agent to query',\n        alias: 'n',\n        default: '127.0.0.1',\n      })\n        .option('nomad-port', {\n          default: 4646,\n        })\n        .option('consul-port', {\n          default: 8500,\n        })\n        .option('port', {\n          describe: 'Http port',\n          alias: 'p',\n          default: 3000,\n        })\n        .option('production')\n        .option('prod-config-file')\n        .describe('production', 'Run monit in production mode without nomad')\n        .describe('prod-config-file', 'Custom config file for production')\n        .demandOption(['node']);\n    },\n    (argv) => {\n      logger.info('Starting Server...');\n      server.start(argv);\n    },\n  )\n  .help()\n  .argv;\n"]}