{"version":3,"sources":["../../../src/plugins/influxdb-client/query.spec.js"],"names":["describe","host","query","beforeEach","done","nock","cleanAll","it","dbName","q","params","network","post","db","reply","results","statement_id","error","res","exec","assert","deepStrictEqual","equal","message","series","name","columns","values"],"mappings":"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","file":"query.spec.js","sourcesContent":["import nock from 'nock';\nimport {\n  assert,\n} from 'chai';\nimport {\n  Query,\n} from './index';\n\ndescribe('InfluxDB Query', () => {\n  const host = 'http://127.0.0.1:8086';\n  const query = Query({\n    host,\n  });\n\n  beforeEach((done) => {\n    nock.cleanAll();\n    done();\n  });\n\n  describe('Read data', () => {\n    it('Should return database not found error', async () => {\n      const dbName = 'apm1';\n      const q = 'select * from blocks where network=$network';\n      const params = {\n        network: 'kava',\n      };\n      nock(host)\n        .post('/query')\n        .query({\n          db: dbName,\n          q,\n          params: JSON.stringify(params),\n        })\n        .reply(200, {\n          results: [{\n            statement_id: 0,\n            error: 'database not found: apm1',\n          }],\n        });\n      const res = await query(dbName).exec({\n        query: q,\n        params,\n      });\n      assert.deepStrictEqual(res, [{\n        statement_id: 0,\n        error: 'database not found: apm1',\n      }]);\n    });\n\n    it('Should throw an error(query invalid)', async () => {\n      const dbName = 'apm';\n      const q = 'select * from blocks where network=$network where';\n      const params = {\n        network: 'kava',\n      };\n      nock(host)\n        .post('/query')\n        .query({\n          db: dbName,\n          q,\n          params: JSON.stringify(params),\n        })\n        .reply(200, {\n          error: 'error parsing query: found WHERE, expected ; at line 1, char 45',\n        });\n      try {\n        await query(dbName).exec({\n          query: q,\n          params,\n        });\n      } catch (error) {\n        assert.equal(error.message, 'error parsing query: found WHERE, expected ; at line 1, char 45');\n      }\n    });\n\n    it('Should return an array of results', async () => {\n      const dbName = 'apm';\n      const q = 'select time,block_height from blocks where network=$network;select time,missed_count from blocks where network=$network';\n      const params = {\n        network: 'kava',\n      };\n      nock(host)\n        .post('/query')\n        .query({\n          db: dbName,\n          q,\n          params: JSON.stringify(params),\n        })\n        .reply(200, {\n          results: [{\n            statement_id: 0,\n            series: [{\n              name: 'blocks',\n              columns: ['time', 'block_height'],\n              values: [\n                ['2019-08-15T12:47:20.194Z', 1092345],\n                ['2019-08-15T12:47:20.694Z', 1092345],\n              ],\n            }],\n          }, {\n            statement_id: 1,\n            series: [{\n              name: 'blocks',\n              columns: ['time', 'missed_count'],\n              values: [\n                ['2019-08-15T12:47:20.194Z', 25],\n                ['2019-08-15T12:47:20.694Z', 22],\n              ],\n            }],\n          }],\n        });\n      const res = await query(dbName).exec({\n        query: q,\n        params,\n      });\n      assert.deepStrictEqual(res, [{\n        statement_id: 0,\n        series: [{\n          name: 'blocks',\n          columns: ['time', 'block_height'],\n          values: [\n            ['2019-08-15T12:47:20.194Z', 1092345],\n            ['2019-08-15T12:47:20.694Z', 1092345],\n          ],\n        }],\n      },\n      {\n        statement_id: 1,\n        series: [{\n          name: 'blocks',\n          columns: ['time', 'missed_count'],\n          values: [\n            ['2019-08-15T12:47:20.194Z', 25],\n            ['2019-08-15T12:47:20.694Z', 22],\n          ],\n        }],\n      },\n      ]);\n    });\n  });\n});\n"]}