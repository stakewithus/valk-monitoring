{"version":3,"sources":["../../../../src/plugins/chains/tendermint/index.js"],"names":["logger","child","module","getValidatorCommits","block","validatorSettings","projectName","networkName","validatorAddresses","Util","getValidatorAddress","lastCommit","result","last_commit","validatorAddressInCommits","precommits","signatures","filter","c","map","validator_address","uniqueValidatorAddresses","v","name","address","commit","includes","getNodeState","host","port","timeout","hrstart","process","hrtime","all","status","netInfo","hrend","networkInfo","meta","id","node_info","block_height","sync_info","latest_block_height","catching_up","validator_commits","block_time","Math","floor","Date","latest_block_time","getTime","total_peers","peers","length","inbound_peers","p","is_outbound","outbound_peers","query_response_time_ms","qs","height","error","e","toString","console","log","getBlocks","fromBlock","toBlock","blockKeys","i","push","key","r"],"mappings":"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","file":"index.js","sourcesContent":["import pino from 'pino';\nimport httpRequest from '../../../common/http_client';\nimport Util from '../../../common/util';\n\nconst logger = pino().child({ module: 'plugins/chain/tendermint' });\n\nfunction getValidatorCommits(block, validatorSettings, projectName, networkName) {\n  const validatorAddresses = Util.getValidatorAddress(\n    validatorSettings,\n    projectName,\n    networkName,\n  );\n  const lastCommit = block.result.block.last_commit;\n  const validatorAddressInCommits = (lastCommit.precommits || lastCommit.signatures)\n    .filter((c) => c)\n    .map((c) => c.validator_address);\n  const uniqueValidatorAddresses = [...new Set(validatorAddressInCommits)];\n  return validatorAddresses.map((v) => ({\n    name: v.name,\n    address: v.address,\n    commit: uniqueValidatorAddresses.includes(v.address),\n  }));\n}\n\nconst getNodeState = async (host, port, projectName, networkName, timeout, validatorSettings) => {\n  try {\n    const hrstart = process.hrtime();\n    const [status, netInfo] = await Promise.all([\n      httpRequest(host, port, {})('/status')({ timeout }),\n      httpRequest(host, port, {})('/net_info')({ timeout }),\n    ]);\n    const hrend = process.hrtime(hrstart);\n    if (!status || !netInfo || !netInfo.result) {\n      return null;\n    }\n    const networkInfo = {\n      projectName,\n      networkName,\n      meta: {\n        id: status.result.node_info.id,\n      },\n      block_height: +status.result.sync_info.latest_block_height,\n      catching_up: status.result.sync_info.catching_up,\n      validator_commits: [],\n      block_time: Math.floor(new Date(status.result.sync_info.latest_block_time).getTime() / 1000),\n      total_peers: netInfo.result.peers.length,\n      inbound_peers: netInfo.result.peers.filter((p) => !p.is_outbound).length,\n      outbound_peers: netInfo.result.peers.filter((p) => p.is_outbound).length,\n      query_response_time_ms: Math.floor(hrend[1] / 1000000),\n    };\n    const block = await httpRequest(host, port, {})('/block')({\n      timeout,\n      qs: { height: networkInfo.block_height },\n    });\n    if (!block || !block.result || block.error) {\n      return networkInfo;\n    }\n    networkInfo.validator_commits = getValidatorCommits(\n      block,\n      validatorSettings,\n      projectName,\n      networkName,\n    );\n    return networkInfo;\n  } catch (e) {\n    logger.error('Tendermint get node state error', e && e.toString());\n    console.log(host, port, projectName, networkName);\n    return null;\n  }\n};\n\nconst getBlocks = (host, port, timeout) => async (fromBlock, toBlock) => {\n  const blockKeys = [];\n  for (let i = +fromBlock; i <= +toBlock; i += 1) {\n    blockKeys.push(i);\n  }\n  try {\n    const result = await Promise.all(blockKeys.map((key) => httpRequest(host, port, {})('/block')({\n      timeout,\n      qs: { height: key },\n    })));\n    return result.filter((r) => r).map((r) => r.result);\n  } catch (e) {\n    logger.error('getBlocks', e && e.toString());\n    return [];\n  }\n};\n\nexport default {\n  getNodeState,\n  getBlocks,\n};\n"]}