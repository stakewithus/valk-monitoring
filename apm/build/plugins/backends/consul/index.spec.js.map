{"version":3,"sources":["../../../../src/plugins/backends/consul/index.spec.js"],"names":["Bluebird","promisifyAll","fs","nomadClient","describe","jobLayout","before","done","syncAndCreateJob","nomadHCL","readFileAsync","path","join","__dirname","job","Job","fromHCL","sync","getDetail","getAllocations","then","result","console","log","catch","it","initMesh","mesh","res","health"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEAA,mBAASC,YAAT,CAAsBC,YAAtB;;AAEA,IAAMC,cAAc,mBAAY,WAAZ,EAAyB,IAAzB,EAA+B,EAA/B,CAApB;AACA;;AAEAC,SAAS,yBAAT,EAAoC,YAAM;AACxC,MAAIC,YAAY,EAAhB;AACAD,WAAS,+BAAT,EAA0C,YAAM;AAC9CE,WAAO,UAACC,IAAD,EAAU;AACf,UAAMC,mBAAmB,eAAnBA,gBAAmB,GAAY;AACnC,YAAMC,WAAW,MAAMP,aAAGQ,aAAH,CAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,iCAArB,EAAwD,eAAxD,CAAjB,EAA2F,OAA3F,CAAvB;AACA,YAAMC,MAAM,MAAMC,WAAIC,OAAJ,CAAYb,WAAZ,EAAyBM,QAAzB,CAAlB;AACA;AACA,cAAMK,IAAIG,IAAJ,EAAN;AACA,cAAMH,IAAII,SAAJ,EAAN;AACA;AACA,cAAMJ,IAAIK,cAAJ,EAAN;AACA,eAAOL,GAAP;AACD,OATD;AAUAN,yBAAmBY,IAAnB,CAAwB,UAACC,MAAD,EAAY;AAClC;AACAC,gBAAQC,GAAR,CAAY,gBAAZ;AACAlB,oBAAYgB,OAAOjB,QAAP,EAAZ;AACAkB,gBAAQC,GAAR,CAAY,yBAAelB,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAZ;AACAE;AACD,OAND,EAMGiB,KANH,CAMSjB,IANT;AAOD,KAlBD;AAmBAkB,OAAG,mCAAH,EAAwC,UAAClB,IAAD,EAAU;AAChD,UAAMmB,WAAW,eAAXA,QAAW,GAAY;AAC3B,YAAMC,OAAO,kBAAK,WAAL,EAAkBtB,SAAlB,CAAb;AACA,cAAMsB,KAAKV,IAAL,EAAN;AACD,OAHD;AAIAS,iBAAWN,IAAX,CAAgB,UAACQ,GAAD,EAAS;AACvBrB;AACD,OAFD,EAEGiB,KAFH,CAESjB,IAFT;AAGD,KARD;AASAkB,OAAG,mCAAH,EAAwC,UAAClB,IAAD,EAAU;AAChD,UAAMmB,WAAW,eAAXA,QAAW,GAAY;AAC3B,YAAMC,OAAO,kBAAK,WAAL,EAAkBtB,SAAlB,CAAb;AACA,cAAMsB,KAAKV,IAAL,EAAN;AACA,YAAMY,SAAS,MAAMF,KAAKE,MAAL,EAArB;AACAP,gBAAQC,GAAR,CAAY,yBAAeM,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ;AACD,OALD;AAMAH,iBAAWN,IAAX,CAAgB,UAACQ,GAAD,EAAS;AACvBrB;AACD,OAFD,EAEGiB,KAFH,CAESjB,IAFT;AAGD,KAVD;AAWD,GAxCD;AAyCD,CA3CD","file":"index.spec.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Bluebird from 'bluebird';\nimport { Job, Client as NomadClient } from '../../schedulers/nomad/index';\nimport { Mesh } from './index';\n\nBluebird.promisifyAll(fs);\n\nconst nomadClient = NomadClient('127.0.0.1', 4646, {});\n// const consulClient = Client('127.0.0.1', 8500, {});\n\ndescribe('# Consul Backend Plugin', () => {\n  let jobLayout = {};\n  describe('# Register Node Health System', () => {\n    before((done) => {\n      const syncAndCreateJob = async () => {\n        const nomadHCL = await fs.readFileAsync(path.join(__dirname, '../../schedulers/nomad/fixtures', 'socat-new.hcl'), 'utf-8');\n        const job = await Job.fromHCL(nomadClient)(nomadHCL);\n        // Sync\n        await job.sync();\n        await job.getDetail();\n        // Node Allocation Info\n        await job.getAllocations();\n        return job;\n      };\n      syncAndCreateJob().then((result) => {\n        // console.log(JSON.stringify(result, null, 2));\n        console.log('Nomad Describe');\n        jobLayout = result.describe();\n        console.log(JSON.stringify(jobLayout, null, 2));\n        done();\n      }).catch(done);\n    });\n    it('should register the health system', (done) => {\n      const initMesh = async () => {\n        const mesh = Mesh('127.0.0.1')(jobLayout);\n        await mesh.sync();\n      };\n      initMesh().then((res) => {\n        done();\n      }).catch(done);\n    });\n    it('should register the health system', (done) => {\n      const initMesh = async () => {\n        const mesh = Mesh('127.0.0.1')(jobLayout);\n        await mesh.sync();\n        const health = await mesh.health();\n        console.log(JSON.stringify(health, null, 2));\n      };\n      initMesh().then((res) => {\n        done();\n      }).catch(done);\n    });\n  });\n});\n"]}