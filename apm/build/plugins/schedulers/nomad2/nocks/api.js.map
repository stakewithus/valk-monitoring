{"version":3,"sources":["../../../../../src/plugins/schedulers/nomad2/nocks/api.js"],"names":["Bluebird","promisifyAll","fs","upperFirst","s","charAt","toUpperCase","slice","getFileContent","fPath","fName","rawData","readFileAsync","path","join","fData","JSON","parse","split","kName","listName","name","map","NomadAPI","host","port","__dirname","fileList","readdirAsync","pList","all","filter","f","indexOf","nomadApi","reduce","acc","row","baseUri","get","times","reply","NodeList1","NodeRead1","post","body","jobHCL","JobHCL","JobParse1","jobDef","Job","jobId","ID","JobPlan1","JobCreate1","JobRead1","JobParse2","JobPlan2","JobUpdate1","JobAllocations1","console","log"],"mappings":"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","file":"api.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Bluebird from 'bluebird';\nimport nock from 'nock';\n\nBluebird.promisifyAll(fs);\n\nconst upperFirst = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n\n// Thanks Tan for this snippet\nconst getFileContent = (fPath) => async (fName) => {\n  const rawData = await fs.readFileAsync(path.join(fPath, fName));\n  const fData = JSON.parse(rawData);\n  const { 0: kName } = fName.split('.json');\n  const [, ...listName] = kName.split('_');\n  const name = listName.map(upperFirst).join('');\n  return { [name]: fData };\n};\n\n\nconst NomadAPI = async (host, port) => {\n  const fPath = path.join(__dirname, '../', 'fixtures');\n  const fileList = await fs.readdirAsync(fPath);\n  const pList = await Promise.all(fileList.filter((f) => f.indexOf('.hcl') === -1)\n    .map(getFileContent(fPath)));\n  const nomadApi = pList.reduce((acc, row) => ({ ...acc, ...row }), {});\n\n  const baseUri = `http://${host}:${port}`;\n  nock(baseUri).get('/v1/nodes').times(3).reply(200, nomadApi.NodeList1);\n  nock(baseUri).get('/v1/node/7314889b-0aeb-00e1-8b67-98de3ef8e4db').times(3).reply(200, nomadApi.NodeRead1);\n  nock(baseUri).get('/v1/node/de888c16-29b1-4d35-221e-332b5b9097f4').reply(404, {});\n  nock(baseUri).get('/v1/node/7314889b-0aeb-00e1-8b67-98de3ef8e4db/allocations').reply(200, []);\n\n  nock(baseUri).get('/v1/jobs').reply(200, []);\n\n  nock(baseUri)\n    .post('/v1/jobs/parse', (body) => {\n      const { JobHCL: jobHCL } = body;\n      if (typeof jobHCL === 'undefined') return false;\n      return true;\n    })\n    .times(3)\n    .reply(200, nomadApi.JobParse1);\n\n  nock(baseUri)\n    .post('/v1/job/blockchain-client/plan', (body) => {\n      const { Job: jobDef } = body;\n      if (typeof jobDef === 'undefined') return false;\n      const {\n        ID: jobId,\n      } = jobDef;\n      if (typeof jobId !== 'undefined') return true;\n      return false;\n    })\n    .reply(200, nomadApi.JobPlan1);\n\n  nock(baseUri)\n    .post('/v1/jobs', (body) => {\n      const { Job: jobDef } = body;\n      if (typeof jobDef === 'undefined') return false;\n      const {\n        ID: jobId,\n      } = jobDef;\n      if (typeof jobId !== 'undefined') return true;\n      return false;\n    })\n    .reply(200, nomadApi.JobCreate1);\n\n  nock(baseUri)\n    .get('/v1/job/blockchain-client')\n    .reply(200, nomadApi.JobRead1);\n\n  nock(baseUri)\n    .post('/v1/jobs/parse', (body) => {\n      const { JobHCL: jobHCL } = body;\n      if (typeof jobHCL === 'undefined') return false;\n      return true;\n    })\n    .times(3)\n    .reply(200, nomadApi.JobParse2);\n\n  nock(baseUri)\n    .post('/v1/job/blockchain-client/plan', (body) => {\n      const { Job: jobDef } = body;\n      if (typeof jobDef === 'undefined') return false;\n      const {\n        ID: jobId,\n      } = jobDef;\n      if (typeof jobId !== 'undefined') return true;\n      return false;\n    })\n    .reply(200, nomadApi.JobPlan2);\n\n  nock(baseUri)\n    .post('/v1/job/blockchain-client', (body) => {\n      const { Job: jobDef } = body;\n      if (typeof jobDef === 'undefined') return false;\n      const {\n        ID: jobId,\n      } = jobDef;\n      if (typeof jobId !== 'undefined') return true;\n      return false;\n    })\n    .reply(200, nomadApi.JobUpdate1);\n\n  nock(baseUri)\n    .get('/v1/job/blockchain-client/allocations')\n    .reply(200, nomadApi.JobAllocations1);\n\n  console.log('Nocks done');\n  return {};\n};\n\nexport default NomadAPI;\n"]}