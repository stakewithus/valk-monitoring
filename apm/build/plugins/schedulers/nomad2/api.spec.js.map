{"version":3,"sources":["../../../../src/plugins/schedulers/nomad2/api.spec.js"],"names":["Bluebird","promisifyAll","fs","describe","scheduler","before","api","Api","nodeID","it","res","node","list","assert","equal","length","ID","read","Datacenter","Meta","region","chain_role","missingNode","e","statusCode","allocations","normHCL1","normHCL2","rawHCL1","readFileAsync","path","join","__dirname","stripNewLine","rawHCL2","job","parse","TaskGroups","jobDef","plan","diff","Diff","Type","FailedTGAllocs","Index","JobModifyIndex","create","property","jobId","Tasks","Fields","Old","New","update","DesiredStatus","JobVersion","JobID","JobType","TaskGroup","done"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,mBAASC,YAAT,CAAsBC,YAAtB;;AAEAC,SAAS,uBAAT,EAAkC,YAAM;AACtC,MAAMC,YAAY,oBAAlB;AACAD,WAAS,aAAT,EAAwB,YAAM;AAC5BE,WAAO,kBAAY;AACjB,YAAM,mBAAa,WAAb,EAA0B,IAA1B,CAAN;AACD,KAFD;AAGA,QAAMC,MAAMF,UAAUG,GAAtB;AACA;AACA,QAAMC,SAAS,sCAAf;AACAL,aAAS,UAAT,EAAqB,YAAM;AACzBM,SAAG,uBAAH,EAA4B,kBAAY;AACtC,YAAMC,MAAM,MAAMJ,IAAIK,IAAJ,CAASC,IAAT,EAAlB;AACAC,qBAAOC,KAAP,CAAaJ,IAAIK,MAAjB,EAAyB,CAAzB;AAFsC,YAGzBC,EAHyB,GAGhBN,GAHgB,CAG9B,CAH8B,EAGzBM,EAHyB;AAItC;;AACAH,qBAAOC,KAAP,CAAaE,EAAb,EAAiB,sCAAjB;AACD,OAND;;AAQAP,SAAG,2BAAH,EAAgC,kBAAY;AAC1C,YAAMC,MAAM,MAAMJ,IAAIK,IAAJ,CAASM,IAAT,CAAcT,MAAd,CAAlB;AACAK,qBAAOC,KAAP,CAAaJ,IAAIM,EAAjB,EAAqBR,MAArB;AACAK,qBAAOC,KAAP,CAAaJ,IAAIQ,UAAjB,EAA6B,KAA7B;AACAL,qBAAOC,KAAP,CAAaJ,IAAIS,IAAJ,CAASC,MAAtB,EAA8B,gBAA9B;AACAP,qBAAOC,KAAP,CAAaJ,IAAIS,IAAJ,CAASE,UAAtB,EAAkC,QAAlC;AACD,OAND;;AAQAZ,SAAG,8CAAH,EAAmD,kBAAY;AAC7D;AACA,YAAMa,cAAc,sCAApB;AACA,YAAI;AACF,gBAAMhB,IAAIK,IAAJ,CAASM,IAAT,CAAcK,WAAd,CAAN;AACD,SAFD,CAEE,OAAOC,CAAP,EAAU;AACVV,uBAAOC,KAAP,CAAaS,EAAEC,UAAf,EAA2B,GAA3B;AACD;AACF,OARD;;AAUAf,SAAG,yCAAH,EAA8C,kBAAY;AACxD;AACA,YAAMC,MAAM,MAAMJ,IAAIK,IAAJ,CAASc,WAAT,CAAqBjB,MAArB,CAAlB;AACAK,qBAAOC,KAAP,CAAaJ,IAAIK,MAAjB,EAAyB,CAAzB;AACD,OAJD;AAKD,KAhCD;AAiCAZ,aAAS,SAAT,EAAoB,YAAM;AACxB,UAAIuB,WAAW,EAAf;AACA,UAAIC,WAAW,EAAf;AACAtB,aAAO,kBAAY;AACjB;AACA,YAAMuB,UAAU,MAAM1B,aAAG2B,aAAH,CAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,EAAiC,uBAAjC,CAAjB,EAA4E,OAA5E,CAAtB;AACAN,mBAAWtB,UAAU6B,YAAV,CAAuBL,OAAvB,CAAX;AACA,YAAMM,UAAU,MAAMhC,aAAG2B,aAAH,CAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,EAAiC,2BAAjC,CAAjB,EAAgF,OAAhF,CAAtB;AACAL,mBAAWvB,UAAU6B,YAAV,CAAuBC,OAAvB,CAAX;AACD,OAND;AAOAzB,SAAG,yBAAH,EAA8B,kBAAY;AACxC,YAAMC,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQvB,IAAR,EAAlB;AACAC,qBAAOC,KAAP,CAAaJ,IAAIK,MAAjB,EAAyB,CAAzB;AACD,OAHD;;AAKAN,SAAG,2BAAH,EAAgC,kBAAY;AAC1C,YAAMC,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQC,KAAR,MAAiBV,QAAjB,CAAlB;AACAb,qBAAOC,KAAP,CAAaJ,IAAI2B,UAAJ,CAAetB,MAA5B,EAAoC,CAApC;AACAF,qBAAOC,KAAP,CAAaJ,IAAIS,IAAJ,CAAS,cAAT,CAAb,EAAuC,mBAAvC;AACD,OAJD;;AAMAV,SAAG,0BAAH,EAA+B,kBAAY;AACzC,YAAM6B,SAAS,MAAMhC,IAAI6B,GAAJ,CAAQC,KAAR,MAAiBV,QAAjB,CAArB;AACA,YAAMhB,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQI,IAAR,CAAaD,OAAOtB,EAApB,EAAwBsB,MAAxB,EAAgC,EAAEE,MAAM,IAAR,EAAhC,CAAlB;AACA3B,qBAAOC,KAAP,CAAaJ,IAAI+B,IAAJ,CAASC,IAAtB,EAA4B,OAA5B;AACA7B,qBAAOC,KAAP,CAAaJ,IAAIiC,cAAjB,EAAiC,IAAjC;AACA9B,qBAAOC,KAAP,CAAaJ,IAAIkC,KAAjB,EAAwB,CAAxB;AACA/B,qBAAOC,KAAP,CAAaJ,IAAImC,cAAjB,EAAiC,CAAjC;AACD,OAPD;;AASApC,SAAG,4BAAH,EAAiC,kBAAY;AAC3C,YAAM6B,SAAS,MAAMhC,IAAI6B,GAAJ,CAAQC,KAAR,MAAiBV,QAAjB,CAArB;AACA,YAAMhB,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQW,MAAR,CAAeR,OAAOtB,EAAtB,EAA0BsB,MAA1B,EAAkC,EAAlC,CAAlB;AACAzB,qBAAOkC,QAAP,CAAgBrC,GAAhB,EAAqB,iBAArB;AACAG,qBAAOkC,QAAP,CAAgBrC,GAAhB,EAAqB,QAArB;AACD,OALD;;AAOAD,SAAG,0BAAH,EAA+B,kBAAY;AACzC,YAAMuC,QAAQ,mBAAd;AACA,YAAMtC,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQlB,IAAR,CAAa+B,KAAb,CAAlB;AACAnC,qBAAOkC,QAAP,CAAgBrC,GAAhB,EAAqB,gBAArB;AACAG,qBAAOC,KAAP,CAAaJ,IAAIM,EAAjB,EAAqB,mBAArB;AACD,OALD;;AAOAP,SAAG,wCAAH,EAA6C,kBAAY;AACvD,YAAM6B,SAAS,MAAMhC,IAAI6B,GAAJ,CAAQC,KAAR,MAAiBT,QAAjB,CAArB;AACA,YAAMjB,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQI,IAAR,CAAaD,OAAOtB,EAApB,EAAwBsB,MAAxB,EAAgC,EAAEE,MAAM,IAAR,EAAhC,CAAlB;AACA3B,qBAAOC,KAAP,CAAaJ,IAAI+B,IAAJ,CAASC,IAAtB,EAA4B,QAA5B;AACA7B,qBAAOC,KAAP,CAAaJ,IAAI+B,IAAJ,CAASJ,UAAT,CAAoB,CAApB,EAAuBK,IAApC,EAA0C,QAA1C;AACA7B,qBAAOC,KAAP,CAAaJ,IAAI+B,IAAJ,CAASJ,UAAT,CAAoB,CAApB,EAAuBY,KAAvB,CAA6B,CAA7B,EAAgCP,IAA7C,EAAmD,QAAnD;AACA7B,qBAAOC,KAAP,CAAaJ,IAAI+B,IAAJ,CAASJ,UAAT,CAAoB,CAApB,EAAuBY,KAAvB,CAA6B,CAA7B,EAAgCC,MAAhC,CAAuC,CAAvC,EAA0CR,IAAvD,EAA6D,QAA7D;AACA7B,qBAAOC,KAAP,CAAaJ,IAAI+B,IAAJ,CAASJ,UAAT,CAAoB,CAApB,EAAuBY,KAAvB,CAA6B,CAA7B,EAAgCC,MAAhC,CAAuC,CAAvC,EAA0CC,GAAvD,EAA4D,YAA5D;AACAtC,qBAAOC,KAAP,CAAaJ,IAAI+B,IAAJ,CAASJ,UAAT,CAAoB,CAApB,EAAuBY,KAAvB,CAA6B,CAA7B,EAAgCC,MAAhC,CAAuC,CAAvC,EAA0CE,GAAvD,EAA4D,iBAA5D;AACD,OATD;;AAWA3C,SAAG,4BAAH,EAAiC,kBAAY;AAC3C,YAAM6B,SAAS,MAAMhC,IAAI6B,GAAJ,CAAQC,KAAR,MAAiBT,QAAjB,CAArB;AACA,YAAMjB,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQkB,MAAR,CAAef,OAAOtB,EAAtB,EAA0BsB,MAA1B,EAAkC,EAAlC,CAAlB;AACAzB,qBAAOkC,QAAP,CAAgBrC,GAAhB,EAAqB,iBAArB;AACAG,qBAAOkC,QAAP,CAAgBrC,GAAhB,EAAqB,QAArB;AACAG,qBAAOkC,QAAP,CAAgBrC,GAAhB,EAAqB,gBAArB;AACD,OAND;;AAQAD,SAAG,wCAAH,EAA6C,kBAAY;AACvD,YAAM6B,SAAS,MAAMhC,IAAI6B,GAAJ,CAAQC,KAAR,MAAiBT,QAAjB,CAArB;AACA,YAAMjB,MAAM,MAAMJ,IAAI6B,GAAJ,CAAQV,WAAR,CAAoBa,OAAOtB,EAA3B,CAAlB;AACAH,qBAAOC,KAAP,CAAaJ,IAAIK,MAAjB,EAAyB,CAAzB;AACAF,qBAAOC,KAAP,CAAaJ,IAAI,CAAJ,EAAO4C,aAApB,EAAmC,KAAnC;AACAzC,qBAAOC,KAAP,CAAaJ,IAAI,CAAJ,EAAO6C,UAApB,EAAgC,CAAhC;AACA1C,qBAAOC,KAAP,CAAaJ,IAAI,CAAJ,EAAO8C,KAApB,EAA2B,mBAA3B;AACA3C,qBAAOC,KAAP,CAAaJ,IAAI,CAAJ,EAAO+C,OAApB,EAA6B,SAA7B;AACA5C,qBAAOC,KAAP,CAAaJ,IAAI,CAAJ,EAAOgD,SAApB,EAA+B,YAA/B;AACD,OATD;AAUD,KAzED;AA0ED,GAlHD,EAFsC,CAoHlC;AACJvD,WAAS,aAAT,EAAwB,YAAM;AAC5BM,OAAG,gDAAH,EAAqD,UAACkD,IAAD,EAAU;AAC7DA,WAAK,CAAC,CAAN;AACD,KAFD;;AAIAlD,OAAG,sBAAH,EAA2B,UAACkD,IAAD,EAAU;AACnCA,WAAK,CAAC,CAAN;AACD,KAFD;;AAIAlD,OAAG,kCAAH,EAAuC,UAACkD,IAAD,EAAU;AAC/CA,WAAK,CAAC,CAAN;AACD,KAFD;AAGD,GAZD,EArHsC,CAiIlC;AACL,CAlID","file":"api.spec.js","sourcesContent":["import { assert } from 'chai';\nimport path from 'path';\nimport fs from 'fs';\nimport Bluebird from 'bluebird';\nimport Scheduler from './api';\nimport NockNomadAPI from './nocks/api';\n\nBluebird.promisifyAll(fs);\n\ndescribe('Nomad Scheduler Tests', () => {\n  const scheduler = Scheduler();\n  describe('# Nomad API', () => {\n    before(async () => {\n      await NockNomadAPI('127.0.0.1', 4646);\n    });\n    const api = scheduler.Api;\n    // const nodeID = 'de888c16-29b1-4d35-221e-332b5b9097f4';\n    const nodeID = '7314889b-0aeb-00e1-8b67-98de3ef8e4db';\n    describe('## Nodes', () => {\n      it('should list all nodes', async () => {\n        const res = await api.node.list();\n        assert.equal(res.length, 1);\n        const { 0: { ID } } = res;\n        // assert.equal(ID, nodeID);\n        assert.equal(ID, '7314889b-0aeb-00e1-8b67-98de3ef8e4db');\n      });\n\n      it('should read a single node', async () => {\n        const res = await api.node.read(nodeID);\n        assert.equal(res.ID, nodeID);\n        assert.equal(res.Datacenter, 'dc1');\n        assert.equal(res.Meta.region, 'ap-southeast-1');\n        assert.equal(res.Meta.chain_role, 'sentry');\n      });\n\n      it('should throw if nodeID is not found for read', async () => {\n        // TODO should throw if node is not found\n        const missingNode = 'de888c16-29b1-4d35-221e-332b5b9097f4';\n        try {\n          await api.node.read(missingNode);\n        } catch (e) {\n          assert.equal(e.statusCode, 404);\n        }\n      });\n\n      it('should get a single node\\'s allocations', async () => {\n        // TODO should throw if node is not found\n        const res = await api.node.allocations(nodeID);\n        assert.equal(res.length, 0);\n      });\n    });\n    describe('## Jobs', () => {\n      let normHCL1 = '';\n      let normHCL2 = '';\n      before(async () => {\n        //\n        const rawHCL1 = await fs.readFileAsync(path.join(__dirname, 'fixtures', 'blockchain-client.hcl'), 'utf-8');\n        normHCL1 = scheduler.stripNewLine(rawHCL1);\n        const rawHCL2 = await fs.readFileAsync(path.join(__dirname, 'fixtures', 'blockchain-client-new.hcl'), 'utf-8');\n        normHCL2 = scheduler.stripNewLine(rawHCL2);\n      });\n      it('should list all jobs #1', async () => {\n        const res = await api.job.list();\n        assert.equal(res.length, 0);\n      });\n\n      it('should parse a single job', async () => {\n        const res = await api.job.parse(`${normHCL1}`);\n        assert.equal(res.TaskGroups.length, 1);\n        assert.equal(res.Meta['node-project'], 'blockchain-client');\n      });\n\n      it('should plan a single job', async () => {\n        const jobDef = await api.job.parse(`${normHCL1}`);\n        const res = await api.job.plan(jobDef.ID, jobDef, { diff: true });\n        assert.equal(res.Diff.Type, 'Added');\n        assert.equal(res.FailedTGAllocs, null);\n        assert.equal(res.Index, 0);\n        assert.equal(res.JobModifyIndex, 0);\n      });\n\n      it('should create a single job', async () => {\n        const jobDef = await api.job.parse(`${normHCL1}`);\n        const res = await api.job.create(jobDef.ID, jobDef, {});\n        assert.property(res, 'EvalCreateIndex');\n        assert.property(res, 'EvalID');\n      });\n\n      it('should read a single job', async () => {\n        const jobId = 'blockchain-client';\n        const res = await api.job.read(jobId);\n        assert.property(res, 'JobModifyIndex');\n        assert.equal(res.ID, 'blockchain-client');\n      });\n\n      it('should plan an update for a single job', async () => {\n        const jobDef = await api.job.parse(`${normHCL2}`);\n        const res = await api.job.plan(jobDef.ID, jobDef, { diff: true });\n        assert.equal(res.Diff.Type, 'Edited');\n        assert.equal(res.Diff.TaskGroups[0].Type, 'Edited');\n        assert.equal(res.Diff.TaskGroups[0].Tasks[0].Type, 'Edited');\n        assert.equal(res.Diff.TaskGroups[0].Tasks[0].Fields[0].Type, 'Edited');\n        assert.equal(res.Diff.TaskGroups[0].Tasks[0].Fields[0].Old, 'commit-hub');\n        assert.equal(res.Diff.TaskGroups[0].Tasks[0].Fields[0].New, 'commit-hub-prod');\n      });\n\n      it('should update a single job', async () => {\n        const jobDef = await api.job.parse(`${normHCL2}`);\n        const res = await api.job.update(jobDef.ID, jobDef, {});\n        assert.property(res, 'EvalCreateIndex');\n        assert.property(res, 'EvalID');\n        assert.property(res, 'JobModifyIndex');\n      });\n\n      it('should get a single job\\'s allocations', async () => {\n        const jobDef = await api.job.parse(`${normHCL2}`);\n        const res = await api.job.allocations(jobDef.ID);\n        assert.equal(res.length, 2);\n        assert.equal(res[1].DesiredStatus, 'run');\n        assert.equal(res[1].JobVersion, 1);\n        assert.equal(res[1].JobID, 'blockchain-client');\n        assert.equal(res[1].JobType, 'service');\n        assert.equal(res[1].TaskGroup, 'commit-hub');\n      });\n    });\n  }); // End of Nomad API\n  describe('# Nomad Job', () => {\n    it('should be able to read it\\'s own configuration', (done) => {\n      done(-1);\n    });\n\n    it('should get a summary', (done) => {\n      done(-1);\n    });\n\n    it('should get it\\'s own allocations', (done) => {\n      done(-1);\n    });\n  }); // End of Nomad API\n});\n"]}