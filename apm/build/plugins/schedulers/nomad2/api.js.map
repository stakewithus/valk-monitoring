{"version":3,"sources":["../../../../src/plugins/schedulers/nomad2/api.js"],"names":["stripNewLine","txt","replace","logger","child","module","JobAPI","reqPartial","list","async","parse","jobHCL","canonicalize","body","JobHCL","Canonicalize","plan","jobId","jobDef","diff","policyOverride","Job","Diff","PolicyOverride","read","create","enforceIndex","jobModifyIndex","EnforceIndex","JobModifyIndex","update","allocations","NodeAPI","nodeId","Api","nodeIP","nodePort","reqArgs","job","node","parseJobDef","ID","taskGroup","TaskGroups","taskGroupName","Name","Affinities","taskGroupCount","Count","taskGroupTask","Tasks","Error","regionAff","reduce","acc","aff","LTarget","Operand","RTarget","Weight","regions","split","curRegion","incl","newRegion","concat","excl","taskGroupTaskName","Meta","projectName","projectCat","projectNetwork","Resources","canonKey","ReservedPorts","Networks","desiredCount","desiredPorts","name","cat","network","region","parseJobTendermint","jobLayout","restJob","portNames","projectPorts","row","Label","Value","indexOf","ports","parseHCL","client","hclDef","debug","hclNorm","apiReply","layoutFromDef","rawDef","layoutFromHCL","Scheduler","api"],"mappings":"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","file":"api.js","sourcesContent":["import pino from 'pino';\n\nimport rawRequest from '../../../common/http_client';\n\nconst stripNewLine = (txt) => txt.replace(/(\\r\\n|\\n|\\r)/gm, '');\nconst logger = pino().child({ module: 'plugins/schedulers/nomad' });\n\nconst JobAPI = (reqPartial) => {\n  const list = (async) => reqPartial('/v1/jobs', 'GET')({});\n\n  const parse = async (jobHCL, canonicalize = false) => reqPartial('/v1/jobs/parse', 'POST')({\n    body: {\n      JobHCL: jobHCL,\n      Canonicalize: canonicalize,\n    },\n  });\n\n  const plan = async (jobId, jobDef, { diff = true, policyOverride = false }) => reqPartial(`/v1/job/${jobId}/plan`, 'POST')({\n    body: {\n      Job: jobDef,\n      Diff: diff,\n      PolicyOverride: policyOverride,\n    },\n  });\n\n  const read = async (jobId) => reqPartial(`/v1/job/${jobId}`, 'GET')({});\n\n  const create = async (\n    jobId,\n    jobDef,\n    {\n      enforceIndex = false,\n      jobModifyIndex = 0,\n      policyOverride = false,\n    }) => reqPartial('/v1/jobs', 'POST')({\n    body: {\n      Job: jobDef,\n      EnforceIndex: enforceIndex,\n      JobModifyIndex: jobModifyIndex,\n      PolicyOverride: policyOverride,\n    },\n  });\n\n  const update = async (\n    jobId,\n    jobDef,\n    {\n      enforceIndex = false,\n      jobModifyIndex = 0,\n      policyOverride = false,\n    }) => reqPartial(`/v1/job/${jobId}`, 'POST')({\n    body: {\n      Job: jobDef,\n      EnforceIndex: enforceIndex,\n      JobModifyIndex: jobModifyIndex,\n      PolicyOverride: policyOverride,\n    },\n  });\n\n  const allocations = async (jobId) => reqPartial(`/v1/job/${jobId}/allocations`, 'GET')({});\n\n  return {\n    list,\n    parse,\n    plan,\n    read,\n    create,\n    update,\n    allocations,\n  };\n};\n\nconst NodeAPI = (reqPartial) => {\n  const allocations = async (nodeId) => reqPartial(`/v1/node/${nodeId}/allocations`, 'GET')({});\n\n  const list = (async) => reqPartial('/v1/nodes', 'GET')({});\n\n  const read = async (nodeId) => reqPartial(`/v1/node/${nodeId}`, 'GET')({});\n\n\n  return {\n    allocations,\n    list,\n    read,\n  };\n};\n\nconst Api = (nodeIP, nodePort, reqArgs = {}) => {\n  const reqPartial = rawRequest(nodeIP, nodePort, reqArgs);\n  return {\n    job: { ...JobAPI(reqPartial) },\n    node: { ...NodeAPI(reqPartial) },\n  };\n};\n\n\nconst parseJobDef = (jobDef) => {\n  const {\n    ID: jobId,\n    TaskGroups: {\n      0: taskGroup,\n    },\n  } = jobDef;\n  const {\n    //\n    Name: taskGroupName,\n    Affinities,\n    // Constraints,\n    Count: taskGroupCount,\n    Tasks: {\n      0: taskGroupTask,\n    },\n  } = taskGroup;\n  if (Affinities === null) throw Error(`Affinities for Task Group ${taskGroupName} for Job ${jobId} is missing`);\n  const regionAff = Affinities.reduce(\n    (acc, aff) => {\n      const {\n        LTarget,\n        Operand,\n        RTarget,\n        Weight,\n      } = aff;\n      if (LTarget !== '${meta.region}' || Operand !== 'set_contains_any') return acc; // eslint-disable-line\n      if (Weight === 100) {\n        const regions = RTarget.split(',');\n        const { incl: curRegion } = acc;\n        const newRegion = curRegion.concat(regions);\n        return { ...acc, incl: newRegion };\n      }\n      if (Weight === -100) {\n        const regions = RTarget.split(',');\n        const { excl: curRegion } = acc;\n        const newRegion = curRegion.concat(regions);\n        return { ...acc, excl: newRegion };\n      }\n      return acc;\n    },\n    { incl: [], excl: [] },\n  );\n  const {\n    Name: taskGroupTaskName,\n    Meta: {\n      'node-project-name': projectName,\n      'node-project-category': projectCat,\n      'node-project-network': projectNetwork,\n    },\n    Resources,\n  } = taskGroupTask;\n  const canonKey = `${jobId}-${taskGroupName}-${taskGroupTaskName}`;\n  const {\n    Networks: {\n      0: {\n        ReservedPorts,\n      },\n    },\n  } = Resources;\n  return {\n    canonKey,\n    desiredCount: taskGroupCount,\n    desiredPorts: ReservedPorts,\n    name: projectName,\n    cat: projectCat,\n    network: projectNetwork,\n    region: regionAff,\n  };\n};\n\nconst parseJobTendermint = (jobLayout) => {\n  const {\n    desiredPorts,\n    ...restJob\n  } = jobLayout;\n  const portNames = ['http_p2p', 'http_rpc', 'http_abci'];\n  const projectPorts = desiredPorts.reduce((acc, row) => {\n    const { Label, Value } = row;\n    if (portNames.indexOf(Label) === -1) return acc;\n    return { ...acc, [Label]: Value };\n  }, {});\n  return {\n    ...restJob,\n    ports: projectPorts,\n  };\n};\n\nconst Job = () => {\n\n};\n\nJob.parseHCL = (client) => async (hclDef) => {\n  logger.debug('Parsing job from HCL');\n  const hclNorm = stripNewLine(hclDef);\n  const apiReply = await client.job.parse(`${hclNorm}`);\n  return apiReply;\n};\n\nJob.layoutFromDef = (rawDef) => {\n  const jobDef = parseJobDef(rawDef);\n  const { cat } = jobDef;\n  if (cat === 'tendermint') return parseJobTendermint(jobDef);\n  return jobDef;\n};\n\nJob.layoutFromHCL = (client) => async (hclDef) => {\n  const rawDef = await Job.parseHCL(hclDef);\n  const jobDef = parseJobDef(rawDef);\n  const { cat } = jobDef;\n  if (cat === 'tendermint') return parseJobTendermint(jobDef);\n  return jobDef;\n};\n\nconst Scheduler = (nodeIP = '127.0.0.1', nodePort = 4646, reqArgs = {}) => {\n  const api = Api(nodeIP, nodePort, reqArgs);\n  const job = Job;\n  return {\n    Api: api,\n    Job: job,\n    stripNewLine,\n  };\n};\n\nexport default Scheduler;\n"]}