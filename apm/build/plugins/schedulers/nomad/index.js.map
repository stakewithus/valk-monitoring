{"version":3,"sources":["../../../../src/plugins/schedulers/nomad/index.js"],"names":["stripNewLine","txt","replace","logger","child","module","Job","client","jobId","jobDef","allocations","jobInfo","layout","procTaskGroup","ID","nodeProject","taskGroup","Count","firstCriteria","Constraints","taskGroupName","Name","Tasks","taskMeta","Meta","taskName","Resources","taskResCPU","CPU","taskResMB","MemoryMB","ReservedPorts","Networks","Error","RTarget","desiredAvail","split","nodeProjectCategory","nodeProjectName","reservedPorts","reduce","aac","portRow","Label","Value","canonKey","projectName","desiredCount","nodeResourceAlloc","desiredCPU","desiredMemory","desiredPorts","procJobInfo","TaskGroups","map","updateLayout","newAlloc","acc","grpRow","matchedAlloc","filter","alloc","concat","saveAlloc","cKey","allocDet","getDetail","job","read","sync","newJobHCL","updateNow","info","except","statusCode","isExist","length","create","planDetails","plan","diff","update","newJobDef","parseHCL","jobModifyIndex","JobModifyIndex","enforceIndex","parseNodeAllocation","allocIDList","allocRow","indexOf","jobName","allocID","queryNode","nodeInfo","nodeAddress","Address","nodeId","nodeName","singleNodeInfo","node","metaRegion","region","singleNodeAlloc","combinedNodeAlloc","n","address","name","getAllocations","rawNodeInfo","jobAllocInfo","allocJobId","JobID","allocClientStatus","ClientStatus","allocId","allocNodeId","NodeID","nodeAllocFilter","allocInfo","rawAllNodes","list","filteredNodes","combinedNodes","all","describe","hclDef","hclNorm","apiReply","parse","fromHCL","console","log","loadJobId","JobAPI","reqPartial","jobHCL","canonicalize","body","JobHCL","Canonicalize","policyOverride","Diff","PolicyOverride","EnforceIndex","allocationsByNode","listNode","async","readNode","NodeAPI","Client","nodeIP","nodePort","reqArgs"],"mappings":"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","file":"index.js","sourcesContent":["import pino from 'pino';\n\nimport rawRequest from '../../../common/http_client';\n\nconst stripNewLine = (txt) => txt.replace(/(\\r\\n|\\n|\\r)/gm, '');\nconst logger = pino().child({ module: 'plugins/schedulers/nomad' });\n\nconst Job = (client) => (jobId, jobDef) => {\n  let allocations = [];\n  let jobInfo = {};\n  let layout = {};\n\n  const procTaskGroup = (ID, nodeProject) => (taskGroup) => {\n    const {\n      Count,\n      Constraints: {\n        0: firstCriteria,\n      },\n      Name: taskGroupName,\n      Tasks: {\n        0: {\n          Meta: taskMeta,\n          Name: taskName,\n          Resources: {\n            CPU: taskResCPU,\n            MemoryMB: taskResMB,\n            Networks: {\n              0: {\n                ReservedPorts,\n              },\n            },\n          },\n        },\n      },\n    } = taskGroup;\n    if (typeof firstCriteria === 'undefined') throw new Error('Missing the first constraint on region');\n    // TODO Stronger check for criteria\n    const {\n      RTarget,\n    } = firstCriteria;\n    const desiredAvail = RTarget.split(',');\n    const {\n      'node-project-category': nodeProjectCategory,\n      'node-project-name': nodeProjectName,\n    } = taskMeta;\n    if (typeof nodeProjectCategory === 'undefined') throw new Error('Missing node-project-category in Job - TaskGroup - Task Meta');\n    if (typeof nodeProjectName === 'undefined') throw new Error('Missing node-project-name in Job - TaskGroup - Task Meta');\n    const reservedPorts = ReservedPorts.reduce((aac, portRow) => {\n      const { Label, Value } = portRow;\n      return { ...aac, [Label]: Value };\n    }, {});\n    const canonKey = `${ID}_${taskGroupName}_${taskName}`;\n    return {\n      canonKey,\n      projectName: taskGroupName,\n      desiredCount: Count,\n      desiredAvail,\n      nodeProject,\n      nodeProjectCategory,\n      nodeResourceAlloc: {\n        desiredCPU: taskResCPU,\n        desiredMemory: taskResMB,\n        desiredPorts: reservedPorts,\n      },\n      allocations: [],\n    };\n  };\n\n  const procJobInfo = () => {\n    const {\n      ID,\n      Meta,\n      TaskGroups,\n    } = jobInfo;\n    const { 'node-project': nodeProject } = Meta;\n    if (typeof nodeProject === 'undefined') throw new Error('Missing node-project in Job Meta');\n    if (nodeProject !== 'blockchain-client') throw new Error(`Job Meta node-project [${nodeProject}] is not blockchain-client`);\n    layout = TaskGroups.map(procTaskGroup(ID, nodeProject));\n  };\n\n  const updateLayout = (newAlloc) => {\n    layout = layout.reduce((acc, grpRow) => {\n      const { canonKey } = grpRow;\n      const matchedAlloc = newAlloc.filter((alloc) => alloc.canonKey === canonKey);\n      if (matchedAlloc === null) return acc.concat(grpRow);\n      const saveAlloc = matchedAlloc.map(({ canonKey: cKey, ...allocDet }) => allocDet, []);\n      return acc.concat({\n        ...grpRow,\n        allocations: saveAlloc,\n      });\n    }, []);\n  };\n\n  const getDetail = async () => {\n    jobInfo = await client.job.read(jobId);\n    procJobInfo();\n    return jobInfo;\n  };\n\n  const sync = async (newJobHCL, updateNow = false) => {\n    logger.info('Starting sync...');\n    // Check if jobId exists,if not we create it.\n    try {\n      jobInfo = await client.job.read(jobId);\n    } catch (except) {\n      if (except.statusCode !== 404) throw except;\n    }\n    const isExist = Object.keys(jobInfo).length > 0;\n    //\n    if (!isExist) {\n      // Create It\n      logger.info('Creating new Job...');\n      await client.job.create(jobId, jobDef, {});\n      return false;\n    }\n    let planDetails = {};\n    if (typeof newJobHCL === 'undefined' || newJobHCL === null) {\n      logger.info('Updating Job from initial definition');\n      planDetails = await client.job.plan(jobId, jobDef, { diff: true });\n      if (updateNow === false) return planDetails;\n      await client.job.update(jobId, jobDef, {});\n      jobInfo = await getDetail();\n      return jobInfo;\n    }\n    logger.info('Updating Job...');\n    const newJobDef = await Job.parseHCL(client)(newJobHCL);\n    planDetails = await client.job.plan(jobId, newJobDef, { diff: true });\n    if (updateNow === false) return planDetails;\n    const { JobModifyIndex: jobModifyIndex } = planDetails;\n    await client.job.update(jobId, newJobDef, { enforceIndex: true, jobModifyIndex });\n    jobInfo = await getDetail();\n    return jobInfo;\n  };\n\n  const parseNodeAllocation = (allocIDList) => (acc, allocRow) => {\n    const { ID } = allocRow;\n    if (allocIDList.indexOf(ID) === -1) return acc;\n    const {\n      Job: {\n        ID: jobName,\n        TaskGroups: {\n          0: {\n            Name: taskGroupName,\n            Tasks: {\n              0: {\n                Name: taskName,\n              },\n            },\n          },\n        },\n      },\n    } = allocRow;\n    const canonKey = `${jobName}_${taskGroupName}_${taskName}`;\n\n    return acc.concat({\n      allocID: ID,\n      canonKey,\n    });\n  };\n\n  const queryNode = (allocIDList) => async (nodeInfo) => {\n    const {\n      Address: nodeAddress,\n      ID: nodeId,\n      Name: nodeName,\n    } = nodeInfo;\n    // Read Single Node\n    const singleNodeInfo = await client.node.read(nodeId);\n    const {\n      Meta: {\n        region: metaRegion,\n      },\n    } = singleNodeInfo;\n    // Read Allocations\n    const singleNodeAlloc = await client.node.allocations(nodeId);\n    const combinedNodeAlloc = singleNodeAlloc.reduce(parseNodeAllocation(allocIDList), [])\n      .map((n) => ({\n        ...n,\n        nodeId,\n        address: nodeAddress,\n        name: nodeName,\n        metaRegion,\n      }));\n    return combinedNodeAlloc;\n  };\n\n  const getAllocations = async () => {\n    const rawNodeInfo = await client.job.allocations(jobId);\n    // Get a breakdown summary of target allocations\n    const jobAllocInfo = rawNodeInfo.reduce((acc, nodeInfo) => {\n      const {\n        JobID: allocJobId,\n        ClientStatus: allocClientStatus,\n        ID: allocId,\n        NodeID: allocNodeId,\n      } = nodeInfo;\n      if (allocClientStatus !== 'running' || allocJobId !== jobId) return acc;\n      return acc.concat([{ allocId, allocJobId, allocNodeId }]);\n    }, []);\n    // Get all Nodes\n    const nodeAllocFilter = jobAllocInfo.reduce(\n      (acc, allocInfo) => acc.concat([allocInfo.allocNodeId]),\n      [],\n    );\n    const allocIDList = jobAllocInfo.reduce(\n      (acc, allocInfo) => acc.concat([allocInfo.allocId]),\n      [],\n    );\n    const rawAllNodes = await client.node.list();\n    const filteredNodes = rawAllNodes.filter((n) => nodeAllocFilter.indexOf(n.ID) > -1);\n    // Read all Nodes Allocation\n    const combinedNodes = await Promise.all(filteredNodes.map(queryNode(allocIDList)));\n    allocations = combinedNodes.reduce((acc, node) => acc.concat(node), []);\n    // Update Layout\n    updateLayout(allocations);\n    return allocations;\n  };\n\n  const describe = () => layout;\n\n  return {\n    sync,\n    getDetail,\n    getAllocations,\n    describe,\n  };\n};\n\nJob.parseHCL = (client) => async (hclDef) => {\n  const hclNorm = stripNewLine(hclDef);\n  const apiReply = await client.job.parse(`${hclNorm}`);\n  return apiReply;\n};\n\nJob.fromHCL = (client) => async (hclDef) => {\n  console.log('Create job from HCL');\n  const apiReply = await Job.parseHCL(client)(hclDef);\n  const { ID: loadJobId } = apiReply;\n  console.log('Returning new job from HCL...');\n  return Job(client)(loadJobId, apiReply);\n};\n\nconst JobAPI = (reqPartial) => {\n  const parse = async (jobHCL, canonicalize = false) => reqPartial('/v1/jobs/parse', 'POST')({\n    body: {\n      JobHCL: jobHCL,\n      Canonicalize: canonicalize,\n    },\n  });\n\n  const plan = async (jobId, jobDef, { diff = true, policyOverride = false }) => reqPartial(`/v1/job/${jobId}/plan`, 'POST')({\n    body: {\n      Job: jobDef,\n      Diff: diff,\n      PolicyOverride: policyOverride,\n    },\n  });\n\n  const read = async (jobId) => reqPartial(`/v1/job/${jobId}`, 'GET')({});\n\n  const create = async (\n    jobId,\n    jobDef,\n    {\n      enforceIndex = false,\n      jobModifyIndex = 0,\n      policyOverride = false,\n    }) => reqPartial('/v1/jobs', 'POST')({\n    body: {\n      Job: jobDef,\n      EnforceIndex: enforceIndex,\n      JobModifyIndex: jobModifyIndex,\n      PolicyOverride: policyOverride,\n    },\n  });\n\n  const update = async (\n    jobId,\n    jobDef,\n    {\n      enforceIndex = false,\n      jobModifyIndex = 0,\n      policyOverride = false,\n    }) => reqPartial(`/v1/job/${jobId}`, 'POST')({\n    body: {\n      Job: jobDef,\n      EnforceIndex: enforceIndex,\n      JobModifyIndex: jobModifyIndex,\n      PolicyOverride: policyOverride,\n    },\n  });\n\n  const allocations = async (jobId) => reqPartial(`/v1/job/${jobId}/allocations`, 'GET')({});\n\n  const allocationsByNode = async (nodeId) => reqPartial(`/v1/node/${nodeId}/allocations`, 'GET')({});\n\n  const listNode = (async) => reqPartial('/v1/nodes', 'GET')({});\n\n  const readNode = async (nodeId) => reqPartial(`/v1/node/${nodeId}`, 'GET')({});\n\n  return {\n    parse,\n    plan,\n    read,\n    create,\n    update,\n    allocations,\n    allocationsByNode,\n    listNode,\n    readNode,\n  };\n};\n\nconst NodeAPI = (reqPartial) => {\n  const allocations = async (nodeId) => reqPartial(`/v1/node/${nodeId}/allocations`, 'GET')({});\n\n  const list = (async) => reqPartial('/v1/nodes', 'GET')({});\n\n  const read = async (nodeId) => reqPartial(`/v1/node/${nodeId}`, 'GET')({});\n\n  return {\n    allocations,\n    list,\n    read,\n  };\n};\n\nconst Client = (nodeIP, nodePort, reqArgs = {}) => {\n  const reqPartial = rawRequest(nodeIP, nodePort, reqArgs);\n  return {\n    job: { ...JobAPI(reqPartial) },\n    node: { ...NodeAPI(reqPartial) },\n  };\n};\n\nexport {\n  Job,\n  Client,\n};\n"]}