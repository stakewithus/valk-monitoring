{"version":3,"sources":["../../../../src/plugins/schedulers/nomad/index.spec.js"],"names":["Bluebird","promisifyAll","fs","nomadClient","describe","job","it","done","readAndParseJob","nomadHCL","readFileAsync","path","join","__dirname","Job","fromHCL","then","result","catch","syncAndCreateJob","sync","jobInfo","getDetail","assert","equal","ID","planJob","planDetail","Diff","Type","updateJob","newJobInfo","checkJob","nodeAllocationInfo","getAllocations","console","log"],"mappings":"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","file":"index.spec.js","sourcesContent":["import { assert } from 'chai';\nimport fs from 'fs';\nimport path from 'path';\nimport Bluebird from 'bluebird';\nimport { Job, Client } from './index';\n\nBluebird.promisifyAll(fs);\n\nconst nomadClient = Client('127.0.0.1', 4646, {});\n\ndescribe('# Nomad Scheduler Plugin', () => {\n  let job = {};\n  describe('# Job Parsing, Configuration, Creating', () => {\n    it('should parse job.hcl file into JSON', (done) => {\n      const readAndParseJob = async () => {\n        const nomadHCL = await fs.readFileAsync(path.join(__dirname, 'fixtures', 'socat.hcl'), 'utf-8');\n        await Job.fromHCL(nomadClient)(nomadHCL);\n      };\n      readAndParseJob().then((result) => {\n        done();\n      }).catch(done);\n    }); // End of IT\n  }); // End of Describe\n  describe('# Job Sync', () => {\n    it('should create new Job if it does not exist', (done) => {\n      const syncAndCreateJob = async () => {\n        const nomadHCL = await fs.readFileAsync(path.join(__dirname, 'fixtures', 'socat.hcl'), 'utf-8');\n        job = await Job.fromHCL(nomadClient)(nomadHCL);\n        // Sync\n        await job.sync();\n        const jobInfo = await job.getDetail();\n        return jobInfo;\n      };\n      syncAndCreateJob().then((result) => {\n        // console.log(JSON.stringify(result, null, 2));\n        assert.equal(result.ID, 'blockchain-client');\n        done();\n      }).catch(done);\n    }); // End of IT\n    it('should produce a job plan if it does exist with diff changes', (done) => {\n      const planJob = async () => {\n        const nomadHCL = await fs.readFileAsync(path.join(__dirname, 'fixtures', 'socat-new.hcl'), 'utf-8');\n        // Sync\n        const planDetail = await job.sync(nomadHCL);\n        return planDetail;\n      };\n      planJob().then((result) => {\n        // console.log(JSON.stringify(result, null, 2));\n        assert.equal(result.Diff.Type, 'Edited');\n        done();\n      }).catch(done);\n    }); // End of IT\n    it('should update the job if sync is set to final', (done) => {\n      const updateJob = async () => {\n        const nomadHCL = await fs.readFileAsync(path.join(__dirname, 'fixtures', 'socat-new.hcl'), 'utf-8');\n        // Sync\n        const newJobInfo = await job.sync(nomadHCL, true);\n        return newJobInfo;\n      };\n      updateJob().then((result) => {\n        // console.log(JSON.stringify(result, null, 2));\n        assert.equal(result.ID, 'blockchain-client');\n        done();\n      }).catch(done);\n    }); // End of IT\n  }); // End of Describe\n  describe('# Job Status, Node Allocation', () => {\n    it('should get and set the job\\'s node allocations', (done) => {\n      const checkJob = async () => {\n        const nodeAllocationInfo = await job.getAllocations();\n        return nodeAllocationInfo;\n      };\n      checkJob().then((result) => {\n        // console.log(JSON.stringify(result, null, 2));\n        console.log('finalNodes');\n        console.log(JSON.stringify(result, null, 2));\n        done();\n      }).catch(done);\n    }); // End of IT\n  }); // End of Describe\n});\n"]}