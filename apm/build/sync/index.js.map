{"version":3,"sources":["../../src/sync/index.js"],"names":["Bluebird","promisifyAll","fs","logger","child","module","syncJob","configDir","nomadClient","fileName","info","nomadHCL","readFileAsync","path","join","job","NomadJob","fromHCL","sync","getDetail","getAllocations","syncMesh","nodeIP","consulPort","jobLayout","describe","mesh","syncTasks","argv","config","node","nomadPort","health","console","log","loadLocalConfig","rawFileList","readdirAsync","hclFileList","filter","f","endsWith","length","syncPartial","syncRes","all","map"],"mappings":"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","file":"index.js","sourcesContent":["import pino from 'pino';\nimport fs from 'fs';\nimport path from 'path';\nimport Bluebird from 'bluebird';\n\nimport { Job as NomadJob, Client as NomadClient } from '../plugins/schedulers/nomad/index';\nimport { Mesh } from '../plugins/backends/consul/index';\n\nBluebird.promisifyAll(fs);\n\nconst logger = pino().child({ module: 'sync/index.js' });\n\nconst syncJob = (configDir, nomadClient) => async (fileName) => {\n  logger.info(`Attempting to sync job file ${fileName}`);\n  const nomadHCL = await fs.readFileAsync(path.join(configDir, fileName), 'utf-8');\n  const job = await NomadJob.fromHCL(nomadClient)(nomadHCL);\n  await job.sync(null, true);\n  await job.getDetail();\n  await job.getAllocations();\n  return job;\n};\n\nconst syncMesh = (nodeIP, consulPort) => async (job) => {\n  //\n  logger.info('Attempting to sync servics for job');\n  const jobLayout = job.describe();\n  const mesh = Mesh(nodeIP, consulPort)(jobLayout);\n  await mesh.sync();\n  return mesh;\n};\n\nconst syncTasks = (argv) => async (fileName) => {\n  const {\n    config: configDir,\n    node: nodeIP,\n    nomadPort,\n    consulPort,\n  } = argv;\n  const nomadClient = NomadClient(nodeIP, nomadPort, {});\n  const job = await syncJob(configDir, nomadClient)(fileName);\n  const mesh = await syncMesh(nodeIP, consulPort)(job);\n  const health = await mesh.health();\n  console.log(JSON.stringify(health, null, 2));\n  logger.info('Completed all sync tasks');\n};\n\n\nconst loadLocalConfig = async (argv) => {\n  const {\n    config: configDir,\n  } = argv;\n  const rawFileList = await fs.readdirAsync(configDir);\n  const hclFileList = rawFileList.filter((f) => f.endsWith('.hcl'));\n  if (hclFileList.length > 0) {\n    const syncPartial = syncTasks(argv);\n    const syncRes = await Promise.all(hclFileList.map(syncPartial));\n    return syncRes;\n  }\n  return 0;\n};\n\nconst sync = async (argv) => {\n  const {\n    config: configDir,\n  } = argv;\n  if (configDir !== 'github') {\n    await loadLocalConfig(argv);\n    return 1;\n  }\n  return 1;\n};\n\nexport default sync;\n"]}