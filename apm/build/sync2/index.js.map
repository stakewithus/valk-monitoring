{"version":3,"sources":["../../src/sync2/index.js"],"names":["CHECK_NAMES","Constant","Bluebird","promisifyAll","fs","logger","child","module","parseJobFile","schd","jobHCL","change","changeErr","rawHCL","readFileAsync","normHCL","stripNewLine","jobDef","job","parse","jobPlan","plan","ID","diff","Type","Diff","e","addTendermintService","jobLayout","isSingleHost","validatorSettings","n","name","cat","network","ports","httpP2P","http_p2p","httpRPC","http_rpc","nodeRegion","nodeAddress","validatorAddresses","Util","getValidatorAddress","svcName","getServiceName","httpRPCAlive","Name","Notes","HTTP","Method","Interval","ServiceID","Status","httpP2PAlive","TCP","tmMissedBlocks","map","v","getMissedBlockName","CheckID","getMissedBlockCheckId","address","TTL","TM_MISSED_BLOCK","tmLateBlock","TM_LATE_BLOCK_TIME","tmPeerCount","TM_PEER_COUNT","svcDef","Address","Port","Meta","Checks","createService","addService","nodeName","nodeServiceList","info","exclRegions","region","excl","includes","indexOf","canonKey","removeService","destroyService","updateServices","nodeList","inclFilter","incl","exclFilter","inclNodeList","filter","serviceAdder","length","all","exclNodeList","serviceRemover","addJob","bend","task","create","error","console","log","Job","layoutFromDef","updateJob","update","addTerraBackend","nodeHost","consulPort","Api","lcdList","process","env","TERRA_LCD","split","lcd","host","port","LcdBackend","addCheck","TerraOracle","syncProd","prodConfigFile","serverConfig","getProductionFileConfig","Core","getClusterProd","KVStore","getValidatorAddressSettings","projects","nodes","reduce","acc","node","forEach","proj","existingProj","find","push","deRegisterServices","p","sync","nomadPort","configDir","production","nomadToken","consulToken","getCluster","fileList","readdirAsync","jobFileList","f","endsWith","path","join","jobParser","jobTasks","addJobTasks","j","adder","updateJobTasks","updater","failedJobTasks"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport Bluebird from 'bluebird';\nimport path from 'path';\nimport pino from 'pino';\nimport KVStore from '../monit/kv-store';\nimport Constant from '../monit/constant';\n\nimport Util from '../common/util';\nimport Core from '../core';\nimport Backend from '../plugins/backends/consul2/api';\nimport LcdBackend from '../monit/lcd-backend';\nimport TerraOracle from '../monit/terra/oracle-backend';\n\nconst { CHECK_NAMES } = Constant;\n\nBluebird.promisifyAll(fs);\nconst logger = pino().child({ module: 'cmd/sync' });\n\n\nconst parseJobFile = (schd) => async (jobHCL) => {\n  let change = 'None';\n  let changeErr = null;\n  const rawHCL = await fs.readFileAsync(jobHCL, 'utf-8');\n  const normHCL = schd.stripNewLine(rawHCL);\n  try {\n    const jobDef = await schd.job.parse(`${normHCL}`);\n    const jobPlan = await schd.job.plan(jobDef.ID, jobDef, { diff: true });\n    const {\n      Diff: {\n        Type,\n      },\n    } = jobPlan;\n    change = Type;\n    return {\n      change,\n      changeErr,\n      jobDef,\n    };\n  } catch (e) {\n    changeErr = e;\n    return {\n      change,\n      changeErr,\n    };\n  }\n};\n\nconst addTendermintService = (jobLayout, isSingleHost, validatorSettings) => async (n) => {\n  const {\n    name,\n    cat,\n    network,\n    ports: {\n      http_p2p: httpP2P,\n      http_rpc: httpRPC,\n    },\n  } = jobLayout;\n  const {\n    nodeRegion,\n    nodeAddress,\n  } = n;\n  const validatorAddresses = Util.getValidatorAddress(validatorSettings, name, network);\n  const svcName = Util.getServiceName(name, isSingleHost, nodeRegion);\n  // Basic Checks\n  const httpRPCAlive = {\n    Name: 'http-rpc-alive',\n    Notes: 'Checks that Tendermint RPC Server is running',\n    HTTP: `http://${nodeAddress}:${httpRPC}/status`,\n    Method: 'GET',\n    Interval: '300s',\n    ServiceID: svcName,\n    Status: 'critical',\n  };\n\n  const httpP2PAlive = {\n    Name: 'http-p2p-alive',\n    Notes: 'Checks that Tendermint P2P Server is running',\n    TCP: `${nodeAddress}:${httpP2P}`,\n    Interval: '300s',\n    ServiceID: svcName,\n    Status: 'critical',\n  };\n  // Advanced Checks\n  const tmMissedBlocks = isSingleHost ? validatorAddresses.map((v) => ({\n    Name: Util.getMissedBlockName(v.name),\n    CheckID: Util.getMissedBlockCheckId(svcName, v.name),\n    Notes: `Tally for monitoring missed blocks threshold ${v.address}`,\n    TTL: '300s',\n    ServiceID: svcName,\n    Status: 'critical',\n  })) : {\n    Name: CHECK_NAMES.TM_MISSED_BLOCK,\n    Notes: 'Tally for monitoring missed blocks threshold',\n    TTL: '300s',\n    ServiceID: svcName,\n    Status: 'critical',\n  };\n  const tmLateBlock = {\n    Name: CHECK_NAMES.TM_LATE_BLOCK_TIME,\n    Notes: 'Tally for late block time threshold',\n    TTL: '300s',\n    ServiceID: svcName,\n    Status: 'critical',\n  };\n  const tmPeerCount = {\n    Name: CHECK_NAMES.TM_PEER_COUNT,\n    Notes: 'Tally for peer count threshold',\n    TTL: '300s',\n    ServiceID: svcName,\n    Status: 'critical',\n  };\n  // Sample Service Definition / Payload\n  const svcDef = {\n    ID: svcName,\n    Name: svcName,\n    Address: nodeAddress, // Set to the local agent's address\n    Port: httpP2P,\n    Meta: {\n      'node-project': 'blockchain-client',\n      'node-project-cat': cat,\n      'node-project-name': name,\n      'node-project-network': network,\n    },\n    Checks: [\n      httpRPCAlive,\n      httpP2PAlive,\n      ...tmMissedBlocks,\n      tmLateBlock,\n      tmPeerCount,\n    ],\n  };\n  await n.createService(svcDef);\n};\n\nconst addService = (jobLayout, isSingleHost, validatorSettings) => async (n) => {\n  const {\n    nodeName,\n    nodeRegion,\n    nodeAddress,\n    nodeServiceList,\n  } = n;\n  logger.info(`Current service list: ${JSON.stringify(nodeServiceList)}`);\n  const {\n    name,\n  } = jobLayout;\n  const exclRegions = jobLayout.region.excl;\n  const svcName = Util.getServiceName(name, isSingleHost, nodeRegion);\n  if (exclRegions.includes(nodeRegion) || nodeServiceList.indexOf(svcName) > -1) return 0;\n  logger.info(`Attempting to register service ${jobLayout.canonKey} on ${nodeName} - ${nodeRegion} [${nodeAddress}]`);\n  const { cat } = jobLayout;\n  if (cat === 'tendermint') {\n    await addTendermintService(jobLayout, isSingleHost, validatorSettings)(n);\n    logger.info(`Service ${jobLayout.canonKey} registered successfully on ${nodeName} - ${nodeRegion} [${nodeAddress}]`);\n    return 0;\n  }\n  return 1;\n};\n\nconst removeService = (jobLayout, isSingleHost) => async (n) => {\n  const {\n    nodeName,\n    nodeRegion,\n    nodeAddress,\n    nodeServiceList,\n  } = n;\n  const {\n    name,\n  } = jobLayout;\n  const svcName = Util.getServiceName(name, isSingleHost, nodeRegion);\n  if (nodeServiceList.indexOf(svcName) === -1) return 0;\n  logger.info(`Attempting to de-register service ${jobLayout.canonKey} on ${nodeName} - ${nodeRegion} [${nodeAddress}]`);\n  await n.destroyService(svcName);\n  logger.info(`Service ${jobLayout.canonKey} de-registered successfully on ${nodeName} - ${nodeRegion} [${nodeAddress}]`);\n  return 0;\n};\n\nconst updateServices = async (nodeList, jobLayout, isSingleHost, validatorSettings) => {\n  const { region: { incl: inclFilter, excl: exclFilter } } = jobLayout;\n  // Register Services on qualifed nodes\n  const inclNodeList = nodeList.filter((n) => inclFilter.indexOf(n.nodeRegion) > -1);\n  const serviceAdder = addService(jobLayout, isSingleHost, validatorSettings);\n  logger.info(`[u] Add services on ${inclNodeList.length} nodes`);\n  await Promise.all(inclNodeList.map(serviceAdder));\n  // De-register Services on un-qualifed nodes\n  const exclNodeList = nodeList.filter((n) => exclFilter.indexOf(n.nodeRegion) > -1);\n  const serviceRemover = removeService(jobLayout, isSingleHost);\n  logger.info(`[u] Remove services on ${exclNodeList.length} nodes`);\n  await Promise.all(exclNodeList.map(serviceRemover));\n};\n\nconst addJob = (nodeList, schd, bend) => async (task) => {\n  const { jobDef } = task;\n  try {\n    // Create Job\n    await schd.job.create(jobDef.ID, jobDef, {});\n  } catch (e) {\n    logger.error(`Caught error when creating job ${jobDef.ID}`);\n    console.log(e);\n    return 1;\n  }\n  // Get Job Affinity, to get list of qualified nodes for allocation\n  // After Job Create Success\n  const jobLayout = schd.Job.layoutFromDef(jobDef);\n  // Update Service Mesh\n  await updateServices(nodeList, jobLayout);\n  return 0;\n};\n\nconst updateJob = (nodeList, schd, bend) => async (task) => {\n  const { jobDef } = task;\n  try {\n    // Create Job\n    await schd.job.update(jobDef.ID, jobDef, {});\n  } catch (e) {\n    logger.error(`Caught error when updating job ${jobDef.ID}`);\n    console.log(e);\n    return 1;\n  }\n  // After Job Create Success\n  const jobLayout = schd.Job.layoutFromDef(jobDef);\n  // Update Service Mesh\n  await updateServices(nodeList, jobLayout);\n  return 0;\n};\n\nconst addTerraBackend = async (nodeHost, consulPort) => {\n  const bend = Backend(nodeHost, consulPort).Api;\n  const lcdList = process.env.TERRA_LCD.split(',');\n  await Promise.all(lcdList.map(async (lcd) => {\n    const [host, port] = lcd.split(':');\n    await LcdBackend.addService(bend)('terra', host, port);\n    return LcdBackend.addCheck(bend)('terra', host, port);\n  }));\n  return TerraOracle.addCheck(bend);\n};\n\nconst syncProd = async (nodeHost, consulPort, prodConfigFile) => {\n  await addTerraBackend(nodeHost, consulPort);\n  logger.info('Retrieving cluster info...');\n  const serverConfig = await Util.getProductionFileConfig(prodConfigFile);\n  const { nodeList, bend } = await Core.getClusterProd(nodeHost, consulPort, serverConfig);\n  const validatorSettings = await KVStore.getValidatorAddressSettings(bend)(prodConfigFile);\n  const projects = serverConfig.nodes.reduce((acc, node) => {\n    node.projects.forEach((proj) => {\n      const existingProj = acc.find((e) => e.name === proj.name && e.network === proj.network\n        && proj.ports.http_p2p === e.ports.http_p2p && proj.ports.http_rpc === e.ports.http_rpc);\n      if (existingProj) {\n        existingProj.region.incl.push(node.region);\n      } else {\n        acc.push({\n          name: proj.name,\n          network: proj.network,\n          cat: 'tendermint',\n          region: {\n            incl: [node.region],\n            excl: serverConfig.deRegisterServices[proj.name] || [],\n          },\n          ports: proj.ports,\n        });\n      }\n    });\n    return acc;\n  }, []);\n  const isSingleHost = true;\n  return Promise.all(projects.map((p) => updateServices(\n    nodeList, p, isSingleHost, validatorSettings,\n  )));\n};\n\nconst sync = async (\n  nodeHost,\n  nomadPort,\n  consulPort,\n  configDir,\n  {\n    nomadToken,\n    consulToken,\n  },\n  production,\n  prodConfigFile,\n) => {\n  if (production) {\n    return syncProd(nodeHost, consulPort, prodConfigFile);\n  }\n  logger.info('Retrieving cluster info...');\n  const { nodeList, schd, bend } = await Core.getCluster(nodeHost, nomadPort, consulPort);\n  logger.info('Start Syncing Jobs');\n  const fileList = await fs.readdirAsync(configDir);\n  const jobFileList = fileList.filter((f) => f.endsWith('.hcl')).map((f) => path.join(configDir, f));\n  const jobParser = parseJobFile(schd);\n  const jobTasks = await Promise.all(jobFileList.map(jobParser));\n  const addJobTasks = jobTasks.filter((j) => j.change === 'Added');\n  logger.info(`Jobs to Add: ${addJobTasks.length}`);\n  const adder = addJob(nodeList, schd, bend);\n  await Promise.all(addJobTasks.map(adder));\n\n  const updateJobTasks = jobTasks.filter((j) => j.change === 'Edited');\n  logger.info(`Jobs to Update: ${updateJobTasks.length}`);\n  const updater = updateJob(nodeList, schd, bend);\n  await Promise.all(updateJobTasks.map(updater));\n\n  const failedJobTasks = jobTasks.filter((j) => j.changeErr !== null);\n  return logger.info(`Jobs that failed to parse: ${failedJobTasks.length}`);\n};\n\nexport default sync;\n"]}