{"version":3,"sources":["../../src/core/index.js"],"names":["Bluebird","promisifyAll","fs","Node","schd","bend","nodeID","nodeDetail","nodeServices","nodeChecks","nodeAddress","nodeName","Name","nodeMeta","Meta","nodeRegion","region","nodeMetaRest","nodeServiceList","nodeCheckList","createService","svcDef","res","agent","service","upsert","destroyService","svcName","destroy","create","nomadPort","consulPort","Api","node","read","list","check","e","console","log","getCluster","nodeHost","nomadNodeList","consulNodeList","catalog","rawNodeList","reduce","acc","nomadRow","ID","docker","Drivers","Address","Status","consulRow","filter","cRow","consulMeta","nodeRow","driverDocker","nodeStatus","concat","nodeMaker","nodeList","all","map","stripNewLine","Job","getClusterProd","Config","nodes","id","address","projects","serverConfig","getNodeInfos","production","nodeIp","prodConfigFile","Util","getProductionFileConfig"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport Bluebird from 'bluebird';\nimport Scheduler from '../plugins/schedulers/nomad2/api';\nimport Backend from '../plugins/backends/consul2/api';\nimport Util from '../common/util';\n\nBluebird.promisifyAll(fs);\n\nconst Node = (\n  schd,\n  bend,\n  {\n    nodeID,\n    nodeDetail,\n    nodeServices,\n    nodeChecks,\n    nodeAddress,\n  },\n) => {\n  const {\n    Name: nodeName,\n    Meta: nodeMeta,\n  } = nodeDetail;\n  const {\n    region: nodeRegion,\n    ...nodeMetaRest\n  } = nodeMeta;\n\n  const nodeServiceList = Object.keys(nodeServices);\n  const nodeCheckList = Object.keys(nodeChecks);\n\n  const createService = async (svcDef) => {\n    const res = await bend.agent.service.upsert(svcDef);\n    return res;\n  };\n\n  const destroyService = async (svcName) => {\n    const res = await bend.agent.service.destroy(svcName);\n    return res;\n  };\n\n\n  return {\n    createService,\n    destroyService,\n\n    nodeName,\n    nodeID,\n    nodeAddress,\n    nodeMeta: nodeMetaRest,\n    nodeRegion,\n    nodeServices,\n    nodeChecks,\n    nodeServiceList,\n    nodeCheckList,\n  };\n};\n\nNode.create = (nomadPort, consulPort) => async ({ nodeID, nodeAddress }) => {\n  try {\n    const schd = Scheduler(nodeAddress, nomadPort);\n    const bend = Backend(nodeAddress, consulPort);\n    const nodeDetail = await schd.Api.node.read(nodeID);\n    const nodeServices = await bend.Api.agent.service.list();\n    const nodeChecks = await bend.Api.agent.check.list();\n\n    return Node(\n      schd.Api,\n      bend.Api,\n      {\n        nodeID,\n        nodeDetail,\n        nodeServices,\n        nodeChecks,\n        nodeAddress,\n      },\n    );\n  } catch (e) {\n    console.log(e);\n    return 0;\n  }\n};\n\nconst getCluster = async (\n  nodeHost,\n  nomadPort,\n  consulPort,\n) => {\n  const schd = Scheduler(nodeHost, nomadPort);\n  const nomadNodeList = await schd.Api.node.list();\n  const bend = Backend(nodeHost, consulPort);\n  const consulNodeList = await bend.Api.catalog.list();\n  const rawNodeList = nomadNodeList.reduce((acc, nomadRow) => {\n    const {\n      ID,\n      Drivers: { docker },\n      Address,\n      Name,\n      Status,\n    } = nomadRow;\n    const consulRow = consulNodeList.filter((cRow) => cRow.ID === ID);\n    const { Meta: consulMeta } = consulRow;\n    const nodeRow = {\n      nodeID: ID,\n      driverDocker: docker,\n      nodeAddress: Address,\n      nodeStatus: Status,\n      nodeName: Name,\n      consulMeta,\n    };\n    return acc.concat(nodeRow);\n  }, []);\n  const nodeMaker = Node.create(nomadPort, consulPort);\n  const nodeList = await Promise.all(rawNodeList.map(nodeMaker));\n  return {\n    nodeList,\n    schd: { ...schd.Api, stripNewLine: schd.stripNewLine, Job: schd.Job },\n    bend: bend.Api,\n  };\n};\nconst getClusterProd = async (\n  nodeHost,\n  consulPort,\n  Config,\n) => {\n  const bend = Backend(nodeHost, consulPort);\n  const nodeServices = await bend.Api.agent.service.list();\n  const nodeChecks = await bend.Api.agent.check.list();\n  const nodeServiceList = Object.keys(nodeServices);\n  const nodeCheckList = Object.keys(nodeChecks);\n  const createService = async (svcDef) => {\n    const res = await bend.Api.agent.service.upsert(svcDef);\n    return res;\n  };\n\n  const destroyService = async (svcName) => {\n    const res = await bend.Api.agent.service.destroy(svcName);\n    return res;\n  };\n  return {\n    nodeList: Config.nodes.map((node) => ({\n      nodeID: node.id,\n      nodeAddress: node.address,\n      nodeRegion: node.region,\n      nodeServices,\n      nodeChecks,\n      nodeServiceList,\n      nodeCheckList,\n      projects: node.projects,\n      createService,\n      destroyService,\n    })),\n    bend: bend.Api,\n    serverConfig: Config,\n  };\n};\n\nconst getNodeInfos = async ({\n  production,\n  nodeIp,\n  consulPort,\n  nomadPort,\n  prodConfigFile,\n}) => {\n  if (production) {\n    const serverConfig = await Util.getProductionFileConfig(prodConfigFile);\n    return getClusterProd(nodeIp, consulPort, serverConfig);\n  }\n  return getCluster(nodeIp, nomadPort, consulPort);\n};\n\nexport default {\n  getCluster,\n  getClusterProd,\n  getNodeInfos,\n};\n"]}