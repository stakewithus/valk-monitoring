{"version":3,"sources":["../../src/common/util.js"],"names":["Bluebird","promisifyAll","fs","convertKebabToCamelCase","s","replace","g","toUpperCase","getProjectName","project","includes","getServiceName","production","region","projectName","getValidatorAddress","settings","networkName","fullProjectName","proj","find","network","validators","length","Error","getProductionFileConfig","prodConfigFile","configContent","readFileSync","JSON","parse","e","getHealthCheckConfigs","defaultSettings","Config","thresholdLimits","customSettings","config","heathChecksThresholdLimits","customHealthCheckThresholdLimits","splitArray","arr","size","newArr","i","push","slice","randomInteger","min","max","Math","floor","random","roundFloatNumber","input","precision","round","getProjectList","nodes","reduce","acc","n","concat","projects","exist","a","name","getMissedBlockName","validatorName","Constant","CHECK_NAMES","TM_MISSED_BLOCK","getMissedBlockCheckId","svcName","getProjectNameSimple","split"],"mappings":"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","file":"util.js","sourcesContent":["import fs from 'fs';\nimport Bluebird from 'bluebird';\nimport Config from '../config';\nimport Constant from '../monit/constant';\n\nBluebird.promisifyAll(fs);\n\nconst convertKebabToCamelCase = (s) => s && s.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n\nconst getProjectName = (project) => (project.includes('bcl-') ? project : `bcl-${project}`);\n\nconst getServiceName = (project, production, region) => {\n  const projectName = project.includes('bcl-') ? project : `bcl-${project}`;\n  if (!production) {\n    return projectName;\n  }\n  return `${projectName}:${region}`;\n};\n\nconst getValidatorAddress = (settings, projectName, networkName) => {\n  const fullProjectName = getProjectName(projectName);\n  const proj = settings && settings\n    .find((s) => s.project === fullProjectName && s.network === networkName);\n  if (!proj || !proj.validators || proj.validators.length === 0) {\n    throw new Error(`Missing config for ${projectName} ${networkName}`);\n  }\n  return proj.validators;\n};\n\nconst getProductionFileConfig = async (prodConfigFile) => {\n  if (!prodConfigFile) {\n    throw new Error('Config file is missing');\n  }\n  const configContent = await fs.readFileSync(prodConfigFile);\n  if (!configContent) {\n    throw new Error('Can not get config file content');\n  }\n  try {\n    return JSON.parse(configContent);\n  } catch (e) {\n    throw new Error('Can not parse config file');\n  }\n};\n\nconst getHealthCheckConfigs = async (production, prodConfigFile) => {\n  if (!production) {\n    return {\n      defaultSettings: Config.thresholdLimits,\n      customSettings: {},\n    };\n  }\n  const config = await getProductionFileConfig(prodConfigFile);\n  return {\n    defaultSettings: config.heathChecksThresholdLimits,\n    customSettings: config.customHealthCheckThresholdLimits,\n  };\n};\n\nconst splitArray = (arr, size) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i += size) {\n    newArr.push(arr.slice(i, i + size));\n  }\n  return newArr;\n};\nexport const randomInteger = (min, max) => Math.floor(Math.random() * (max - min + 1));\n\nexport const roundFloatNumber = (\n  input,\n  precision,\n) => Math.round(input * (10 ** precision)) / (10 ** precision);\n\nconst getProjectList = async (prodConfigFile) => {\n  const config = await getProductionFileConfig(prodConfigFile);\n  return config.nodes.reduce((acc, n) => acc.concat(n.projects), []).reduce((acc, proj) => {\n    const exist = acc.find((a) => a.project === proj.name && a.network === proj.network);\n    if (exist) {\n      return acc;\n    }\n    return acc.concat({\n      project: proj.name,\n      network: proj.network,\n    });\n  }, []);\n};\n\nconst getMissedBlockName = (validatorName) => `${Constant.CHECK_NAMES.TM_MISSED_BLOCK}-${validatorName}`;\n\nconst getMissedBlockCheckId = (svcName, validatorName) => `service:${svcName}:${validatorName}`;\n\nconst getProjectNameSimple = (projectName) => {\n  if (!projectName.includes('bcl-')) {\n    return projectName;\n  }\n  const [, project] = projectName.split('bcl-');\n  return project;\n};\n\nexport default {\n  convertKebabToCamelCase,\n  getProjectName,\n  getValidatorAddress,\n  getProductionFileConfig,\n  getHealthCheckConfigs,\n  getServiceName,\n  splitArray,\n  randomInteger,\n  roundFloatNumber,\n  getProjectList,\n  getMissedBlockName,\n  getProjectNameSimple,\n  getMissedBlockCheckId,\n};\n"]}