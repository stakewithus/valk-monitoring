{"version":3,"sources":["../../src/common/test-util.js"],"names":["Bluebird","promisifyAll","fs","upperFirst","s","charAt","toUpperCase","slice","getFileContent","fPath","fName","rawData","readFileAsync","path","join","fData","JSON","parse","split","kName","listName","name","map","getFolderContent","folder","relative","__dirname","fileList","readdirAsync","pList","all","filter","f","indexOf","content","reduce","acc","row"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,mBAASC,YAAT,CAAsBC,YAAtB;;AAEA,IAAMC,aAAa,SAAbA,UAAa,CAACC,CAAD;AAAA,SAAOA,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,EAAEG,KAAF,CAAQ,CAAR,CAAnC;AAAA,CAAnB;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAAW,gBAAOC,KAAP,EAAiB;AACjD,QAAMC,UAAU,MAAMT,aAAGU,aAAH,CAAiBC,eAAKC,IAAL,CAAUL,KAAV,EAAiBC,KAAjB,CAAjB,CAAtB;AACA,QAAMK,QAAQC,KAAKC,KAAL,CAAWN,OAAX,CAAd;;AAFiD,uBAG5BD,MAAMQ,KAAN,CAAY,OAAZ,CAH4B;AAAA,QAGtCC,KAHsC,gBAGzC,CAHyC;;AAAA,uBAIzBA,MAAMD,KAAN,CAAY,GAAZ,CAJyB;AAAA;AAAA,QAIrCE,QAJqC;;AAKjD,QAAMC,OAAOD,SAASE,GAAT,CAAanB,UAAb,EAAyBW,IAAzB,CAA8B,EAA9B,CAAb;AACA,6CAAUO,IAAV,EAAiBN,KAAjB;AACD,GAPsB;AAAA,CAAvB;;AASA,IAAMQ,mBAAmB,eAAnBA,gBAAmB,CAAOC,MAAP,EAAoC;AAAA,MAArBC,QAAqB,uEAAV,KAAU;;AAC3D,MAAMhB,QAAQI,eAAKC,IAAL,CAAUY,SAAV,EAAqBD,QAArB,EAA+BD,MAA/B,CAAd;AACA,MAAMG,WAAW,MAAMzB,aAAG0B,YAAH,CAAgBnB,KAAhB,CAAvB;AACA,MAAMoB,QAAQ,MAAM,kBAAQC,GAAR,CAAYH,SAASI,MAAT,CAAgB,UAACC,CAAD;AAAA,WAAOA,EAAEC,OAAF,CAAU,OAAV,IAAqB,CAAC,CAA7B;AAAA,GAAhB,EAC7BX,GAD6B,CACzBd,eAAeC,KAAf,CADyB,CAAZ,CAApB;AAEA,MAAMyB,UAAUL,MAAMM,MAAN,CAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,sCAAoBD,GAApB,EAA4BC,GAA5B;AAAA,GAAb,EAAiD,EAAjD,CAAhB;AACA,SAAOH,OAAP;AACD,CAPD;;kBASe;AACbX;AADa,C","file":"test-util.js","sourcesContent":["import fs from 'fs';\nimport Bluebird from 'bluebird';\nimport path from 'path';\n\nBluebird.promisifyAll(fs);\n\nconst upperFirst = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n\nconst getFileContent = (fPath) => async (fName) => {\n  const rawData = await fs.readFileAsync(path.join(fPath, fName));\n  const fData = JSON.parse(rawData);\n  const { 0: kName } = fName.split('.json');\n  const [, ...listName] = kName.split('_');\n  const name = listName.map(upperFirst).join('');\n  return { [name]: fData };\n};\n\nconst getFolderContent = async (folder, relative = '../') => {\n  const fPath = path.join(__dirname, relative, folder);\n  const fileList = await fs.readdirAsync(fPath);\n  const pList = await Promise.all(fileList.filter((f) => f.indexOf('.json') > -1)\n    .map(getFileContent(fPath)));\n  const content = pList.reduce((acc, row) => ({ ...acc, ...row }), {});\n  return content;\n};\n\nexport default {\n  getFolderContent,\n};\n"]}